
iCEBlaster_maplemini.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aadc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001a8  0800abe8  0800abe8  0001abe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ad90  0800ad90  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  0800ad90  0800ad90  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800ad90  0800ad90  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ad90  0800ad90  0001ad90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ad94  0800ad94  0001ad94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  0800ad98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001140  20000188  0800af1c  00020188  2**3
                  ALLOC
 10 ._user_heap_stack 00001400  200012c8  0800af1c  000212c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012f9e  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003ae7  00000000  00000000  0003314b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001158  00000000  00000000  00036c38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa8  00000000  00000000  00037d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000cdfb  00000000  00000000  00038d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000048e5  00000000  00000000  00045b33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0004a418  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00004d90  00000000  00000000  0004a468  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000188 	.word	0x20000188
 8000128:	00000000 	.word	0x00000000
 800012c:	0800abd0 	.word	0x0800abd0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000018c 	.word	0x2000018c
 8000148:	0800abd0 	.word	0x0800abd0

0800014c <__io_putchar>:
static void MX_SPI1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */

PUTCHAR_PROTOTYPE
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the EVAL_COM1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000154:	1d39      	adds	r1, r7, #4
 8000156:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800015a:	2201      	movs	r2, #1
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <__io_putchar+0x20>)
 800015e:	f003 fe42 	bl	8003de6 <HAL_UART_Transmit>

  return ch;
 8000162:	687b      	ldr	r3, [r7, #4]
}
 8000164:	4618      	mov	r0, r3
 8000166:	3708      	adds	r7, #8
 8000168:	46bd      	mov	sp, r7
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000210 	.word	0x20000210

08000170 <directLoad>:

/* directLoad is used when sending bit stream directly to iCE40 FPGA.
 * treat it as a slave device. By make sure that the CE pin is held low before release CRESET.
 * after iCE40 boot up, it will start in SPI slave mode and then we can send the bit stream directly.
 */
uint8_t directLoad(uint8_t *data, uint32_t size){
 8000170:	b580      	push	{r7, lr}
 8000172:	b084      	sub	sp, #16
 8000174:	af00      	add	r7, sp, #0
 8000176:	6078      	str	r0, [r7, #4]
 8000178:	6039      	str	r1, [r7, #0]
	uint8_t dummy = 0x00;// dummy byte to kick start bit stream loading process.
 800017a:	2300      	movs	r3, #0
 800017c:	737b      	strb	r3, [r7, #13]

	// send series of bitstream to FPGA via SPI.
	HAL_SPI_Transmit(&hspi1, data, size, 100);
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	b29a      	uxth	r2, r3
 8000182:	2364      	movs	r3, #100	; 0x64
 8000184:	6879      	ldr	r1, [r7, #4]
 8000186:	4816      	ldr	r0, [pc, #88]	; (80001e0 <directLoad+0x70>)
 8000188:	f003 fbfe 	bl	8003988 <HAL_SPI_Transmit>


	// Send at lease 100 clock cycles or 12 dummy bytes (96 cycles)
	for(uint8_t i=0; i < 12;i++)
 800018c:	2300      	movs	r3, #0
 800018e:	73fb      	strb	r3, [r7, #15]
 8000190:	e009      	b.n	80001a6 <directLoad+0x36>
		HAL_SPI_Transmit(&hspi1, &dummy, 1, 100);
 8000192:	f107 010d 	add.w	r1, r7, #13
 8000196:	2364      	movs	r3, #100	; 0x64
 8000198:	2201      	movs	r2, #1
 800019a:	4811      	ldr	r0, [pc, #68]	; (80001e0 <directLoad+0x70>)
 800019c:	f003 fbf4 	bl	8003988 <HAL_SPI_Transmit>
	for(uint8_t i=0; i < 12;i++)
 80001a0:	7bfb      	ldrb	r3, [r7, #15]
 80001a2:	3301      	adds	r3, #1
 80001a4:	73fb      	strb	r3, [r7, #15]
 80001a6:	7bfb      	ldrb	r3, [r7, #15]
 80001a8:	2b0b      	cmp	r3, #11
 80001aa:	d9f2      	bls.n	8000192 <directLoad+0x22>

	// Send at lease 49 clock cycles or 7 dummy bytes (56 cycles)
	for(uint8_t i=0; i < 7;i++)
 80001ac:	2300      	movs	r3, #0
 80001ae:	73bb      	strb	r3, [r7, #14]
 80001b0:	e009      	b.n	80001c6 <directLoad+0x56>
		HAL_SPI_Transmit(&hspi1, &dummy, 1, 100);
 80001b2:	f107 010d 	add.w	r1, r7, #13
 80001b6:	2364      	movs	r3, #100	; 0x64
 80001b8:	2201      	movs	r2, #1
 80001ba:	4809      	ldr	r0, [pc, #36]	; (80001e0 <directLoad+0x70>)
 80001bc:	f003 fbe4 	bl	8003988 <HAL_SPI_Transmit>
	for(uint8_t i=0; i < 7;i++)
 80001c0:	7bbb      	ldrb	r3, [r7, #14]
 80001c2:	3301      	adds	r3, #1
 80001c4:	73bb      	strb	r3, [r7, #14]
 80001c6:	7bbb      	ldrb	r3, [r7, #14]
 80001c8:	2b06      	cmp	r3, #6
 80001ca:	d9f2      	bls.n	80001b2 <directLoad+0x42>

	// CE High
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 80001cc:	2201      	movs	r2, #1
 80001ce:	2110      	movs	r1, #16
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <directLoad+0x74>)
 80001d2:	f001 f945 	bl	8001460 <HAL_GPIO_WritePin>

	return 0;
 80001d6:	2300      	movs	r3, #0
}
 80001d8:	4618      	mov	r0, r3
 80001da:	3710      	adds	r7, #16
 80001dc:	46bd      	mov	sp, r7
 80001de:	bd80      	pop	{r7, pc}
 80001e0:	200001b8 	.word	0x200001b8
 80001e4:	40010800 	.word	0x40010800

080001e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80001ec:	b096      	sub	sp, #88	; 0x58
 80001ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint32_t bitstream_size = 0;
 80001f0:	2300      	movs	r3, #0
 80001f2:	64bb      	str	r3, [r7, #72]	; 0x48
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001f4:	f000 fc2c 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001f8:	f000 f91e 	bl	8000438 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001fc:	f000 f9de 	bl	80005bc <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000200:	f008 ffe6 	bl	80091d0 <MX_USB_DEVICE_Init>
  MX_SPI1_Init();
 8000204:	f000 f97a 	bl	80004fc <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000208:	f000 f9ae 	bl	8000568 <MX_USART2_UART_Init>
  /* On Maple Mini board has USB bus gating controlled by PB9
     * If USB function of your STM32F103 Maple Mini doesn't work
     * Or your PC doesn't detect your board
     * Set PB9 to Logic low */

     printf("%c",0x0c);// clear UART terminal screen
 800020c:	200c      	movs	r0, #12
 800020e:	f009 fd07 	bl	8009c20 <putchar>

  HAL_GPIO_WritePin(CRESET_pin_GPIO_Port, CRESET_pin_Pin, GPIO_PIN_SET);// Release reset pin, lets FPGA run.
 8000212:	2201      	movs	r2, #1
 8000214:	2102      	movs	r1, #2
 8000216:	487f      	ldr	r0, [pc, #508]	; (8000414 <main+0x22c>)
 8000218:	f001 f922 	bl	8001460 <HAL_GPIO_WritePin>

    HAL_FLASH_Unlock();
 800021c:	f000 fe1c 	bl	8000e58 <HAL_FLASH_Unlock>
    const uint8_t ms_fat12[62] = {
 8000220:	4b7d      	ldr	r3, [pc, #500]	; (8000418 <main+0x230>)
 8000222:	1d3c      	adds	r4, r7, #4
 8000224:	461d      	mov	r5, r3
 8000226:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000228:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800022c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800022e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000230:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000232:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8000236:	c407      	stmia	r4!, {r0, r1, r2}
 8000238:	8023      	strh	r3, [r4, #0]
			0xD5, 0x80, 0x9A, 0x1C,// Volume serial number
			0x49, 0x43, 0x45, 0x42, 0x4C, 0x41, 0x53, 0x54, 0x45, 0x52, 0x20,// Volume lable "ICEBLASTER ".
			0x46, 0x41, 0x54, 0x31, 0x32, 0x20, 0x20, 0x20// "FAT12   "
    		};

    HAL_FLASH_Unlock();
 800023a:	f000 fe0d 	bl	8000e58 <HAL_FLASH_Unlock>
    	// Page erase
    	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // erase 1024 KBytes (which is the size of 1 page).
 800023e:	4b77      	ldr	r3, [pc, #476]	; (800041c <main+0x234>)
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
    	EraseInitStruct.PageAddress = FLASH_MEM_BASE_ADDR; // We start erase from the beginning of sector.
 8000244:	4b75      	ldr	r3, [pc, #468]	; (800041c <main+0x234>)
 8000246:	4a76      	ldr	r2, [pc, #472]	; (8000420 <main+0x238>)
 8000248:	609a      	str	r2, [r3, #8]
    	EraseInitStruct.NbPages = 1; // this tells eraser for how many page we want to erase.
 800024a:	4b74      	ldr	r3, [pc, #464]	; (800041c <main+0x234>)
 800024c:	2201      	movs	r2, #1
 800024e:	60da      	str	r2, [r3, #12]

    	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8000250:	4974      	ldr	r1, [pc, #464]	; (8000424 <main+0x23c>)
 8000252:	4872      	ldr	r0, [pc, #456]	; (800041c <main+0x234>)
 8000254:	f000 fed8 	bl	8001008 <HAL_FLASHEx_Erase>

    	for(int i=0; i < 62; i+= 2){
 8000258:	2300      	movs	r3, #0
 800025a:	657b      	str	r3, [r7, #84]	; 0x54
 800025c:	e01d      	b.n	800029a <main+0xb2>
    		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
    				FLASH_MEM_BASE_ADDR + i, (ms_fat12[i] | ms_fat12[i+1] << 8)); // flash modified data onto Flash memory.
 800025e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000260:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 8000264:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
    		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000268:	4619      	mov	r1, r3
    				FLASH_MEM_BASE_ADDR + i, (ms_fat12[i] | ms_fat12[i+1] << 8)); // flash modified data onto Flash memory.
 800026a:	1d3a      	adds	r2, r7, #4
 800026c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800026e:	4413      	add	r3, r2
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	461a      	mov	r2, r3
 8000274:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000276:	3301      	adds	r3, #1
 8000278:	3358      	adds	r3, #88	; 0x58
 800027a:	443b      	add	r3, r7
 800027c:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8000280:	021b      	lsls	r3, r3, #8
 8000282:	4313      	orrs	r3, r2
    		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 8000284:	17da      	asrs	r2, r3, #31
 8000286:	469a      	mov	sl, r3
 8000288:	4693      	mov	fp, r2
 800028a:	4652      	mov	r2, sl
 800028c:	465b      	mov	r3, fp
 800028e:	2001      	movs	r0, #1
 8000290:	f000 fd72 	bl	8000d78 <HAL_FLASH_Program>
    	for(int i=0; i < 62; i+= 2){
 8000294:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8000296:	3302      	adds	r3, #2
 8000298:	657b      	str	r3, [r7, #84]	; 0x54
 800029a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800029c:	2b3d      	cmp	r3, #61	; 0x3d
 800029e:	ddde      	ble.n	800025e <main+0x76>
    	}

    	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_MEM_BASE_ADDR + 510, 0xAA55);
 80002a0:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80002a4:	f04f 0300 	mov.w	r3, #0
 80002a8:	495f      	ldr	r1, [pc, #380]	; (8000428 <main+0x240>)
 80002aa:	2001      	movs	r0, #1
 80002ac:	f000 fd64 	bl	8000d78 <HAL_FLASH_Program>

    	HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 80002b0:	2200      	movs	r2, #0
 80002b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80002b6:	485d      	ldr	r0, [pc, #372]	; (800042c <main+0x244>)
 80002b8:	f001 f8d2 	bl	8001460 <HAL_GPIO_WritePin>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint8_t *flash_scan = (uint8_t *)(FLASH_MEM_BASE_ADDR);
 80002bc:	4b58      	ldr	r3, [pc, #352]	; (8000420 <main+0x238>)
 80002be:	653b      	str	r3, [r7, #80]	; 0x50
	  //Locate the Bitstream byte on internal flash by using "pattern match" algorithm.
	  while(1){
		  //flash_scan++;
		  	  if(flash_scan == (uint8_t *)FLASH_MEM_END_ADDR)
 80002c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002c2:	4a5b      	ldr	r2, [pc, #364]	; (8000430 <main+0x248>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d101      	bne.n	80002cc <main+0xe4>
		  				flash_scan = (uint8_t *)(FLASH_MEM_BASE_ADDR);
 80002c8:	4b55      	ldr	r3, [pc, #340]	; (8000420 <main+0x238>)
 80002ca:	653b      	str	r3, [r7, #80]	; 0x50

		  if(*(flash_scan++) == 0x7E){//MSB byte of preamble should be at 0x8015805.
 80002cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002ce:	1c5a      	adds	r2, r3, #1
 80002d0:	653a      	str	r2, [r7, #80]	; 0x50
 80002d2:	781b      	ldrb	r3, [r3, #0]
 80002d4:	2b7e      	cmp	r3, #126	; 0x7e
 80002d6:	d1f3      	bne.n	80002c0 <main+0xd8>
			  if(*(flash_scan++) == 0xAA){
 80002d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002da:	1c5a      	adds	r2, r3, #1
 80002dc:	653a      	str	r2, [r7, #80]	; 0x50
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2baa      	cmp	r3, #170	; 0xaa
 80002e2:	d1ed      	bne.n	80002c0 <main+0xd8>
				  if(*(flash_scan++) == 0x99){
 80002e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002e6:	1c5a      	adds	r2, r3, #1
 80002e8:	653a      	str	r2, [r7, #80]	; 0x50
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	2b99      	cmp	r3, #153	; 0x99
 80002ee:	d1e7      	bne.n	80002c0 <main+0xd8>
					  if(*flash_scan == 0x7E){
 80002f0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80002f2:	781b      	ldrb	r3, [r3, #0]
 80002f4:	2b7e      	cmp	r3, #126	; 0x7e
 80002f6:	d1e3      	bne.n	80002c0 <main+0xd8>
						  // found!
						  HAL_Delay(1000);// slow down a bit. Let's the Bitstream copied.
 80002f8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80002fc:	f000 fc0a 	bl	8000b14 <HAL_Delay>
						  break;
 8000300:	bf00      	nop
			  }

		  }
	  }

	flash_scan -= 3;// After detected the preamble, move address back 3 byte to the beginning of the Bitstream.
 8000302:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000304:	3b03      	subs	r3, #3
 8000306:	653b      	str	r3, [r7, #80]	; 0x50
	// some temporary buffer to hold bit stream address on flash.
	uint8_t *fdata;
    fdata = (uint8_t *)(flash_scan);
 8000308:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800030a:	647b      	str	r3, [r7, #68]	; 0x44

    while(1){// detect wake up command (end of Bitstream).
    	if(*(flash_scan++) == 0x01){
 800030c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800030e:	1c5a      	adds	r2, r3, #1
 8000310:	653a      	str	r2, [r7, #80]	; 0x50
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	2b01      	cmp	r3, #1
 8000316:	d1f9      	bne.n	800030c <main+0x124>
    		if(*(flash_scan++) == 0x06){
 8000318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800031a:	1c5a      	adds	r2, r3, #1
 800031c:	653a      	str	r2, [r7, #80]	; 0x50
 800031e:	781b      	ldrb	r3, [r3, #0]
 8000320:	2b06      	cmp	r3, #6
 8000322:	d1f3      	bne.n	800030c <main+0x124>
    			if(*flash_scan == 0x00){
 8000324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000326:	781b      	ldrb	r3, [r3, #0]
 8000328:	2b00      	cmp	r3, #0
 800032a:	d000      	beq.n	800032e <main+0x146>
    	if(*(flash_scan++) == 0x01){
 800032c:	e7ee      	b.n	800030c <main+0x124>
    				break;
 800032e:	bf00      	nop
    			}
    		}
    	}
    }

    bitstream_size = ((uint8_t *)flash_scan - fdata) + 1;
 8000330:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000332:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000334:	1ad3      	subs	r3, r2, r3
 8000336:	3301      	adds	r3, #1
 8000338:	64bb      	str	r3, [r7, #72]	; 0x48
   // release the reset and quickly blast bit stream to FPGA.
   // procedure according to TN-02001 app note.

   /* FPGA Reset sequence*/
   // CE Low
   HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 800033a:	2200      	movs	r2, #0
 800033c:	2110      	movs	r1, #16
 800033e:	4835      	ldr	r0, [pc, #212]	; (8000414 <main+0x22c>)
 8000340:	f001 f88e 	bl	8001460 <HAL_GPIO_WritePin>

   // CRESET low
   HAL_GPIO_WritePin(CRESET_pin_GPIO_Port, CRESET_pin_Pin, GPIO_PIN_RESET);
 8000344:	2200      	movs	r2, #0
 8000346:	2102      	movs	r1, #2
 8000348:	4832      	ldr	r0, [pc, #200]	; (8000414 <main+0x22c>)
 800034a:	f001 f889 	bl	8001460 <HAL_GPIO_WritePin>

   HAL_Delay(100);// wait for 100ms.
 800034e:	2064      	movs	r0, #100	; 0x64
 8000350:	f000 fbe0 	bl	8000b14 <HAL_Delay>

   // CRESET High
   HAL_GPIO_WritePin(CRESET_pin_GPIO_Port, CRESET_pin_Pin, GPIO_PIN_SET);
 8000354:	2201      	movs	r2, #1
 8000356:	2102      	movs	r1, #2
 8000358:	482e      	ldr	r0, [pc, #184]	; (8000414 <main+0x22c>)
 800035a:	f001 f881 	bl	8001460 <HAL_GPIO_WritePin>

   HAL_Delay(2);// wait for 2ms.
 800035e:	2002      	movs	r0, #2
 8000360:	f000 fbd8 	bl	8000b14 <HAL_Delay>

   // CE High
   //HAL_GPIO_WritePin(w25q.CSBANK, w25q.CS_PIN, GPIO_PIN_SET);

   // FPGA bit stream loading
   directLoad(fdata, bitstream_size);
 8000364:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000366:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000368:	f7ff ff02 	bl	8000170 <directLoad>

	// release reset to lets FPGA run.
	HAL_GPIO_WritePin(CRESET_pin_GPIO_Port, CRESET_pin_Pin, GPIO_PIN_SET);
 800036c:	2201      	movs	r2, #1
 800036e:	2102      	movs	r1, #2
 8000370:	4828      	ldr	r0, [pc, #160]	; (8000414 <main+0x22c>)
 8000372:	f001 f875 	bl	8001460 <HAL_GPIO_WritePin>
	printf("DONE:Bit stream is flashed into SPI NOR");
 8000376:	482f      	ldr	r0, [pc, #188]	; (8000434 <main+0x24c>)
 8000378:	f009 fc3a 	bl	8009bf0 <iprintf>

	// Reformat the drive space.

	HAL_FLASH_Unlock();
 800037c:	f000 fd6c 	bl	8000e58 <HAL_FLASH_Unlock>
	// Page erase
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // erase 1024 KBytes (which is the size of 1 page).
 8000380:	4b26      	ldr	r3, [pc, #152]	; (800041c <main+0x234>)
 8000382:	2200      	movs	r2, #0
 8000384:	601a      	str	r2, [r3, #0]
	EraseInitStruct.PageAddress = FLASH_MEM_BASE_ADDR; // We start erase from the beginning of sector.
 8000386:	4b25      	ldr	r3, [pc, #148]	; (800041c <main+0x234>)
 8000388:	4a25      	ldr	r2, [pc, #148]	; (8000420 <main+0x238>)
 800038a:	609a      	str	r2, [r3, #8]
	EraseInitStruct.NbPages = 64; // this tells eraser for how many page we want to erase.
 800038c:	4b23      	ldr	r3, [pc, #140]	; (800041c <main+0x234>)
 800038e:	2240      	movs	r2, #64	; 0x40
 8000390:	60da      	str	r2, [r3, #12]

	HAL_FLASHEx_Erase(&EraseInitStruct, &PAGEError);
 8000392:	4924      	ldr	r1, [pc, #144]	; (8000424 <main+0x23c>)
 8000394:	4821      	ldr	r0, [pc, #132]	; (800041c <main+0x234>)
 8000396:	f000 fe37 	bl	8001008 <HAL_FLASHEx_Erase>

	for(int i=0; i < 62; i+= 2){
 800039a:	2300      	movs	r3, #0
 800039c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800039e:	e01d      	b.n	80003dc <main+0x1f4>
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
				FLASH_MEM_BASE_ADDR + i, (ms_fat12[i] | ms_fat12[i+1] << 8)); // flash modified data onto Flash memory.
 80003a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003a2:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80003a6:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80003aa:	4619      	mov	r1, r3
				FLASH_MEM_BASE_ADDR + i, (ms_fat12[i] | ms_fat12[i+1] << 8)); // flash modified data onto Flash memory.
 80003ac:	1d3a      	adds	r2, r7, #4
 80003ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003b0:	4413      	add	r3, r2
 80003b2:	781b      	ldrb	r3, [r3, #0]
 80003b4:	461a      	mov	r2, r3
 80003b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003b8:	3301      	adds	r3, #1
 80003ba:	3358      	adds	r3, #88	; 0x58
 80003bc:	443b      	add	r3, r7
 80003be:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 80003c2:	021b      	lsls	r3, r3, #8
 80003c4:	4313      	orrs	r3, r2
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,
 80003c6:	17da      	asrs	r2, r3, #31
 80003c8:	4698      	mov	r8, r3
 80003ca:	4691      	mov	r9, r2
 80003cc:	4642      	mov	r2, r8
 80003ce:	464b      	mov	r3, r9
 80003d0:	2001      	movs	r0, #1
 80003d2:	f000 fcd1 	bl	8000d78 <HAL_FLASH_Program>
	for(int i=0; i < 62; i+= 2){
 80003d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003d8:	3302      	adds	r3, #2
 80003da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80003dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80003de:	2b3d      	cmp	r3, #61	; 0x3d
 80003e0:	ddde      	ble.n	80003a0 <main+0x1b8>
	}

	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, FLASH_MEM_BASE_ADDR + 510, 0xAA55);
 80003e2:	f64a 2255 	movw	r2, #43605	; 0xaa55
 80003e6:	f04f 0300 	mov.w	r3, #0
 80003ea:	490f      	ldr	r1, [pc, #60]	; (8000428 <main+0x240>)
 80003ec:	2001      	movs	r0, #1
 80003ee:	f000 fcc3 	bl	8000d78 <HAL_FLASH_Program>

	// Disconnect and reconnect USB.
	HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_SET);
 80003f2:	2201      	movs	r2, #1
 80003f4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <main+0x244>)
 80003fa:	f001 f831 	bl	8001460 <HAL_GPIO_WritePin>
	HAL_Delay(20);
 80003fe:	2014      	movs	r0, #20
 8000400:	f000 fb88 	bl	8000b14 <HAL_Delay>
	HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 8000404:	2200      	movs	r2, #0
 8000406:	f44f 7100 	mov.w	r1, #512	; 0x200
 800040a:	4808      	ldr	r0, [pc, #32]	; (800042c <main+0x244>)
 800040c:	f001 f828 	bl	8001460 <HAL_GPIO_WritePin>
  {
 8000410:	e754      	b.n	80002bc <main+0xd4>
 8000412:	bf00      	nop
 8000414:	40010800 	.word	0x40010800
 8000418:	0800ac10 	.word	0x0800ac10
 800041c:	200001a4 	.word	0x200001a4
 8000420:	0800fc00 	.word	0x0800fc00
 8000424:	200001b4 	.word	0x200001b4
 8000428:	0800fdfe 	.word	0x0800fdfe
 800042c:	40010c00 	.word	0x40010c00
 8000430:	0801fc00 	.word	0x0801fc00
 8000434:	0800abe8 	.word	0x0800abe8

08000438 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000438:	b580      	push	{r7, lr}
 800043a:	b094      	sub	sp, #80	; 0x50
 800043c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800043e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000442:	2228      	movs	r2, #40	; 0x28
 8000444:	2100      	movs	r1, #0
 8000446:	4618      	mov	r0, r3
 8000448:	f009 fbca 	bl	8009be0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800044c:	f107 0314 	add.w	r3, r7, #20
 8000450:	2200      	movs	r2, #0
 8000452:	601a      	str	r2, [r3, #0]
 8000454:	605a      	str	r2, [r3, #4]
 8000456:	609a      	str	r2, [r3, #8]
 8000458:	60da      	str	r2, [r3, #12]
 800045a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800045c:	1d3b      	adds	r3, r7, #4
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
 8000462:	605a      	str	r2, [r3, #4]
 8000464:	609a      	str	r2, [r3, #8]
 8000466:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000468:	2301      	movs	r3, #1
 800046a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800046c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000470:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000472:	2300      	movs	r3, #0
 8000474:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000476:	2301      	movs	r3, #1
 8000478:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800047a:	2302      	movs	r3, #2
 800047c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800047e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000482:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000484:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000488:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800048a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800048e:	4618      	mov	r0, r3
 8000490:	f002 fcee 	bl	8002e70 <HAL_RCC_OscConfig>
 8000494:	4603      	mov	r3, r0
 8000496:	2b00      	cmp	r3, #0
 8000498:	d001      	beq.n	800049e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800049a:	f000 f90f 	bl	80006bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800049e:	230f      	movs	r3, #15
 80004a0:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80004a2:	2302      	movs	r3, #2
 80004a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004a6:	2300      	movs	r3, #0
 80004a8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80004aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ae:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004b4:	f107 0314 	add.w	r3, r7, #20
 80004b8:	2101      	movs	r1, #1
 80004ba:	4618      	mov	r0, r3
 80004bc:	f002 ff5a 	bl	8003374 <HAL_RCC_ClockConfig>
 80004c0:	4603      	mov	r3, r0
 80004c2:	2b00      	cmp	r3, #0
 80004c4:	d001      	beq.n	80004ca <SystemClock_Config+0x92>
  {
    Error_Handler();
 80004c6:	f000 f8f9 	bl	80006bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80004ca:	2310      	movs	r3, #16
 80004cc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80004ce:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80004d2:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004d4:	1d3b      	adds	r3, r7, #4
 80004d6:	4618      	mov	r0, r3
 80004d8:	f003 f91c 	bl	8003714 <HAL_RCCEx_PeriphCLKConfig>
 80004dc:	4603      	mov	r3, r0
 80004de:	2b00      	cmp	r3, #0
 80004e0:	d001      	beq.n	80004e6 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80004e2:	f000 f8eb 	bl	80006bc <Error_Handler>
  }
  HAL_RCC_MCOConfig(RCC_MCO, RCC_MCO1SOURCE_SYSCLK, RCC_MCODIV_1);
 80004e6:	2200      	movs	r2, #0
 80004e8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80004ec:	2000      	movs	r0, #0
 80004ee:	f003 f82b 	bl	8003548 <HAL_RCC_MCOConfig>
}
 80004f2:	bf00      	nop
 80004f4:	3750      	adds	r7, #80	; 0x50
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000500:	4b17      	ldr	r3, [pc, #92]	; (8000560 <MX_SPI1_Init+0x64>)
 8000502:	4a18      	ldr	r2, [pc, #96]	; (8000564 <MX_SPI1_Init+0x68>)
 8000504:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000506:	4b16      	ldr	r3, [pc, #88]	; (8000560 <MX_SPI1_Init+0x64>)
 8000508:	f44f 7282 	mov.w	r2, #260	; 0x104
 800050c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800050e:	4b14      	ldr	r3, [pc, #80]	; (8000560 <MX_SPI1_Init+0x64>)
 8000510:	2200      	movs	r2, #0
 8000512:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000514:	4b12      	ldr	r3, [pc, #72]	; (8000560 <MX_SPI1_Init+0x64>)
 8000516:	2200      	movs	r2, #0
 8000518:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800051a:	4b11      	ldr	r3, [pc, #68]	; (8000560 <MX_SPI1_Init+0x64>)
 800051c:	2200      	movs	r2, #0
 800051e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000520:	4b0f      	ldr	r3, [pc, #60]	; (8000560 <MX_SPI1_Init+0x64>)
 8000522:	2200      	movs	r2, #0
 8000524:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000526:	4b0e      	ldr	r3, [pc, #56]	; (8000560 <MX_SPI1_Init+0x64>)
 8000528:	f44f 7200 	mov.w	r2, #512	; 0x200
 800052c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <MX_SPI1_Init+0x64>)
 8000530:	2218      	movs	r2, #24
 8000532:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000534:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <MX_SPI1_Init+0x64>)
 8000536:	2200      	movs	r2, #0
 8000538:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800053a:	4b09      	ldr	r3, [pc, #36]	; (8000560 <MX_SPI1_Init+0x64>)
 800053c:	2200      	movs	r2, #0
 800053e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000540:	4b07      	ldr	r3, [pc, #28]	; (8000560 <MX_SPI1_Init+0x64>)
 8000542:	2200      	movs	r2, #0
 8000544:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000546:	4b06      	ldr	r3, [pc, #24]	; (8000560 <MX_SPI1_Init+0x64>)
 8000548:	220a      	movs	r2, #10
 800054a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800054c:	4804      	ldr	r0, [pc, #16]	; (8000560 <MX_SPI1_Init+0x64>)
 800054e:	f003 f997 	bl	8003880 <HAL_SPI_Init>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000558:	f000 f8b0 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800055c:	bf00      	nop
 800055e:	bd80      	pop	{r7, pc}
 8000560:	200001b8 	.word	0x200001b8
 8000564:	40013000 	.word	0x40013000

08000568 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800056c:	4b11      	ldr	r3, [pc, #68]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 800056e:	4a12      	ldr	r2, [pc, #72]	; (80005b8 <MX_USART2_UART_Init+0x50>)
 8000570:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000572:	4b10      	ldr	r3, [pc, #64]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 8000574:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000578:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800057a:	4b0e      	ldr	r3, [pc, #56]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 800057c:	2200      	movs	r2, #0
 800057e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000580:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 8000582:	2200      	movs	r2, #0
 8000584:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000586:	4b0b      	ldr	r3, [pc, #44]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800058c:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 800058e:	220c      	movs	r2, #12
 8000590:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000592:	4b08      	ldr	r3, [pc, #32]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 8000594:	2200      	movs	r2, #0
 8000596:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 800059a:	2200      	movs	r2, #0
 800059c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800059e:	4805      	ldr	r0, [pc, #20]	; (80005b4 <MX_USART2_UART_Init+0x4c>)
 80005a0:	f003 fbd4 	bl	8003d4c <HAL_UART_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80005aa:	f000 f887 	bl	80006bc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80005ae:	bf00      	nop
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	20000210 	.word	0x20000210
 80005b8:	40004400 	.word	0x40004400

080005bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b088      	sub	sp, #32
 80005c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0310 	add.w	r3, r7, #16
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80005d0:	4b37      	ldr	r3, [pc, #220]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	4a36      	ldr	r2, [pc, #216]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005d6:	f043 0320 	orr.w	r3, r3, #32
 80005da:	6193      	str	r3, [r2, #24]
 80005dc:	4b34      	ldr	r3, [pc, #208]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	f003 0320 	and.w	r3, r3, #32
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e8:	4b31      	ldr	r3, [pc, #196]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	4a30      	ldr	r2, [pc, #192]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005ee:	f043 0304 	orr.w	r3, r3, #4
 80005f2:	6193      	str	r3, [r2, #24]
 80005f4:	4b2e      	ldr	r3, [pc, #184]	; (80006b0 <MX_GPIO_Init+0xf4>)
 80005f6:	699b      	ldr	r3, [r3, #24]
 80005f8:	f003 0304 	and.w	r3, r3, #4
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000600:	4b2b      	ldr	r3, [pc, #172]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000602:	699b      	ldr	r3, [r3, #24]
 8000604:	4a2a      	ldr	r2, [pc, #168]	; (80006b0 <MX_GPIO_Init+0xf4>)
 8000606:	f043 0308 	orr.w	r3, r3, #8
 800060a:	6193      	str	r3, [r2, #24]
 800060c:	4b28      	ldr	r3, [pc, #160]	; (80006b0 <MX_GPIO_Init+0xf4>)
 800060e:	699b      	ldr	r3, [r3, #24]
 8000610:	f003 0308 	and.w	r3, r3, #8
 8000614:	607b      	str	r3, [r7, #4]
 8000616:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CRESET_pin_GPIO_Port, CRESET_pin_Pin, GPIO_PIN_SET);
 8000618:	2201      	movs	r2, #1
 800061a:	2102      	movs	r1, #2
 800061c:	4825      	ldr	r0, [pc, #148]	; (80006b4 <MX_GPIO_Init+0xf8>)
 800061e:	f000 ff1f 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2110      	movs	r1, #16
 8000626:	4823      	ldr	r0, [pc, #140]	; (80006b4 <MX_GPIO_Init+0xf8>)
 8000628:	f000 ff1a 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_EN_GPIO_Port, USB_EN_Pin, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000632:	4821      	ldr	r0, [pc, #132]	; (80006b8 <MX_GPIO_Init+0xfc>)
 8000634:	f000 ff14 	bl	8001460 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CRESET_pin_Pin */
  GPIO_InitStruct.Pin = CRESET_pin_Pin;
 8000638:	2302      	movs	r3, #2
 800063a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800063c:	2311      	movs	r3, #17
 800063e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2302      	movs	r3, #2
 8000646:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CRESET_pin_GPIO_Port, &GPIO_InitStruct);
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	4619      	mov	r1, r3
 800064e:	4819      	ldr	r0, [pc, #100]	; (80006b4 <MX_GPIO_Init+0xf8>)
 8000650:	f000 fd82 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000654:	2310      	movs	r3, #16
 8000656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2302      	movs	r3, #2
 8000662:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4619      	mov	r1, r3
 800066a:	4812      	ldr	r0, [pc, #72]	; (80006b4 <MX_GPIO_Init+0xf8>)
 800066c:	f000 fd74 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000670:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000674:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067a:	2302      	movs	r3, #2
 800067c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800067e:	f107 0310 	add.w	r3, r7, #16
 8000682:	4619      	mov	r1, r3
 8000684:	480b      	ldr	r0, [pc, #44]	; (80006b4 <MX_GPIO_Init+0xf8>)
 8000686:	f000 fd67 	bl	8001158 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_EN_Pin */
  GPIO_InitStruct.Pin = USB_EN_Pin;
 800068a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000690:	2301      	movs	r3, #1
 8000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000694:	2300      	movs	r3, #0
 8000696:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000698:	2302      	movs	r3, #2
 800069a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_EN_GPIO_Port, &GPIO_InitStruct);
 800069c:	f107 0310 	add.w	r3, r7, #16
 80006a0:	4619      	mov	r1, r3
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <MX_GPIO_Init+0xfc>)
 80006a4:	f000 fd58 	bl	8001158 <HAL_GPIO_Init>

}
 80006a8:	bf00      	nop
 80006aa:	3720      	adds	r7, #32
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	40021000 	.word	0x40021000
 80006b4:	40010800 	.word	0x40010800
 80006b8:	40010c00 	.word	0x40010c00

080006bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006c0:	b672      	cpsid	i
}
 80006c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006c4:	e7fe      	b.n	80006c4 <Error_Handler+0x8>
	...

080006c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b085      	sub	sp, #20
 80006cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80006ce:	4b15      	ldr	r3, [pc, #84]	; (8000724 <HAL_MspInit+0x5c>)
 80006d0:	699b      	ldr	r3, [r3, #24]
 80006d2:	4a14      	ldr	r2, [pc, #80]	; (8000724 <HAL_MspInit+0x5c>)
 80006d4:	f043 0301 	orr.w	r3, r3, #1
 80006d8:	6193      	str	r3, [r2, #24]
 80006da:	4b12      	ldr	r3, [pc, #72]	; (8000724 <HAL_MspInit+0x5c>)
 80006dc:	699b      	ldr	r3, [r3, #24]
 80006de:	f003 0301 	and.w	r3, r3, #1
 80006e2:	60bb      	str	r3, [r7, #8]
 80006e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006e6:	4b0f      	ldr	r3, [pc, #60]	; (8000724 <HAL_MspInit+0x5c>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a0e      	ldr	r2, [pc, #56]	; (8000724 <HAL_MspInit+0x5c>)
 80006ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b0c      	ldr	r3, [pc, #48]	; (8000724 <HAL_MspInit+0x5c>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006fa:	607b      	str	r3, [r7, #4]
 80006fc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006fe:	4b0a      	ldr	r3, [pc, #40]	; (8000728 <HAL_MspInit+0x60>)
 8000700:	685b      	ldr	r3, [r3, #4]
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800070a:	60fb      	str	r3, [r7, #12]
 800070c:	68fb      	ldr	r3, [r7, #12]
 800070e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	4a04      	ldr	r2, [pc, #16]	; (8000728 <HAL_MspInit+0x60>)
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800071a:	bf00      	nop
 800071c:	3714      	adds	r7, #20
 800071e:	46bd      	mov	sp, r7
 8000720:	bc80      	pop	{r7}
 8000722:	4770      	bx	lr
 8000724:	40021000 	.word	0x40021000
 8000728:	40010000 	.word	0x40010000

0800072c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b088      	sub	sp, #32
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0310 	add.w	r3, r7, #16
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4a1b      	ldr	r2, [pc, #108]	; (80007b4 <HAL_SPI_MspInit+0x88>)
 8000748:	4293      	cmp	r3, r2
 800074a:	d12f      	bne.n	80007ac <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800074c:	4b1a      	ldr	r3, [pc, #104]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a19      	ldr	r2, [pc, #100]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000752:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b17      	ldr	r3, [pc, #92]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a13      	ldr	r2, [pc, #76]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <HAL_SPI_MspInit+0x8c>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 800077c:	23a0      	movs	r3, #160	; 0xa0
 800077e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000780:	2302      	movs	r3, #2
 8000782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000784:	2303      	movs	r3, #3
 8000786:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0310 	add.w	r3, r7, #16
 800078c:	4619      	mov	r1, r3
 800078e:	480b      	ldr	r0, [pc, #44]	; (80007bc <HAL_SPI_MspInit+0x90>)
 8000790:	f000 fce2 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000794:	2340      	movs	r3, #64	; 0x40
 8000796:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a0:	f107 0310 	add.w	r3, r7, #16
 80007a4:	4619      	mov	r1, r3
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <HAL_SPI_MspInit+0x90>)
 80007a8:	f000 fcd6 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40013000 	.word	0x40013000
 80007b8:	40021000 	.word	0x40021000
 80007bc:	40010800 	.word	0x40010800

080007c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b088      	sub	sp, #32
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	f107 0310 	add.w	r3, r7, #16
 80007cc:	2200      	movs	r2, #0
 80007ce:	601a      	str	r2, [r3, #0]
 80007d0:	605a      	str	r2, [r3, #4]
 80007d2:	609a      	str	r2, [r3, #8]
 80007d4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	4a1b      	ldr	r2, [pc, #108]	; (8000848 <HAL_UART_MspInit+0x88>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d12f      	bne.n	8000840 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007e0:	4b1a      	ldr	r3, [pc, #104]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007e2:	69db      	ldr	r3, [r3, #28]
 80007e4:	4a19      	ldr	r2, [pc, #100]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007e6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ea:	61d3      	str	r3, [r2, #28]
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007ee:	69db      	ldr	r3, [r3, #28]
 80007f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007f8:	4b14      	ldr	r3, [pc, #80]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007fa:	699b      	ldr	r3, [r3, #24]
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <HAL_UART_MspInit+0x8c>)
 80007fe:	f043 0304 	orr.w	r3, r3, #4
 8000802:	6193      	str	r3, [r2, #24]
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <HAL_UART_MspInit+0x8c>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	f003 0304 	and.w	r3, r3, #4
 800080c:	60bb      	str	r3, [r7, #8]
 800080e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000810:	2304      	movs	r3, #4
 8000812:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000818:	2303      	movs	r3, #3
 800081a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800081c:	f107 0310 	add.w	r3, r7, #16
 8000820:	4619      	mov	r1, r3
 8000822:	480b      	ldr	r0, [pc, #44]	; (8000850 <HAL_UART_MspInit+0x90>)
 8000824:	f000 fc98 	bl	8001158 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000828:	2308      	movs	r3, #8
 800082a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800082c:	2300      	movs	r3, #0
 800082e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000830:	2300      	movs	r3, #0
 8000832:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000834:	f107 0310 	add.w	r3, r7, #16
 8000838:	4619      	mov	r1, r3
 800083a:	4805      	ldr	r0, [pc, #20]	; (8000850 <HAL_UART_MspInit+0x90>)
 800083c:	f000 fc8c 	bl	8001158 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000840:	bf00      	nop
 8000842:	3720      	adds	r7, #32
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40004400 	.word	0x40004400
 800084c:	40021000 	.word	0x40021000
 8000850:	40010800 	.word	0x40010800

08000854 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000858:	e7fe      	b.n	8000858 <NMI_Handler+0x4>

0800085a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085a:	b480      	push	{r7}
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800085e:	e7fe      	b.n	800085e <HardFault_Handler+0x4>

08000860 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <MemManage_Handler+0x4>

08000866 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <BusFault_Handler+0x4>

0800086c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <UsageFault_Handler+0x4>

08000872 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000876:	bf00      	nop
 8000878:	46bd      	mov	sp, r7
 800087a:	bc80      	pop	{r7}
 800087c:	4770      	bx	lr

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	bc80      	pop	{r7}
 8000888:	4770      	bx	lr

0800088a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800088a:	b480      	push	{r7}
 800088c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	46bd      	mov	sp, r7
 8000892:	bc80      	pop	{r7}
 8000894:	4770      	bx	lr

08000896 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800089a:	f000 f91f 	bl	8000adc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
	...

080008a4 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80008a8:	4802      	ldr	r0, [pc, #8]	; (80008b4 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 80008aa:	f000 ff22 	bl	80016f2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000b5c 	.word	0x20000b5c

080008b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b086      	sub	sp, #24
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e00a      	b.n	80008e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80008ca:	f3af 8000 	nop.w
 80008ce:	4601      	mov	r1, r0
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	b2ca      	uxtb	r2, r1
 80008d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008da:	697b      	ldr	r3, [r7, #20]
 80008dc:	3301      	adds	r3, #1
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697a      	ldr	r2, [r7, #20]
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	dbf0      	blt.n	80008ca <_read+0x12>
	}

return len;
 80008e8:	687b      	ldr	r3, [r7, #4]
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}

080008f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008f2:	b580      	push	{r7, lr}
 80008f4:	b086      	sub	sp, #24
 80008f6:	af00      	add	r7, sp, #0
 80008f8:	60f8      	str	r0, [r7, #12]
 80008fa:	60b9      	str	r1, [r7, #8]
 80008fc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
 8000902:	e009      	b.n	8000918 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000904:	68bb      	ldr	r3, [r7, #8]
 8000906:	1c5a      	adds	r2, r3, #1
 8000908:	60ba      	str	r2, [r7, #8]
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	4618      	mov	r0, r3
 800090e:	f7ff fc1d 	bl	800014c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000912:	697b      	ldr	r3, [r7, #20]
 8000914:	3301      	adds	r3, #1
 8000916:	617b      	str	r3, [r7, #20]
 8000918:	697a      	ldr	r2, [r7, #20]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	429a      	cmp	r2, r3
 800091e:	dbf1      	blt.n	8000904 <_write+0x12>
	}
	return len;
 8000920:	687b      	ldr	r3, [r7, #4]
}
 8000922:	4618      	mov	r0, r3
 8000924:	3718      	adds	r7, #24
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}

0800092a <_close>:

int _close(int file)
{
 800092a:	b480      	push	{r7}
 800092c:	b083      	sub	sp, #12
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	return -1;
 8000932:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000936:	4618      	mov	r0, r3
 8000938:	370c      	adds	r7, #12
 800093a:	46bd      	mov	sp, r7
 800093c:	bc80      	pop	{r7}
 800093e:	4770      	bx	lr

08000940 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000950:	605a      	str	r2, [r3, #4]
	return 0;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr

0800095e <_isatty>:

int _isatty(int file)
{
 800095e:	b480      	push	{r7}
 8000960:	b083      	sub	sp, #12
 8000962:	af00      	add	r7, sp, #0
 8000964:	6078      	str	r0, [r7, #4]
	return 1;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	370c      	adds	r7, #12
 800096c:	46bd      	mov	sp, r7
 800096e:	bc80      	pop	{r7}
 8000970:	4770      	bx	lr

08000972 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000972:	b480      	push	{r7}
 8000974:	b085      	sub	sp, #20
 8000976:	af00      	add	r7, sp, #0
 8000978:	60f8      	str	r0, [r7, #12]
 800097a:	60b9      	str	r1, [r7, #8]
 800097c:	607a      	str	r2, [r7, #4]
	return 0;
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	3714      	adds	r7, #20
 8000984:	46bd      	mov	sp, r7
 8000986:	bc80      	pop	{r7}
 8000988:	4770      	bx	lr
	...

0800098c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b086      	sub	sp, #24
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000994:	4a14      	ldr	r2, [pc, #80]	; (80009e8 <_sbrk+0x5c>)
 8000996:	4b15      	ldr	r3, [pc, #84]	; (80009ec <_sbrk+0x60>)
 8000998:	1ad3      	subs	r3, r2, r3
 800099a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009a0:	4b13      	ldr	r3, [pc, #76]	; (80009f0 <_sbrk+0x64>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d102      	bne.n	80009ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009a8:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <_sbrk+0x64>)
 80009aa:	4a12      	ldr	r2, [pc, #72]	; (80009f4 <_sbrk+0x68>)
 80009ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80009ae:	4b10      	ldr	r3, [pc, #64]	; (80009f0 <_sbrk+0x64>)
 80009b0:	681a      	ldr	r2, [r3, #0]
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4413      	add	r3, r2
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d207      	bcs.n	80009cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80009bc:	f009 f8d8 	bl	8009b70 <__errno>
 80009c0:	4603      	mov	r3, r0
 80009c2:	220c      	movs	r2, #12
 80009c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009c6:	f04f 33ff 	mov.w	r3, #4294967295
 80009ca:	e009      	b.n	80009e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009cc:	4b08      	ldr	r3, [pc, #32]	; (80009f0 <_sbrk+0x64>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009d2:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <_sbrk+0x64>)
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4413      	add	r3, r2
 80009da:	4a05      	ldr	r2, [pc, #20]	; (80009f0 <_sbrk+0x64>)
 80009dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009de:	68fb      	ldr	r3, [r7, #12]
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3718      	adds	r7, #24
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20005000 	.word	0x20005000
 80009ec:	00000400 	.word	0x00000400
 80009f0:	20000254 	.word	0x20000254
 80009f4:	200012c8 	.word	0x200012c8

080009f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009fc:	bf00      	nop
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bc80      	pop	{r7}
 8000a02:	4770      	bx	lr

08000a04 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000a2a:	f7ff ffe5 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a2e:	f009 f8a5 	bl	8009b7c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a32:	f7ff fbd9 	bl	80001e8 <main>
  bx lr
 8000a36:	4770      	bx	lr
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000a40:	0800ad98 	.word	0x0800ad98
  ldr r2, =_sbss
 8000a44:	20000188 	.word	0x20000188
  ldr r4, =_ebss
 8000a48:	200012c8 	.word	0x200012c8

08000a4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC1_2_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a54:	4b08      	ldr	r3, [pc, #32]	; (8000a78 <HAL_Init+0x28>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a07      	ldr	r2, [pc, #28]	; (8000a78 <HAL_Init+0x28>)
 8000a5a:	f043 0310 	orr.w	r3, r3, #16
 8000a5e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a60:	2003      	movs	r0, #3
 8000a62:	f000 f947 	bl	8000cf4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a66:	200f      	movs	r0, #15
 8000a68:	f000 f808 	bl	8000a7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a6c:	f7ff fe2c 	bl	80006c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a70:	2300      	movs	r3, #0
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	bd80      	pop	{r7, pc}
 8000a76:	bf00      	nop
 8000a78:	40022000 	.word	0x40022000

08000a7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a84:	4b12      	ldr	r3, [pc, #72]	; (8000ad0 <HAL_InitTick+0x54>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b12      	ldr	r3, [pc, #72]	; (8000ad4 <HAL_InitTick+0x58>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	4619      	mov	r1, r3
 8000a8e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a92:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a96:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a9a:	4618      	mov	r0, r3
 8000a9c:	f000 f95f 	bl	8000d5e <HAL_SYSTICK_Config>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d001      	beq.n	8000aaa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e00e      	b.n	8000ac8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	2b0f      	cmp	r3, #15
 8000aae:	d80a      	bhi.n	8000ac6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	6879      	ldr	r1, [r7, #4]
 8000ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab8:	f000 f927 	bl	8000d0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000abc:	4a06      	ldr	r2, [pc, #24]	; (8000ad8 <HAL_InitTick+0x5c>)
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	e000      	b.n	8000ac8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
}
 8000ac8:	4618      	mov	r0, r3
 8000aca:	3708      	adds	r7, #8
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	20000000 	.word	0x20000000
 8000ad4:	20000008 	.word	0x20000008
 8000ad8:	20000004 	.word	0x20000004

08000adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ae0:	4b05      	ldr	r3, [pc, #20]	; (8000af8 <HAL_IncTick+0x1c>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	461a      	mov	r2, r3
 8000ae6:	4b05      	ldr	r3, [pc, #20]	; (8000afc <HAL_IncTick+0x20>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	4413      	add	r3, r2
 8000aec:	4a03      	ldr	r2, [pc, #12]	; (8000afc <HAL_IncTick+0x20>)
 8000aee:	6013      	str	r3, [r2, #0]
}
 8000af0:	bf00      	nop
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bc80      	pop	{r7}
 8000af6:	4770      	bx	lr
 8000af8:	20000008 	.word	0x20000008
 8000afc:	20000258 	.word	0x20000258

08000b00 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  return uwTick;
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <HAL_GetTick+0x10>)
 8000b06:	681b      	ldr	r3, [r3, #0]
}
 8000b08:	4618      	mov	r0, r3
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	20000258 	.word	0x20000258

08000b14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b084      	sub	sp, #16
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b1c:	f7ff fff0 	bl	8000b00 <HAL_GetTick>
 8000b20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b26:	68fb      	ldr	r3, [r7, #12]
 8000b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b2c:	d005      	beq.n	8000b3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <HAL_Delay+0x44>)
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	461a      	mov	r2, r3
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	4413      	add	r3, r2
 8000b38:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b3a:	bf00      	nop
 8000b3c:	f7ff ffe0 	bl	8000b00 <HAL_GetTick>
 8000b40:	4602      	mov	r2, r0
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	1ad3      	subs	r3, r2, r3
 8000b46:	68fa      	ldr	r2, [r7, #12]
 8000b48:	429a      	cmp	r2, r3
 8000b4a:	d8f7      	bhi.n	8000b3c <HAL_Delay+0x28>
  {
  }
}
 8000b4c:	bf00      	nop
 8000b4e:	bf00      	nop
 8000b50:	3710      	adds	r7, #16
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008

08000b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b085      	sub	sp, #20
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f003 0307 	and.w	r3, r3, #7
 8000b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b6e:	68db      	ldr	r3, [r3, #12]
 8000b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b72:	68ba      	ldr	r2, [r7, #8]
 8000b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b78:	4013      	ands	r3, r2
 8000b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b80:	68bb      	ldr	r3, [r7, #8]
 8000b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	60d3      	str	r3, [r2, #12]
}
 8000b94:	bf00      	nop
 8000b96:	3714      	adds	r7, #20
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bc80      	pop	{r7}
 8000b9c:	4770      	bx	lr
 8000b9e:	bf00      	nop
 8000ba0:	e000ed00 	.word	0xe000ed00

08000ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ba4:	b480      	push	{r7}
 8000ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ba8:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <__NVIC_GetPriorityGrouping+0x18>)
 8000baa:	68db      	ldr	r3, [r3, #12]
 8000bac:	0a1b      	lsrs	r3, r3, #8
 8000bae:	f003 0307 	and.w	r3, r3, #7
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bc80      	pop	{r7}
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	e000ed00 	.word	0xe000ed00

08000bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b083      	sub	sp, #12
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	db0b      	blt.n	8000bea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bd2:	79fb      	ldrb	r3, [r7, #7]
 8000bd4:	f003 021f 	and.w	r2, r3, #31
 8000bd8:	4906      	ldr	r1, [pc, #24]	; (8000bf4 <__NVIC_EnableIRQ+0x34>)
 8000bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bde:	095b      	lsrs	r3, r3, #5
 8000be0:	2001      	movs	r0, #1
 8000be2:	fa00 f202 	lsl.w	r2, r0, r2
 8000be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000bea:	bf00      	nop
 8000bec:	370c      	adds	r7, #12
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	e000e100 	.word	0xe000e100

08000bf8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	6039      	str	r1, [r7, #0]
 8000c02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	db0a      	blt.n	8000c22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c0c:	683b      	ldr	r3, [r7, #0]
 8000c0e:	b2da      	uxtb	r2, r3
 8000c10:	490c      	ldr	r1, [pc, #48]	; (8000c44 <__NVIC_SetPriority+0x4c>)
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	0112      	lsls	r2, r2, #4
 8000c18:	b2d2      	uxtb	r2, r2
 8000c1a:	440b      	add	r3, r1
 8000c1c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c20:	e00a      	b.n	8000c38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	4908      	ldr	r1, [pc, #32]	; (8000c48 <__NVIC_SetPriority+0x50>)
 8000c28:	79fb      	ldrb	r3, [r7, #7]
 8000c2a:	f003 030f 	and.w	r3, r3, #15
 8000c2e:	3b04      	subs	r3, #4
 8000c30:	0112      	lsls	r2, r2, #4
 8000c32:	b2d2      	uxtb	r2, r2
 8000c34:	440b      	add	r3, r1
 8000c36:	761a      	strb	r2, [r3, #24]
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bc80      	pop	{r7}
 8000c40:	4770      	bx	lr
 8000c42:	bf00      	nop
 8000c44:	e000e100 	.word	0xe000e100
 8000c48:	e000ed00 	.word	0xe000ed00

08000c4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	b089      	sub	sp, #36	; 0x24
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	60f8      	str	r0, [r7, #12]
 8000c54:	60b9      	str	r1, [r7, #8]
 8000c56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	f003 0307 	and.w	r3, r3, #7
 8000c5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c60:	69fb      	ldr	r3, [r7, #28]
 8000c62:	f1c3 0307 	rsb	r3, r3, #7
 8000c66:	2b04      	cmp	r3, #4
 8000c68:	bf28      	it	cs
 8000c6a:	2304      	movcs	r3, #4
 8000c6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6e:	69fb      	ldr	r3, [r7, #28]
 8000c70:	3304      	adds	r3, #4
 8000c72:	2b06      	cmp	r3, #6
 8000c74:	d902      	bls.n	8000c7c <NVIC_EncodePriority+0x30>
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3b03      	subs	r3, #3
 8000c7a:	e000      	b.n	8000c7e <NVIC_EncodePriority+0x32>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c80:	f04f 32ff 	mov.w	r2, #4294967295
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43da      	mvns	r2, r3
 8000c8c:	68bb      	ldr	r3, [r7, #8]
 8000c8e:	401a      	ands	r2, r3
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c94:	f04f 31ff 	mov.w	r1, #4294967295
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c9e:	43d9      	mvns	r1, r3
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ca4:	4313      	orrs	r3, r2
         );
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	3724      	adds	r7, #36	; 0x24
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr

08000cb0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	3b01      	subs	r3, #1
 8000cbc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cc0:	d301      	bcc.n	8000cc6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e00f      	b.n	8000ce6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cc6:	4a0a      	ldr	r2, [pc, #40]	; (8000cf0 <SysTick_Config+0x40>)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	3b01      	subs	r3, #1
 8000ccc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cce:	210f      	movs	r1, #15
 8000cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cd4:	f7ff ff90 	bl	8000bf8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cd8:	4b05      	ldr	r3, [pc, #20]	; (8000cf0 <SysTick_Config+0x40>)
 8000cda:	2200      	movs	r2, #0
 8000cdc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cde:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <SysTick_Config+0x40>)
 8000ce0:	2207      	movs	r2, #7
 8000ce2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ce4:	2300      	movs	r3, #0
}
 8000ce6:	4618      	mov	r0, r3
 8000ce8:	3708      	adds	r7, #8
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	e000e010 	.word	0xe000e010

08000cf4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff ff2d 	bl	8000b5c <__NVIC_SetPriorityGrouping>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b086      	sub	sp, #24
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	4603      	mov	r3, r0
 8000d12:	60b9      	str	r1, [r7, #8]
 8000d14:	607a      	str	r2, [r7, #4]
 8000d16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d1c:	f7ff ff42 	bl	8000ba4 <__NVIC_GetPriorityGrouping>
 8000d20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d22:	687a      	ldr	r2, [r7, #4]
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	6978      	ldr	r0, [r7, #20]
 8000d28:	f7ff ff90 	bl	8000c4c <NVIC_EncodePriority>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff5f 	bl	8000bf8 <__NVIC_SetPriority>
}
 8000d3a:	bf00      	nop
 8000d3c:	3718      	adds	r7, #24
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	4603      	mov	r3, r0
 8000d4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d50:	4618      	mov	r0, r3
 8000d52:	f7ff ff35 	bl	8000bc0 <__NVIC_EnableIRQ>
}
 8000d56:	bf00      	nop
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}

08000d5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d5e:	b580      	push	{r7, lr}
 8000d60:	b082      	sub	sp, #8
 8000d62:	af00      	add	r7, sp, #0
 8000d64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d66:	6878      	ldr	r0, [r7, #4]
 8000d68:	f7ff ffa2 	bl	8000cb0 <SysTick_Config>
 8000d6c:	4603      	mov	r3, r0
}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	3708      	adds	r7, #8
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
	...

08000d78 <HAL_FLASH_Program>:
  * @param  Data:         Specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8000d78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d7a:	b087      	sub	sp, #28
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	60f8      	str	r0, [r7, #12]
 8000d80:	60b9      	str	r1, [r7, #8]
 8000d82:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	75fb      	strb	r3, [r7, #23]
  uint8_t index = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	75bb      	strb	r3, [r7, #22]
  uint8_t nbiterations = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	757b      	strb	r3, [r7, #21]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8000d92:	4b2f      	ldr	r3, [pc, #188]	; (8000e50 <HAL_FLASH_Program+0xd8>)
 8000d94:	7e1b      	ldrb	r3, [r3, #24]
 8000d96:	2b01      	cmp	r3, #1
 8000d98:	d101      	bne.n	8000d9e <HAL_FLASH_Program+0x26>
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	e054      	b.n	8000e48 <HAL_FLASH_Program+0xd0>
 8000d9e:	4b2c      	ldr	r3, [pc, #176]	; (8000e50 <HAL_FLASH_Program+0xd8>)
 8000da0:	2201      	movs	r2, #1
 8000da2:	761a      	strb	r2, [r3, #24]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000da4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000da8:	f000 f898 	bl	8000edc <FLASH_WaitForLastOperation>
 8000dac:	4603      	mov	r3, r0
 8000dae:	75fb      	strb	r3, [r7, #23]
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperationBank2(FLASH_TIMEOUT_VALUE);
  }
#endif /* FLASH_BANK2_END */
  
  if(status == HAL_OK)
 8000db0:	7dfb      	ldrb	r3, [r7, #23]
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d144      	bne.n	8000e40 <HAL_FLASH_Program+0xc8>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	2b01      	cmp	r3, #1
 8000dba:	d102      	bne.n	8000dc2 <HAL_FLASH_Program+0x4a>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	757b      	strb	r3, [r7, #21]
 8000dc0:	e007      	b.n	8000dd2 <HAL_FLASH_Program+0x5a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d102      	bne.n	8000dce <HAL_FLASH_Program+0x56>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	757b      	strb	r3, [r7, #21]
 8000dcc:	e001      	b.n	8000dd2 <HAL_FLASH_Program+0x5a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 8000dce:	2304      	movs	r3, #4
 8000dd0:	757b      	strb	r3, [r7, #21]
    }

    for (index = 0U; index < nbiterations; index++)
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	75bb      	strb	r3, [r7, #22]
 8000dd6:	e02d      	b.n	8000e34 <HAL_FLASH_Program+0xbc>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 8000dd8:	7dbb      	ldrb	r3, [r7, #22]
 8000dda:	005a      	lsls	r2, r3, #1
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	eb02 0c03 	add.w	ip, r2, r3
 8000de2:	7dbb      	ldrb	r3, [r7, #22]
 8000de4:	0119      	lsls	r1, r3, #4
 8000de6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000dea:	f1c1 0620 	rsb	r6, r1, #32
 8000dee:	f1a1 0020 	sub.w	r0, r1, #32
 8000df2:	fa22 f401 	lsr.w	r4, r2, r1
 8000df6:	fa03 f606 	lsl.w	r6, r3, r6
 8000dfa:	4334      	orrs	r4, r6
 8000dfc:	fa23 f000 	lsr.w	r0, r3, r0
 8000e00:	4304      	orrs	r4, r0
 8000e02:	fa23 f501 	lsr.w	r5, r3, r1
 8000e06:	b2a3      	uxth	r3, r4
 8000e08:	4619      	mov	r1, r3
 8000e0a:	4660      	mov	r0, ip
 8000e0c:	f000 f84a 	bl	8000ea4 <FLASH_Program_HalfWord>
#if defined(FLASH_BANK2_END)
      if(Address <= FLASH_BANK1_END)
      {
#endif /* FLASH_BANK2_END */
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8000e10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8000e14:	f000 f862 	bl	8000edc <FLASH_WaitForLastOperation>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	75fb      	strb	r3, [r7, #23]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8000e1c:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_FLASH_Program+0xdc>)
 8000e1e:	691b      	ldr	r3, [r3, #16]
 8000e20:	4a0c      	ldr	r2, [pc, #48]	; (8000e54 <HAL_FLASH_Program+0xdc>)
 8000e22:	f023 0301 	bic.w	r3, r3, #1
 8000e26:	6113      	str	r3, [r2, #16]
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR2, FLASH_CR2_PG);
      }
#endif /* FLASH_BANK2_END */
      /* In case of error, stop programation procedure */
      if (status != HAL_OK)
 8000e28:	7dfb      	ldrb	r3, [r7, #23]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d107      	bne.n	8000e3e <HAL_FLASH_Program+0xc6>
    for (index = 0U; index < nbiterations; index++)
 8000e2e:	7dbb      	ldrb	r3, [r7, #22]
 8000e30:	3301      	adds	r3, #1
 8000e32:	75bb      	strb	r3, [r7, #22]
 8000e34:	7dba      	ldrb	r2, [r7, #22]
 8000e36:	7d7b      	ldrb	r3, [r7, #21]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d3cd      	bcc.n	8000dd8 <HAL_FLASH_Program+0x60>
 8000e3c:	e000      	b.n	8000e40 <HAL_FLASH_Program+0xc8>
      {
        break;
 8000e3e:	bf00      	nop
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8000e40:	4b03      	ldr	r3, [pc, #12]	; (8000e50 <HAL_FLASH_Program+0xd8>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	761a      	strb	r2, [r3, #24]

  return status;
 8000e46:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e48:	4618      	mov	r0, r3
 8000e4a:	371c      	adds	r7, #28
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e50:	20000260 	.word	0x20000260
 8000e54:	40022000 	.word	0x40022000

08000e58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <HAL_FLASH_Unlock+0x40>)
 8000e64:	691b      	ldr	r3, [r3, #16]
 8000e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d00d      	beq.n	8000e8a <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8000e6e:	4b0a      	ldr	r3, [pc, #40]	; (8000e98 <HAL_FLASH_Unlock+0x40>)
 8000e70:	4a0a      	ldr	r2, [pc, #40]	; (8000e9c <HAL_FLASH_Unlock+0x44>)
 8000e72:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8000e74:	4b08      	ldr	r3, [pc, #32]	; (8000e98 <HAL_FLASH_Unlock+0x40>)
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_FLASH_Unlock+0x48>)
 8000e78:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8000e7a:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <HAL_FLASH_Unlock+0x40>)
 8000e7c:	691b      	ldr	r3, [r3, #16]
 8000e7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8000e86:	2301      	movs	r3, #1
 8000e88:	71fb      	strb	r3, [r7, #7]
      status = HAL_ERROR;
    }
  }
#endif /* FLASH_BANK2_END */

  return status;
 8000e8a:	79fb      	ldrb	r3, [r7, #7]
}
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	370c      	adds	r7, #12
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bc80      	pop	{r7}
 8000e94:	4770      	bx	lr
 8000e96:	bf00      	nop
 8000e98:	40022000 	.word	0x40022000
 8000e9c:	45670123 	.word	0x45670123
 8000ea0:	cdef89ab 	.word	0xcdef89ab

08000ea4 <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	460b      	mov	r3, r1
 8000eae:	807b      	strh	r3, [r7, #2]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8000eb0:	4b08      	ldr	r3, [pc, #32]	; (8000ed4 <FLASH_Program_HalfWord+0x30>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	61da      	str	r2, [r3, #28]
#if defined(FLASH_BANK2_END)
  if(Address <= FLASH_BANK1_END)
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8000eb6:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <FLASH_Program_HalfWord+0x34>)
 8000eb8:	691b      	ldr	r3, [r3, #16]
 8000eba:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <FLASH_Program_HalfWord+0x34>)
 8000ebc:	f043 0301 	orr.w	r3, r3, #1
 8000ec0:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR2, FLASH_CR2_PG);
  }
#endif /* FLASH_BANK2_END */

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	887a      	ldrh	r2, [r7, #2]
 8000ec6:	801a      	strh	r2, [r3, #0]
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bc80      	pop	{r7}
 8000ed0:	4770      	bx	lr
 8000ed2:	bf00      	nop
 8000ed4:	20000260 	.word	0x20000260
 8000ed8:	40022000 	.word	0x40022000

08000edc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff fe0c 	bl	8000b00 <HAL_GetTick>
 8000ee8:	60f8      	str	r0, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000eea:	e010      	b.n	8000f0e <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ef2:	d00c      	beq.n	8000f0e <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <FLASH_WaitForLastOperation+0x2e>
 8000efa:	f7ff fe01 	bl	8000b00 <HAL_GetTick>
 8000efe:	4602      	mov	r2, r0
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	1ad3      	subs	r3, r2, r3
 8000f04:	687a      	ldr	r2, [r7, #4]
 8000f06:	429a      	cmp	r2, r3
 8000f08:	d201      	bcs.n	8000f0e <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8000f0a:	2303      	movs	r3, #3
 8000f0c:	e025      	b.n	8000f5a <FLASH_WaitForLastOperation+0x7e>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8000f0e:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <FLASH_WaitForLastOperation+0x88>)
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	f003 0301 	and.w	r3, r3, #1
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1e8      	bne.n	8000eec <FLASH_WaitForLastOperation+0x10>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8000f1a:	4b12      	ldr	r3, [pc, #72]	; (8000f64 <FLASH_WaitForLastOperation+0x88>)
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	f003 0320 	and.w	r3, r3, #32
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d002      	beq.n	8000f2c <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8000f26:	4b0f      	ldr	r3, [pc, #60]	; (8000f64 <FLASH_WaitForLastOperation+0x88>)
 8000f28:	2220      	movs	r2, #32
 8000f2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f2c:	4b0d      	ldr	r3, [pc, #52]	; (8000f64 <FLASH_WaitForLastOperation+0x88>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	f003 0310 	and.w	r3, r3, #16
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d10b      	bne.n	8000f50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f38:	4b0a      	ldr	r3, [pc, #40]	; (8000f64 <FLASH_WaitForLastOperation+0x88>)
 8000f3a:	69db      	ldr	r3, [r3, #28]
 8000f3c:	f003 0301 	and.w	r3, r3, #1
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d105      	bne.n	8000f50 <FLASH_WaitForLastOperation+0x74>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f44:	4b07      	ldr	r3, [pc, #28]	; (8000f64 <FLASH_WaitForLastOperation+0x88>)
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	f003 0304 	and.w	r3, r3, #4
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d003      	beq.n	8000f58 <FLASH_WaitForLastOperation+0x7c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8000f50:	f000 f80a 	bl	8000f68 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8000f54:	2301      	movs	r3, #1
 8000f56:	e000      	b.n	8000f5a <FLASH_WaitForLastOperation+0x7e>
  }

  /* There is no error flag set */
  return HAL_OK;
 8000f58:	2300      	movs	r3, #0
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	40022000 	.word	0x40022000

08000f68 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
  
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	f003 0310 	and.w	r3, r3, #16
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d009      	beq.n	8000f92 <FLASH_SetErrorCode+0x2a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <FLASH_SetErrorCode+0x9c>)
 8000f80:	69db      	ldr	r3, [r3, #28]
 8000f82:	f043 0302 	orr.w	r3, r3, #2
 8000f86:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <FLASH_SetErrorCode+0x9c>)
 8000f88:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_WRPERR | FLASH_FLAG_WRPERR_BANK2;
#else
    flags |= FLASH_FLAG_WRPERR;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f043 0310 	orr.w	r3, r3, #16
 8000f90:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
#if defined(FLASH_BANK2_END)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR) || __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR_BANK2))
#else
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	f003 0304 	and.w	r3, r3, #4
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d009      	beq.n	8000fb2 <FLASH_SetErrorCode+0x4a>
#endif /* FLASH_BANK2_END */
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <FLASH_SetErrorCode+0x9c>)
 8000fa0:	69db      	ldr	r3, [r3, #28]
 8000fa2:	f043 0301 	orr.w	r3, r3, #1
 8000fa6:	4a17      	ldr	r2, [pc, #92]	; (8001004 <FLASH_SetErrorCode+0x9c>)
 8000fa8:	61d3      	str	r3, [r2, #28]
#if defined(FLASH_BANK2_END)
    flags |= FLASH_FLAG_PGERR | FLASH_FLAG_PGERR_BANK2;
#else
    flags |= FLASH_FLAG_PGERR;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	f043 0304 	orr.w	r3, r3, #4
 8000fb0:	607b      	str	r3, [r7, #4]
#endif /* FLASH_BANK2_END */
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8000fb2:	4b13      	ldr	r3, [pc, #76]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d00b      	beq.n	8000fd6 <FLASH_SetErrorCode+0x6e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <FLASH_SetErrorCode+0x9c>)
 8000fc0:	69db      	ldr	r3, [r3, #28]
 8000fc2:	f043 0304 	orr.w	r3, r3, #4
 8000fc6:	4a0f      	ldr	r2, [pc, #60]	; (8001004 <FLASH_SetErrorCode+0x9c>)
 8000fc8:	61d3      	str	r3, [r2, #28]
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPTVERR);
 8000fca:	4b0d      	ldr	r3, [pc, #52]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000fcc:	69db      	ldr	r3, [r3, #28]
 8000fce:	4a0c      	ldr	r2, [pc, #48]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000fd0:	f023 0301 	bic.w	r3, r3, #1
 8000fd4:	61d3      	str	r3, [r2, #28]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	f240 1201 	movw	r2, #257	; 0x101
 8000fdc:	4293      	cmp	r3, r2
 8000fde:	d106      	bne.n	8000fee <FLASH_SetErrorCode+0x86>
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000fe2:	69db      	ldr	r3, [r3, #28]
 8000fe4:	4a06      	ldr	r2, [pc, #24]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000fe6:	f023 0301 	bic.w	r3, r3, #1
 8000fea:	61d3      	str	r3, [r2, #28]
}  
 8000fec:	e002      	b.n	8000ff4 <FLASH_SetErrorCode+0x8c>
  __HAL_FLASH_CLEAR_FLAG(flags);
 8000fee:	4a04      	ldr	r2, [pc, #16]	; (8001000 <FLASH_SetErrorCode+0x98>)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	60d3      	str	r3, [r2, #12]
}  
 8000ff4:	bf00      	nop
 8000ff6:	370c      	adds	r7, #12
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bc80      	pop	{r7}
 8000ffc:	4770      	bx	lr
 8000ffe:	bf00      	nop
 8001000:	40022000 	.word	0x40022000
 8001004:	20000260 	.word	0x20000260

08001008 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
 8001010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001012:	2301      	movs	r3, #1
 8001014:	73fb      	strb	r3, [r7, #15]
  uint32_t address = 0U;
 8001016:	2300      	movs	r3, #0
 8001018:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800101a:	4b2f      	ldr	r3, [pc, #188]	; (80010d8 <HAL_FLASHEx_Erase+0xd0>)
 800101c:	7e1b      	ldrb	r3, [r3, #24]
 800101e:	2b01      	cmp	r3, #1
 8001020:	d101      	bne.n	8001026 <HAL_FLASHEx_Erase+0x1e>
 8001022:	2302      	movs	r3, #2
 8001024:	e053      	b.n	80010ce <HAL_FLASHEx_Erase+0xc6>
 8001026:	4b2c      	ldr	r3, [pc, #176]	; (80010d8 <HAL_FLASHEx_Erase+0xd0>)
 8001028:	2201      	movs	r2, #1
 800102a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b02      	cmp	r3, #2
 8001032:	d116      	bne.n	8001062 <HAL_FLASHEx_Erase+0x5a>
    else 
#endif /* FLASH_BANK2_END */
    {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001034:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001038:	f7ff ff50 	bl	8000edc <FLASH_WaitForLastOperation>
 800103c:	4603      	mov	r3, r0
 800103e:	2b00      	cmp	r3, #0
 8001040:	d141      	bne.n	80010c6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Mass erase to be done*/
        FLASH_MassErase(FLASH_BANK_1);
 8001042:	2001      	movs	r0, #1
 8001044:	f000 f84c 	bl	80010e0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001048:	f24c 3050 	movw	r0, #50000	; 0xc350
 800104c:	f7ff ff46 	bl	8000edc <FLASH_WaitForLastOperation>
 8001050:	4603      	mov	r3, r0
 8001052:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8001054:	4b21      	ldr	r3, [pc, #132]	; (80010dc <HAL_FLASHEx_Erase+0xd4>)
 8001056:	691b      	ldr	r3, [r3, #16]
 8001058:	4a20      	ldr	r2, [pc, #128]	; (80010dc <HAL_FLASHEx_Erase+0xd4>)
 800105a:	f023 0304 	bic.w	r3, r3, #4
 800105e:	6113      	str	r3, [r2, #16]
 8001060:	e031      	b.n	80010c6 <HAL_FLASHEx_Erase+0xbe>
    else
#endif /* FLASH_BANK2_END */
   {
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8001062:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001066:	f7ff ff39 	bl	8000edc <FLASH_WaitForLastOperation>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d12a      	bne.n	80010c6 <HAL_FLASHEx_Erase+0xbe>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	f04f 32ff 	mov.w	r2, #4294967295
 8001076:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	689b      	ldr	r3, [r3, #8]
 800107c:	60bb      	str	r3, [r7, #8]
 800107e:	e019      	b.n	80010b4 <HAL_FLASHEx_Erase+0xac>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 8001080:	68b8      	ldr	r0, [r7, #8]
 8001082:	f000 f849 	bl	8001118 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8001086:	f24c 3050 	movw	r0, #50000	; 0xc350
 800108a:	f7ff ff27 	bl	8000edc <FLASH_WaitForLastOperation>
 800108e:	4603      	mov	r3, r0
 8001090:	73fb      	strb	r3, [r7, #15]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8001092:	4b12      	ldr	r3, [pc, #72]	; (80010dc <HAL_FLASHEx_Erase+0xd4>)
 8001094:	691b      	ldr	r3, [r3, #16]
 8001096:	4a11      	ldr	r2, [pc, #68]	; (80010dc <HAL_FLASHEx_Erase+0xd4>)
 8001098:	f023 0302 	bic.w	r3, r3, #2
 800109c:	6113      	str	r3, [r2, #16]
          
          if (status != HAL_OK)
 800109e:	7bfb      	ldrb	r3, [r7, #15]
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d003      	beq.n	80010ac <HAL_FLASHEx_Erase+0xa4>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	68ba      	ldr	r2, [r7, #8]
 80010a8:	601a      	str	r2, [r3, #0]
            break;
 80010aa:	e00c      	b.n	80010c6 <HAL_FLASHEx_Erase+0xbe>
            address += FLASH_PAGE_SIZE)
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80010b2:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	029a      	lsls	r2, r3, #10
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	4413      	add	r3, r2
        for(address = pEraseInit->PageAddress;
 80010c0:	68ba      	ldr	r2, [r7, #8]
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d3dc      	bcc.n	8001080 <HAL_FLASHEx_Erase+0x78>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80010c6:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <HAL_FLASHEx_Erase+0xd0>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	761a      	strb	r2, [r3, #24]

  return status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000260 	.word	0x20000260
 80010dc:	40022000 	.word	0x40022000

080010e0 <FLASH_MassErase>:
  @endif
  *
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 80010e0:	b480      	push	{r7}
 80010e2:	b083      	sub	sp, #12
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80010e8:	4b09      	ldr	r3, [pc, #36]	; (8001110 <FLASH_MassErase+0x30>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
#if !defined(FLASH_BANK2_END)
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_BANK2_END */  
    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <FLASH_MassErase+0x34>)
 80010f0:	691b      	ldr	r3, [r3, #16]
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <FLASH_MassErase+0x34>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	6113      	str	r3, [r2, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <FLASH_MassErase+0x34>)
 80010fc:	691b      	ldr	r3, [r3, #16]
 80010fe:	4a05      	ldr	r2, [pc, #20]	; (8001114 <FLASH_MassErase+0x34>)
 8001100:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001104:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001106:	bf00      	nop
 8001108:	370c      	adds	r7, #12
 800110a:	46bd      	mov	sp, r7
 800110c:	bc80      	pop	{r7}
 800110e:	4770      	bx	lr
 8001110:	20000260 	.word	0x20000260
 8001114:	40022000 	.word	0x40022000

08001118 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8001118:	b480      	push	{r7}
 800111a:	b083      	sub	sp, #12
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001120:	4b0b      	ldr	r3, [pc, #44]	; (8001150 <FLASH_PageErase+0x38>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  }
  else
  {
#endif /* FLASH_BANK2_END */
    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001126:	4b0b      	ldr	r3, [pc, #44]	; (8001154 <FLASH_PageErase+0x3c>)
 8001128:	691b      	ldr	r3, [r3, #16]
 800112a:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <FLASH_PageErase+0x3c>)
 800112c:	f043 0302 	orr.w	r3, r3, #2
 8001130:	6113      	str	r3, [r2, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8001132:	4a08      	ldr	r2, [pc, #32]	; (8001154 <FLASH_PageErase+0x3c>)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <FLASH_PageErase+0x3c>)
 800113a:	691b      	ldr	r3, [r3, #16]
 800113c:	4a05      	ldr	r2, [pc, #20]	; (8001154 <FLASH_PageErase+0x3c>)
 800113e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001142:	6113      	str	r3, [r2, #16]
#if defined(FLASH_BANK2_END)
  }
#endif /* FLASH_BANK2_END */
}
 8001144:	bf00      	nop
 8001146:	370c      	adds	r7, #12
 8001148:	46bd      	mov	sp, r7
 800114a:	bc80      	pop	{r7}
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	20000260 	.word	0x20000260
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001158:	b480      	push	{r7}
 800115a:	b08b      	sub	sp, #44	; 0x2c
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
 8001160:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001162:	2300      	movs	r3, #0
 8001164:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001166:	2300      	movs	r3, #0
 8001168:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116a:	e169      	b.n	8001440 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800116c:	2201      	movs	r2, #1
 800116e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	69fa      	ldr	r2, [r7, #28]
 800117c:	4013      	ands	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001180:	69ba      	ldr	r2, [r7, #24]
 8001182:	69fb      	ldr	r3, [r7, #28]
 8001184:	429a      	cmp	r2, r3
 8001186:	f040 8158 	bne.w	800143a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	4a9a      	ldr	r2, [pc, #616]	; (80013f8 <HAL_GPIO_Init+0x2a0>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d05e      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 8001194:	4a98      	ldr	r2, [pc, #608]	; (80013f8 <HAL_GPIO_Init+0x2a0>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d875      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 800119a:	4a98      	ldr	r2, [pc, #608]	; (80013fc <HAL_GPIO_Init+0x2a4>)
 800119c:	4293      	cmp	r3, r2
 800119e:	d058      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011a0:	4a96      	ldr	r2, [pc, #600]	; (80013fc <HAL_GPIO_Init+0x2a4>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d86f      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011a6:	4a96      	ldr	r2, [pc, #600]	; (8001400 <HAL_GPIO_Init+0x2a8>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d052      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011ac:	4a94      	ldr	r2, [pc, #592]	; (8001400 <HAL_GPIO_Init+0x2a8>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d869      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011b2:	4a94      	ldr	r2, [pc, #592]	; (8001404 <HAL_GPIO_Init+0x2ac>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d04c      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011b8:	4a92      	ldr	r2, [pc, #584]	; (8001404 <HAL_GPIO_Init+0x2ac>)
 80011ba:	4293      	cmp	r3, r2
 80011bc:	d863      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011be:	4a92      	ldr	r2, [pc, #584]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d046      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
 80011c4:	4a90      	ldr	r2, [pc, #576]	; (8001408 <HAL_GPIO_Init+0x2b0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d85d      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011ca:	2b12      	cmp	r3, #18
 80011cc:	d82a      	bhi.n	8001224 <HAL_GPIO_Init+0xcc>
 80011ce:	2b12      	cmp	r3, #18
 80011d0:	d859      	bhi.n	8001286 <HAL_GPIO_Init+0x12e>
 80011d2:	a201      	add	r2, pc, #4	; (adr r2, 80011d8 <HAL_GPIO_Init+0x80>)
 80011d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d8:	08001253 	.word	0x08001253
 80011dc:	0800122d 	.word	0x0800122d
 80011e0:	0800123f 	.word	0x0800123f
 80011e4:	08001281 	.word	0x08001281
 80011e8:	08001287 	.word	0x08001287
 80011ec:	08001287 	.word	0x08001287
 80011f0:	08001287 	.word	0x08001287
 80011f4:	08001287 	.word	0x08001287
 80011f8:	08001287 	.word	0x08001287
 80011fc:	08001287 	.word	0x08001287
 8001200:	08001287 	.word	0x08001287
 8001204:	08001287 	.word	0x08001287
 8001208:	08001287 	.word	0x08001287
 800120c:	08001287 	.word	0x08001287
 8001210:	08001287 	.word	0x08001287
 8001214:	08001287 	.word	0x08001287
 8001218:	08001287 	.word	0x08001287
 800121c:	08001235 	.word	0x08001235
 8001220:	08001249 	.word	0x08001249
 8001224:	4a79      	ldr	r2, [pc, #484]	; (800140c <HAL_GPIO_Init+0x2b4>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d013      	beq.n	8001252 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800122a:	e02c      	b.n	8001286 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	623b      	str	r3, [r7, #32]
          break;
 8001232:	e029      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	68db      	ldr	r3, [r3, #12]
 8001238:	3304      	adds	r3, #4
 800123a:	623b      	str	r3, [r7, #32]
          break;
 800123c:	e024      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	68db      	ldr	r3, [r3, #12]
 8001242:	3308      	adds	r3, #8
 8001244:	623b      	str	r3, [r7, #32]
          break;
 8001246:	e01f      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	68db      	ldr	r3, [r3, #12]
 800124c:	330c      	adds	r3, #12
 800124e:	623b      	str	r3, [r7, #32]
          break;
 8001250:	e01a      	b.n	8001288 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	2b00      	cmp	r3, #0
 8001258:	d102      	bne.n	8001260 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800125a:	2304      	movs	r3, #4
 800125c:	623b      	str	r3, [r7, #32]
          break;
 800125e:	e013      	b.n	8001288 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d105      	bne.n	8001274 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001268:	2308      	movs	r3, #8
 800126a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69fa      	ldr	r2, [r7, #28]
 8001270:	611a      	str	r2, [r3, #16]
          break;
 8001272:	e009      	b.n	8001288 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001274:	2308      	movs	r3, #8
 8001276:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	69fa      	ldr	r2, [r7, #28]
 800127c:	615a      	str	r2, [r3, #20]
          break;
 800127e:	e003      	b.n	8001288 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001280:	2300      	movs	r3, #0
 8001282:	623b      	str	r3, [r7, #32]
          break;
 8001284:	e000      	b.n	8001288 <HAL_GPIO_Init+0x130>
          break;
 8001286:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2bff      	cmp	r3, #255	; 0xff
 800128c:	d801      	bhi.n	8001292 <HAL_GPIO_Init+0x13a>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	e001      	b.n	8001296 <HAL_GPIO_Init+0x13e>
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	3304      	adds	r3, #4
 8001296:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	2bff      	cmp	r3, #255	; 0xff
 800129c:	d802      	bhi.n	80012a4 <HAL_GPIO_Init+0x14c>
 800129e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	e002      	b.n	80012aa <HAL_GPIO_Init+0x152>
 80012a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a6:	3b08      	subs	r3, #8
 80012a8:	009b      	lsls	r3, r3, #2
 80012aa:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	210f      	movs	r1, #15
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	fa01 f303 	lsl.w	r3, r1, r3
 80012b8:	43db      	mvns	r3, r3
 80012ba:	401a      	ands	r2, r3
 80012bc:	6a39      	ldr	r1, [r7, #32]
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	fa01 f303 	lsl.w	r3, r1, r3
 80012c4:	431a      	orrs	r2, r3
 80012c6:	697b      	ldr	r3, [r7, #20]
 80012c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	f000 80b1 	beq.w	800143a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80012d8:	4b4d      	ldr	r3, [pc, #308]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012da:	699b      	ldr	r3, [r3, #24]
 80012dc:	4a4c      	ldr	r2, [pc, #304]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	6193      	str	r3, [r2, #24]
 80012e4:	4b4a      	ldr	r3, [pc, #296]	; (8001410 <HAL_GPIO_Init+0x2b8>)
 80012e6:	699b      	ldr	r3, [r3, #24]
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60bb      	str	r3, [r7, #8]
 80012ee:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80012f0:	4a48      	ldr	r2, [pc, #288]	; (8001414 <HAL_GPIO_Init+0x2bc>)
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	089b      	lsrs	r3, r3, #2
 80012f6:	3302      	adds	r3, #2
 80012f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012fc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80012fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001300:	f003 0303 	and.w	r3, r3, #3
 8001304:	009b      	lsls	r3, r3, #2
 8001306:	220f      	movs	r2, #15
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	43db      	mvns	r3, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	4a40      	ldr	r2, [pc, #256]	; (8001418 <HAL_GPIO_Init+0x2c0>)
 8001318:	4293      	cmp	r3, r2
 800131a:	d013      	beq.n	8001344 <HAL_GPIO_Init+0x1ec>
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	4a3f      	ldr	r2, [pc, #252]	; (800141c <HAL_GPIO_Init+0x2c4>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d00d      	beq.n	8001340 <HAL_GPIO_Init+0x1e8>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4a3e      	ldr	r2, [pc, #248]	; (8001420 <HAL_GPIO_Init+0x2c8>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d007      	beq.n	800133c <HAL_GPIO_Init+0x1e4>
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	4a3d      	ldr	r2, [pc, #244]	; (8001424 <HAL_GPIO_Init+0x2cc>)
 8001330:	4293      	cmp	r3, r2
 8001332:	d101      	bne.n	8001338 <HAL_GPIO_Init+0x1e0>
 8001334:	2303      	movs	r3, #3
 8001336:	e006      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001338:	2304      	movs	r3, #4
 800133a:	e004      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 800133c:	2302      	movs	r3, #2
 800133e:	e002      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_GPIO_Init+0x1ee>
 8001344:	2300      	movs	r3, #0
 8001346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001348:	f002 0203 	and.w	r2, r2, #3
 800134c:	0092      	lsls	r2, r2, #2
 800134e:	4093      	lsls	r3, r2
 8001350:	68fa      	ldr	r2, [r7, #12]
 8001352:	4313      	orrs	r3, r2
 8001354:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001356:	492f      	ldr	r1, [pc, #188]	; (8001414 <HAL_GPIO_Init+0x2bc>)
 8001358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135a:	089b      	lsrs	r3, r3, #2
 800135c:	3302      	adds	r3, #2
 800135e:	68fa      	ldr	r2, [r7, #12]
 8001360:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	685b      	ldr	r3, [r3, #4]
 8001368:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136c:	2b00      	cmp	r3, #0
 800136e:	d006      	beq.n	800137e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001370:	4b2d      	ldr	r3, [pc, #180]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001372:	681a      	ldr	r2, [r3, #0]
 8001374:	492c      	ldr	r1, [pc, #176]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001376:	69bb      	ldr	r3, [r7, #24]
 8001378:	4313      	orrs	r3, r2
 800137a:	600b      	str	r3, [r1, #0]
 800137c:	e006      	b.n	800138c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800137e:	4b2a      	ldr	r3, [pc, #168]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001380:	681a      	ldr	r2, [r3, #0]
 8001382:	69bb      	ldr	r3, [r7, #24]
 8001384:	43db      	mvns	r3, r3
 8001386:	4928      	ldr	r1, [pc, #160]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 8001388:	4013      	ands	r3, r2
 800138a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d006      	beq.n	80013a6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001398:	4b23      	ldr	r3, [pc, #140]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 800139a:	685a      	ldr	r2, [r3, #4]
 800139c:	4922      	ldr	r1, [pc, #136]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 800139e:	69bb      	ldr	r3, [r7, #24]
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]
 80013a4:	e006      	b.n	80013b4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	69bb      	ldr	r3, [r7, #24]
 80013ac:	43db      	mvns	r3, r3
 80013ae:	491e      	ldr	r1, [pc, #120]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013b0:	4013      	ands	r3, r2
 80013b2:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d006      	beq.n	80013ce <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80013c0:	4b19      	ldr	r3, [pc, #100]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013c2:	689a      	ldr	r2, [r3, #8]
 80013c4:	4918      	ldr	r1, [pc, #96]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	608b      	str	r3, [r1, #8]
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80013ce:	4b16      	ldr	r3, [pc, #88]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013d0:	689a      	ldr	r2, [r3, #8]
 80013d2:	69bb      	ldr	r3, [r7, #24]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	4914      	ldr	r1, [pc, #80]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013d8:	4013      	ands	r3, r2
 80013da:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d021      	beq.n	800142c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80013e8:	4b0f      	ldr	r3, [pc, #60]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013ea:	68da      	ldr	r2, [r3, #12]
 80013ec:	490e      	ldr	r1, [pc, #56]	; (8001428 <HAL_GPIO_Init+0x2d0>)
 80013ee:	69bb      	ldr	r3, [r7, #24]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	60cb      	str	r3, [r1, #12]
 80013f4:	e021      	b.n	800143a <HAL_GPIO_Init+0x2e2>
 80013f6:	bf00      	nop
 80013f8:	10320000 	.word	0x10320000
 80013fc:	10310000 	.word	0x10310000
 8001400:	10220000 	.word	0x10220000
 8001404:	10210000 	.word	0x10210000
 8001408:	10120000 	.word	0x10120000
 800140c:	10110000 	.word	0x10110000
 8001410:	40021000 	.word	0x40021000
 8001414:	40010000 	.word	0x40010000
 8001418:	40010800 	.word	0x40010800
 800141c:	40010c00 	.word	0x40010c00
 8001420:	40011000 	.word	0x40011000
 8001424:	40011400 	.word	0x40011400
 8001428:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_GPIO_Init+0x304>)
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	69bb      	ldr	r3, [r7, #24]
 8001432:	43db      	mvns	r3, r3
 8001434:	4909      	ldr	r1, [pc, #36]	; (800145c <HAL_GPIO_Init+0x304>)
 8001436:	4013      	ands	r3, r2
 8001438:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800143a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800143c:	3301      	adds	r3, #1
 800143e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001446:	fa22 f303 	lsr.w	r3, r2, r3
 800144a:	2b00      	cmp	r3, #0
 800144c:	f47f ae8e 	bne.w	800116c <HAL_GPIO_Init+0x14>
  }
}
 8001450:	bf00      	nop
 8001452:	bf00      	nop
 8001454:	372c      	adds	r7, #44	; 0x2c
 8001456:	46bd      	mov	sp, r7
 8001458:	bc80      	pop	{r7}
 800145a:	4770      	bx	lr
 800145c:	40010400 	.word	0x40010400

08001460 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
 8001468:	460b      	mov	r3, r1
 800146a:	807b      	strh	r3, [r7, #2]
 800146c:	4613      	mov	r3, r2
 800146e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001470:	787b      	ldrb	r3, [r7, #1]
 8001472:	2b00      	cmp	r3, #0
 8001474:	d003      	beq.n	800147e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001476:	887a      	ldrh	r2, [r7, #2]
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800147c:	e003      	b.n	8001486 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800147e:	887b      	ldrh	r3, [r7, #2]
 8001480:	041a      	lsls	r2, r3, #16
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	611a      	str	r2, [r3, #16]
}
 8001486:	bf00      	nop
 8001488:	370c      	adds	r7, #12
 800148a:	46bd      	mov	sp, r7
 800148c:	bc80      	pop	{r7}
 800148e:	4770      	bx	lr

08001490 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001490:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001492:	b08b      	sub	sp, #44	; 0x2c
 8001494:	af06      	add	r7, sp, #24
 8001496:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e0fd      	b.n	800169e <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80014a8:	b2db      	uxtb	r3, r3
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d106      	bne.n	80014bc <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	2200      	movs	r2, #0
 80014b2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80014b6:	6878      	ldr	r0, [r7, #4]
 80014b8:	f008 f89a 	bl	80095f0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2203      	movs	r2, #3
 80014c0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f002 fe1d 	bl	8004108 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	603b      	str	r3, [r7, #0]
 80014d4:	687e      	ldr	r6, [r7, #4]
 80014d6:	466d      	mov	r5, sp
 80014d8:	f106 0410 	add.w	r4, r6, #16
 80014dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014e0:	6823      	ldr	r3, [r4, #0]
 80014e2:	602b      	str	r3, [r5, #0]
 80014e4:	1d33      	adds	r3, r6, #4
 80014e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80014e8:	6838      	ldr	r0, [r7, #0]
 80014ea:	f002 fde7 	bl	80040bc <USB_CoreInit>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d005      	beq.n	8001500 <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	2202      	movs	r2, #2
 80014f8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e0ce      	b.n	800169e <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f002 fe18 	bl	800413c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800150c:	2300      	movs	r3, #0
 800150e:	73fb      	strb	r3, [r7, #15]
 8001510:	e04c      	b.n	80015ac <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001512:	7bfb      	ldrb	r3, [r7, #15]
 8001514:	6879      	ldr	r1, [r7, #4]
 8001516:	1c5a      	adds	r2, r3, #1
 8001518:	4613      	mov	r3, r2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	440b      	add	r3, r1
 8001522:	3301      	adds	r3, #1
 8001524:	2201      	movs	r2, #1
 8001526:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001528:	7bfb      	ldrb	r3, [r7, #15]
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	440b      	add	r3, r1
 8001538:	7bfa      	ldrb	r2, [r7, #15]
 800153a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800153c:	7bfa      	ldrb	r2, [r7, #15]
 800153e:	7bfb      	ldrb	r3, [r7, #15]
 8001540:	b298      	uxth	r0, r3
 8001542:	6879      	ldr	r1, [r7, #4]
 8001544:	4613      	mov	r3, r2
 8001546:	009b      	lsls	r3, r3, #2
 8001548:	4413      	add	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	440b      	add	r3, r1
 800154e:	3336      	adds	r3, #54	; 0x36
 8001550:	4602      	mov	r2, r0
 8001552:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	6879      	ldr	r1, [r7, #4]
 8001558:	1c5a      	adds	r2, r3, #1
 800155a:	4613      	mov	r3, r2
 800155c:	009b      	lsls	r3, r3, #2
 800155e:	4413      	add	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	440b      	add	r3, r1
 8001564:	3303      	adds	r3, #3
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800156a:	7bfa      	ldrb	r2, [r7, #15]
 800156c:	6879      	ldr	r1, [r7, #4]
 800156e:	4613      	mov	r3, r2
 8001570:	009b      	lsls	r3, r3, #2
 8001572:	4413      	add	r3, r2
 8001574:	00db      	lsls	r3, r3, #3
 8001576:	440b      	add	r3, r1
 8001578:	3338      	adds	r3, #56	; 0x38
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800157e:	7bfa      	ldrb	r2, [r7, #15]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4613      	mov	r3, r2
 8001584:	009b      	lsls	r3, r3, #2
 8001586:	4413      	add	r3, r2
 8001588:	00db      	lsls	r3, r3, #3
 800158a:	440b      	add	r3, r1
 800158c:	333c      	adds	r3, #60	; 0x3c
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001592:	7bfa      	ldrb	r2, [r7, #15]
 8001594:	6879      	ldr	r1, [r7, #4]
 8001596:	4613      	mov	r3, r2
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	00db      	lsls	r3, r3, #3
 800159e:	440b      	add	r3, r1
 80015a0:	3340      	adds	r3, #64	; 0x40
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015a6:	7bfb      	ldrb	r3, [r7, #15]
 80015a8:	3301      	adds	r3, #1
 80015aa:	73fb      	strb	r3, [r7, #15]
 80015ac:	7bfa      	ldrb	r2, [r7, #15]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3ad      	bcc.n	8001512 <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]
 80015ba:	e044      	b.n	8001646 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80015bc:	7bfa      	ldrb	r2, [r7, #15]
 80015be:	6879      	ldr	r1, [r7, #4]
 80015c0:	4613      	mov	r3, r2
 80015c2:	009b      	lsls	r3, r3, #2
 80015c4:	4413      	add	r3, r2
 80015c6:	00db      	lsls	r3, r3, #3
 80015c8:	440b      	add	r3, r1
 80015ca:	f203 1369 	addw	r3, r3, #361	; 0x169
 80015ce:	2200      	movs	r2, #0
 80015d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80015d2:	7bfa      	ldrb	r2, [r7, #15]
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	440b      	add	r3, r1
 80015e0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80015e4:	7bfa      	ldrb	r2, [r7, #15]
 80015e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80015e8:	7bfa      	ldrb	r2, [r7, #15]
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	4613      	mov	r3, r2
 80015ee:	009b      	lsls	r3, r3, #2
 80015f0:	4413      	add	r3, r2
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	440b      	add	r3, r1
 80015f6:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80015fa:	2200      	movs	r2, #0
 80015fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80015fe:	7bfa      	ldrb	r2, [r7, #15]
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	4613      	mov	r3, r2
 8001604:	009b      	lsls	r3, r3, #2
 8001606:	4413      	add	r3, r2
 8001608:	00db      	lsls	r3, r3, #3
 800160a:	440b      	add	r3, r1
 800160c:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001614:	7bfa      	ldrb	r2, [r7, #15]
 8001616:	6879      	ldr	r1, [r7, #4]
 8001618:	4613      	mov	r3, r2
 800161a:	009b      	lsls	r3, r3, #2
 800161c:	4413      	add	r3, r2
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	440b      	add	r3, r1
 8001622:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800162a:	7bfa      	ldrb	r2, [r7, #15]
 800162c:	6879      	ldr	r1, [r7, #4]
 800162e:	4613      	mov	r3, r2
 8001630:	009b      	lsls	r3, r3, #2
 8001632:	4413      	add	r3, r2
 8001634:	00db      	lsls	r3, r3, #3
 8001636:	440b      	add	r3, r1
 8001638:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	3301      	adds	r3, #1
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	7bfa      	ldrb	r2, [r7, #15]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	429a      	cmp	r2, r3
 800164e:	d3b5      	bcc.n	80015bc <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	603b      	str	r3, [r7, #0]
 8001656:	687e      	ldr	r6, [r7, #4]
 8001658:	466d      	mov	r5, sp
 800165a:	f106 0410 	add.w	r4, r6, #16
 800165e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001660:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001662:	6823      	ldr	r3, [r4, #0]
 8001664:	602b      	str	r3, [r5, #0]
 8001666:	1d33      	adds	r3, r6, #4
 8001668:	cb0e      	ldmia	r3, {r1, r2, r3}
 800166a:	6838      	ldr	r0, [r7, #0]
 800166c:	f002 fd72 	bl	8004154 <USB_DevInit>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d005      	beq.n	8001682 <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2202      	movs	r2, #2
 800167a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e00d      	b.n	800169e <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	2201      	movs	r2, #1
 800168e:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	4618      	mov	r0, r3
 8001698:	f005 fa3a 	bl	8006b10 <USB_DevDisconnect>

  return HAL_OK;
 800169c:	2300      	movs	r3, #0
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bdf0      	pop	{r4, r5, r6, r7, pc}

080016a6 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b082      	sub	sp, #8
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016b4:	2b01      	cmp	r3, #1
 80016b6:	d101      	bne.n	80016bc <HAL_PCD_Start+0x16>
 80016b8:	2302      	movs	r3, #2
 80016ba:	e016      	b.n	80016ea <HAL_PCD_Start+0x44>
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2201      	movs	r2, #1
 80016c0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	4618      	mov	r0, r3
 80016ca:	f002 fd07 	bl	80040dc <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 80016ce:	2101      	movs	r1, #1
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f008 fa16 	bl	8009b02 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4618      	mov	r0, r3
 80016dc:	f005 fa0e 	bl	8006afc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	2200      	movs	r2, #0
 80016e4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80016e8:	2300      	movs	r3, #0
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3708      	adds	r7, #8
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bd80      	pop	{r7, pc}

080016f2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80016f2:	b580      	push	{r7, lr}
 80016f4:	b088      	sub	sp, #32
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4618      	mov	r0, r3
 8001700:	f005 fa10 	bl	8006b24 <USB_ReadInterrupts>
 8001704:	4603      	mov	r3, r0
 8001706:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800170a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800170e:	d102      	bne.n	8001716 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8001710:	6878      	ldr	r0, [r7, #4]
 8001712:	f000 fb8c 	bl	8001e2e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	4618      	mov	r0, r3
 800171c:	f005 fa02 	bl	8006b24 <USB_ReadInterrupts>
 8001720:	4603      	mov	r3, r0
 8001722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172a:	d112      	bne.n	8001752 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001734:	b29a      	uxth	r2, r3
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800173e:	b292      	uxth	r2, r2
 8001740:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f007 ffce 	bl	80096e6 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800174a:	2100      	movs	r1, #0
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f000 f923 	bl	8001998 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f005 f9e4 	bl	8006b24 <USB_ReadInterrupts>
 800175c:	4603      	mov	r3, r0
 800175e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001762:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001766:	d10b      	bne.n	8001780 <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001770:	b29a      	uxth	r2, r3
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800177a:	b292      	uxth	r2, r2
 800177c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4618      	mov	r0, r3
 8001786:	f005 f9cd 	bl	8006b24 <USB_ReadInterrupts>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001790:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001794:	d10b      	bne.n	80017ae <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800179e:	b29a      	uxth	r2, r3
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017a8:	b292      	uxth	r2, r2
 80017aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4618      	mov	r0, r3
 80017b4:	f005 f9b6 	bl	8006b24 <USB_ReadInterrupts>
 80017b8:	4603      	mov	r3, r0
 80017ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80017be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80017c2:	d126      	bne.n	8001812 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017cc:	b29a      	uxth	r2, r3
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f022 0204 	bic.w	r2, r2, #4
 80017d6:	b292      	uxth	r2, r2
 80017d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017e4:	b29a      	uxth	r2, r3
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0208 	bic.w	r2, r2, #8
 80017ee:	b292      	uxth	r2, r2
 80017f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f007 ffaf 	bl	8009758 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001802:	b29a      	uxth	r2, r3
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800180c:	b292      	uxth	r2, r2
 800180e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	4618      	mov	r0, r3
 8001818:	f005 f984 	bl	8006b24 <USB_ReadInterrupts>
 800181c:	4603      	mov	r3, r0
 800181e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001822:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001826:	f040 8082 	bne.w	800192e <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 800182a:	2300      	movs	r3, #0
 800182c:	77fb      	strb	r3, [r7, #31]
 800182e:	e010      	b.n	8001852 <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	461a      	mov	r2, r3
 8001836:	7ffb      	ldrb	r3, [r7, #31]
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	441a      	add	r2, r3
 800183c:	7ffb      	ldrb	r3, [r7, #31]
 800183e:	8812      	ldrh	r2, [r2, #0]
 8001840:	b292      	uxth	r2, r2
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	3320      	adds	r3, #32
 8001846:	443b      	add	r3, r7
 8001848:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 800184c:	7ffb      	ldrb	r3, [r7, #31]
 800184e:	3301      	adds	r3, #1
 8001850:	77fb      	strb	r3, [r7, #31]
 8001852:	7ffb      	ldrb	r3, [r7, #31]
 8001854:	2b07      	cmp	r3, #7
 8001856:	d9eb      	bls.n	8001830 <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001860:	b29a      	uxth	r2, r3
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f042 0201 	orr.w	r2, r2, #1
 800186a:	b292      	uxth	r2, r2
 800186c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001878:	b29a      	uxth	r2, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f022 0201 	bic.w	r2, r2, #1
 8001882:	b292      	uxth	r2, r2
 8001884:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001888:	bf00      	nop
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001892:	b29b      	uxth	r3, r3
 8001894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001898:	2b00      	cmp	r3, #0
 800189a:	d0f6      	beq.n	800188a <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80018a4:	b29a      	uxth	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018ae:	b292      	uxth	r2, r2
 80018b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 80018b4:	2300      	movs	r3, #0
 80018b6:	77fb      	strb	r3, [r7, #31]
 80018b8:	e00f      	b.n	80018da <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 80018ba:	7ffb      	ldrb	r3, [r7, #31]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	6812      	ldr	r2, [r2, #0]
 80018c0:	4611      	mov	r1, r2
 80018c2:	7ffa      	ldrb	r2, [r7, #31]
 80018c4:	0092      	lsls	r2, r2, #2
 80018c6:	440a      	add	r2, r1
 80018c8:	005b      	lsls	r3, r3, #1
 80018ca:	3320      	adds	r3, #32
 80018cc:	443b      	add	r3, r7
 80018ce:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 80018d2:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 80018d4:	7ffb      	ldrb	r3, [r7, #31]
 80018d6:	3301      	adds	r3, #1
 80018d8:	77fb      	strb	r3, [r7, #31]
 80018da:	7ffb      	ldrb	r3, [r7, #31]
 80018dc:	2b07      	cmp	r3, #7
 80018de:	d9ec      	bls.n	80018ba <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80018e8:	b29a      	uxth	r2, r3
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	f042 0208 	orr.w	r2, r2, #8
 80018f2:	b292      	uxth	r2, r2
 80018f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001900:	b29a      	uxth	r2, r3
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800190a:	b292      	uxth	r2, r2
 800190c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001918:	b29a      	uxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f042 0204 	orr.w	r2, r2, #4
 8001922:	b292      	uxth	r2, r2
 8001924:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001928:	6878      	ldr	r0, [r7, #4]
 800192a:	f007 fefb 	bl	8009724 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4618      	mov	r0, r3
 8001934:	f005 f8f6 	bl	8006b24 <USB_ReadInterrupts>
 8001938:	4603      	mov	r3, r0
 800193a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800193e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001942:	d10e      	bne.n	8001962 <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800194c:	b29a      	uxth	r2, r3
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001956:	b292      	uxth	r2, r2
 8001958:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800195c:	6878      	ldr	r0, [r7, #4]
 800195e:	f007 feb4 	bl	80096ca <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4618      	mov	r0, r3
 8001968:	f005 f8dc 	bl	8006b24 <USB_ReadInterrupts>
 800196c:	4603      	mov	r3, r0
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001976:	d10b      	bne.n	8001990 <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001980:	b29a      	uxth	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800198a:	b292      	uxth	r2, r2
 800198c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8001990:	bf00      	nop
 8001992:	3720      	adds	r7, #32
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}

08001998 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	460b      	mov	r3, r1
 80019a2:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_PCD_SetAddress+0x1a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e013      	b.n	80019da <HAL_PCD_SetAddress+0x42>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	78fa      	ldrb	r2, [r7, #3]
 80019be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	78fa      	ldrb	r2, [r7, #3]
 80019c8:	4611      	mov	r1, r2
 80019ca:	4618      	mov	r0, r3
 80019cc:	f005 f883 	bl	8006ad6 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019d8:	2300      	movs	r3, #0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80019e2:	b580      	push	{r7, lr}
 80019e4:	b084      	sub	sp, #16
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
 80019ea:	4608      	mov	r0, r1
 80019ec:	4611      	mov	r1, r2
 80019ee:	461a      	mov	r2, r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	70fb      	strb	r3, [r7, #3]
 80019f4:	460b      	mov	r3, r1
 80019f6:	803b      	strh	r3, [r7, #0]
 80019f8:	4613      	mov	r3, r2
 80019fa:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80019fc:	2300      	movs	r3, #0
 80019fe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001a00:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	da0e      	bge.n	8001a26 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a08:	78fb      	ldrb	r3, [r7, #3]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	1c5a      	adds	r2, r3, #1
 8001a10:	4613      	mov	r3, r2
 8001a12:	009b      	lsls	r3, r3, #2
 8001a14:	4413      	add	r3, r2
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	687a      	ldr	r2, [r7, #4]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	2201      	movs	r2, #1
 8001a22:	705a      	strb	r2, [r3, #1]
 8001a24:	e00e      	b.n	8001a44 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a26:	78fb      	ldrb	r3, [r7, #3]
 8001a28:	f003 0207 	and.w	r2, r3, #7
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	4413      	add	r3, r2
 8001a32:	00db      	lsls	r3, r3, #3
 8001a34:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001a38:	687a      	ldr	r2, [r7, #4]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001a44:	78fb      	ldrb	r3, [r7, #3]
 8001a46:	f003 0307 	and.w	r3, r3, #7
 8001a4a:	b2da      	uxtb	r2, r3
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001a50:	883a      	ldrh	r2, [r7, #0]
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	78ba      	ldrb	r2, [r7, #2]
 8001a5a:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d004      	beq.n	8001a6e <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	b29a      	uxth	r2, r3
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001a6e:	78bb      	ldrb	r3, [r7, #2]
 8001a70:	2b02      	cmp	r3, #2
 8001a72:	d102      	bne.n	8001a7a <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	2200      	movs	r2, #0
 8001a78:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a80:	2b01      	cmp	r3, #1
 8001a82:	d101      	bne.n	8001a88 <HAL_PCD_EP_Open+0xa6>
 8001a84:	2302      	movs	r3, #2
 8001a86:	e00e      	b.n	8001aa6 <HAL_PCD_EP_Open+0xc4>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	68f9      	ldr	r1, [r7, #12]
 8001a96:	4618      	mov	r0, r3
 8001a98:	f002 fb92 	bl	80041c0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001aa4:	7afb      	ldrb	r3, [r7, #11]
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	6078      	str	r0, [r7, #4]
 8001ab6:	460b      	mov	r3, r1
 8001ab8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001aba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	da0e      	bge.n	8001ae0 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001ac2:	78fb      	ldrb	r3, [r7, #3]
 8001ac4:	f003 0307 	and.w	r3, r3, #7
 8001ac8:	1c5a      	adds	r2, r3, #1
 8001aca:	4613      	mov	r3, r2
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	00db      	lsls	r3, r3, #3
 8001ad2:	687a      	ldr	r2, [r7, #4]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ad8:	68fb      	ldr	r3, [r7, #12]
 8001ada:	2201      	movs	r2, #1
 8001adc:	705a      	strb	r2, [r3, #1]
 8001ade:	e00e      	b.n	8001afe <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001ae0:	78fb      	ldrb	r3, [r7, #3]
 8001ae2:	f003 0207 	and.w	r2, r3, #7
 8001ae6:	4613      	mov	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2200      	movs	r2, #0
 8001afc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001afe:	78fb      	ldrb	r3, [r7, #3]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	b2da      	uxtb	r2, r3
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b10:	2b01      	cmp	r3, #1
 8001b12:	d101      	bne.n	8001b18 <HAL_PCD_EP_Close+0x6a>
 8001b14:	2302      	movs	r3, #2
 8001b16:	e00e      	b.n	8001b36 <HAL_PCD_EP_Close+0x88>
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	68f9      	ldr	r1, [r7, #12]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f002 feb4 	bl	8004894 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3710      	adds	r7, #16
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}

08001b3e <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b086      	sub	sp, #24
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	60f8      	str	r0, [r7, #12]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001b4e:	7afb      	ldrb	r3, [r7, #11]
 8001b50:	f003 0207 	and.w	r2, r3, #7
 8001b54:	4613      	mov	r3, r2
 8001b56:	009b      	lsls	r3, r3, #2
 8001b58:	4413      	add	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b60:	68fa      	ldr	r2, [r7, #12]
 8001b62:	4413      	add	r3, r2
 8001b64:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	683a      	ldr	r2, [r7, #0]
 8001b70:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	2200      	movs	r2, #0
 8001b76:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b7e:	7afb      	ldrb	r3, [r7, #11]
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	b2da      	uxtb	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b8a:	7afb      	ldrb	r3, [r7, #11]
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d106      	bne.n	8001ba2 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	6979      	ldr	r1, [r7, #20]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f003 f866 	bl	8004c6c <USB_EPStartXfer>
 8001ba0:	e005      	b.n	8001bae <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	6979      	ldr	r1, [r7, #20]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 f85f 	bl	8004c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3718      	adds	r7, #24
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001bc4:	78fb      	ldrb	r3, [r7, #3]
 8001bc6:	f003 0207 	and.w	r2, r3, #7
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	4413      	add	r3, r2
 8001bd2:	00db      	lsls	r3, r3, #3
 8001bd4:	440b      	add	r3, r1
 8001bd6:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001bda:	681b      	ldr	r3, [r3, #0]
}
 8001bdc:	4618      	mov	r0, r3
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bc80      	pop	{r7}
 8001be4:	4770      	bx	lr

08001be6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	60f8      	str	r0, [r7, #12]
 8001bee:	607a      	str	r2, [r7, #4]
 8001bf0:	603b      	str	r3, [r7, #0]
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bf6:	7afb      	ldrb	r3, [r7, #11]
 8001bf8:	f003 0307 	and.w	r3, r3, #7
 8001bfc:	1c5a      	adds	r2, r3, #1
 8001bfe:	4613      	mov	r3, r2
 8001c00:	009b      	lsls	r3, r3, #2
 8001c02:	4413      	add	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	68fa      	ldr	r2, [r7, #12]
 8001c08:	4413      	add	r3, r2
 8001c0a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001c0c:	697b      	ldr	r3, [r7, #20]
 8001c0e:	687a      	ldr	r2, [r7, #4]
 8001c10:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	683a      	ldr	r2, [r7, #0]
 8001c16:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	2201      	movs	r2, #1
 8001c1c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001c20:	697b      	ldr	r3, [r7, #20]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2200      	movs	r2, #0
 8001c2a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	2201      	movs	r2, #1
 8001c30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c32:	7afb      	ldrb	r3, [r7, #11]
 8001c34:	f003 0307 	and.w	r3, r3, #7
 8001c38:	b2da      	uxtb	r2, r3
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001c3e:	7afb      	ldrb	r3, [r7, #11]
 8001c40:	f003 0307 	and.w	r3, r3, #7
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d106      	bne.n	8001c56 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	6979      	ldr	r1, [r7, #20]
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f003 f80c 	bl	8004c6c <USB_EPStartXfer>
 8001c54:	e005      	b.n	8001c62 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	6979      	ldr	r1, [r7, #20]
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f003 f805 	bl	8004c6c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3718      	adds	r7, #24
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001c6c:	b580      	push	{r7, lr}
 8001c6e:	b084      	sub	sp, #16
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	460b      	mov	r3, r1
 8001c76:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001c78:	78fb      	ldrb	r3, [r7, #3]
 8001c7a:	f003 0207 	and.w	r2, r3, #7
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	429a      	cmp	r2, r3
 8001c84:	d901      	bls.n	8001c8a <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e04c      	b.n	8001d24 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001c8a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	da0e      	bge.n	8001cb0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c92:	78fb      	ldrb	r3, [r7, #3]
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	1c5a      	adds	r2, r3, #1
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	4413      	add	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	2201      	movs	r2, #1
 8001cac:	705a      	strb	r2, [r3, #1]
 8001cae:	e00c      	b.n	8001cca <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001cb0:	78fa      	ldrb	r2, [r7, #3]
 8001cb2:	4613      	mov	r3, r2
 8001cb4:	009b      	lsls	r3, r3, #2
 8001cb6:	4413      	add	r3, r2
 8001cb8:	00db      	lsls	r3, r3, #3
 8001cba:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001cd0:	78fb      	ldrb	r3, [r7, #3]
 8001cd2:	f003 0307 	and.w	r3, r3, #7
 8001cd6:	b2da      	uxtb	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d101      	bne.n	8001cea <HAL_PCD_EP_SetStall+0x7e>
 8001ce6:	2302      	movs	r3, #2
 8001ce8:	e01c      	b.n	8001d24 <HAL_PCD_EP_SetStall+0xb8>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	2201      	movs	r2, #1
 8001cee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68f9      	ldr	r1, [r7, #12]
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f004 fdef 	bl	80068dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	f003 0307 	and.w	r3, r3, #7
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d108      	bne.n	8001d1a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001d12:	4619      	mov	r1, r3
 8001d14:	4610      	mov	r0, r2
 8001d16:	f004 ff14 	bl	8006b42 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
}
 8001d24:	4618      	mov	r0, r3
 8001d26:	3710      	adds	r7, #16
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}

08001d2c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b084      	sub	sp, #16
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	460b      	mov	r3, r1
 8001d36:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001d38:	78fb      	ldrb	r3, [r7, #3]
 8001d3a:	f003 020f 	and.w	r2, r3, #15
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	429a      	cmp	r2, r3
 8001d44:	d901      	bls.n	8001d4a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	e040      	b.n	8001dcc <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001d4a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	da0e      	bge.n	8001d70 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d52:	78fb      	ldrb	r3, [r7, #3]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	1c5a      	adds	r2, r3, #1
 8001d5a:	4613      	mov	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	4413      	add	r3, r2
 8001d60:	00db      	lsls	r3, r3, #3
 8001d62:	687a      	ldr	r2, [r7, #4]
 8001d64:	4413      	add	r3, r2
 8001d66:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	705a      	strb	r2, [r3, #1]
 8001d6e:	e00e      	b.n	8001d8e <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d70:	78fb      	ldrb	r3, [r7, #3]
 8001d72:	f003 0207 	and.w	r2, r3, #7
 8001d76:	4613      	mov	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	4413      	add	r3, r2
 8001d7c:	00db      	lsls	r3, r3, #3
 8001d7e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d82:	687a      	ldr	r2, [r7, #4]
 8001d84:	4413      	add	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2200      	movs	r2, #0
 8001d92:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001d94:	78fb      	ldrb	r3, [r7, #3]
 8001d96:	f003 0307 	and.w	r3, r3, #7
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001da6:	2b01      	cmp	r3, #1
 8001da8:	d101      	bne.n	8001dae <HAL_PCD_EP_ClrStall+0x82>
 8001daa:	2302      	movs	r3, #2
 8001dac:	e00e      	b.n	8001dcc <HAL_PCD_EP_ClrStall+0xa0>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2201      	movs	r2, #1
 8001db2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68f9      	ldr	r1, [r7, #12]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f004 fddd 	bl	800697c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001dca:	2300      	movs	r3, #0
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3710      	adds	r7, #16
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_PCD_EP_Flush>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Flush(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	460b      	mov	r3, r1
 8001dde:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d101      	bne.n	8001dee <HAL_PCD_EP_Flush+0x1a>
 8001dea:	2302      	movs	r3, #2
 8001dec:	e01b      	b.n	8001e26 <HAL_PCD_EP_Flush+0x52>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2201      	movs	r2, #1
 8001df2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  if ((ep_addr & 0x80U) == 0x80U)
 8001df6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	da09      	bge.n	8001e12 <HAL_PCD_EP_Flush+0x3e>
  {
    (void)USB_FlushTxFifo(hpcd->Instance, (uint32_t)ep_addr & EP_ADDR_MSK);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	78fb      	ldrb	r3, [r7, #3]
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4610      	mov	r0, r2
 8001e0c:	f002 f9c2 	bl	8004194 <USB_FlushTxFifo>
 8001e10:	e004      	b.n	8001e1c <HAL_PCD_EP_Flush+0x48>
  }
  else
  {
    (void)USB_FlushRxFifo(hpcd->Instance);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f002 f9c7 	bl	80041aa <USB_FlushRxFifo>
  }

  __HAL_UNLOCK(hpcd);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001e24:	2300      	movs	r3, #0
}
 8001e26:	4618      	mov	r0, r3
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b08e      	sub	sp, #56	; 0x38
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001e36:	e2ec      	b.n	8002412 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001e40:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001e42:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	f003 030f 	and.w	r3, r3, #15
 8001e4a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001e4e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	f040 8161 	bne.w	800211a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001e58:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001e5a:	f003 0310 	and.w	r3, r3, #16
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d152      	bne.n	8001f08 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001e6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001e72:	81fb      	strh	r3, [r7, #14]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	89fb      	ldrh	r3, [r7, #14]
 8001e7a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001e7e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001e82:	b29b      	uxth	r3, r3
 8001e84:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	3328      	adds	r3, #40	; 0x28
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e94:	b29b      	uxth	r3, r3
 8001e96:	461a      	mov	r2, r3
 8001e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	00db      	lsls	r3, r3, #3
 8001e9e:	4413      	add	r3, r2
 8001ea0:	3302      	adds	r3, #2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	6812      	ldr	r2, [r2, #0]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	69db      	ldr	r3, [r3, #28]
 8001ec0:	441a      	add	r2, r3
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001ec6:	2100      	movs	r1, #0
 8001ec8:	6878      	ldr	r0, [r7, #4]
 8001eca:	f007 fbe4 	bl	8009696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	f000 829b 	beq.w	8002412 <PCD_EP_ISR_Handler+0x5e4>
 8001edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ede:	699b      	ldr	r3, [r3, #24]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	f040 8296 	bne.w	8002412 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001ef2:	b2da      	uxtb	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	b292      	uxth	r2, r2
 8001efa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2200      	movs	r2, #0
 8001f02:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001f06:	e284      	b.n	8002412 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f0e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	881b      	ldrh	r3, [r3, #0]
 8001f16:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001f18:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001f1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d034      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f2a:	b29b      	uxth	r3, r3
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	3306      	adds	r3, #6
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	6812      	ldr	r2, [r2, #0]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6818      	ldr	r0, [r3, #0]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f5e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	f004 fe3e 	bl	8006be2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	881b      	ldrh	r3, [r3, #0]
 8001f6c:	b29a      	uxth	r2, r3
 8001f6e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f72:	4013      	ands	r3, r2
 8001f74:	823b      	strh	r3, [r7, #16]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	8a3a      	ldrh	r2, [r7, #16]
 8001f7c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001f80:	b292      	uxth	r2, r2
 8001f82:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	f007 fb59 	bl	800963c <HAL_PCD_SetupStageCallback>
 8001f8a:	e242      	b.n	8002412 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f8c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	f280 823e 	bge.w	8002412 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	881b      	ldrh	r3, [r3, #0]
 8001f9c:	b29a      	uxth	r2, r3
 8001f9e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001fa2:	4013      	ands	r3, r2
 8001fa4:	83bb      	strh	r3, [r7, #28]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	8bba      	ldrh	r2, [r7, #28]
 8001fac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fb0:	b292      	uxth	r2, r2
 8001fb2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	00db      	lsls	r3, r3, #3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3306      	adds	r3, #6
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6812      	ldr	r2, [r2, #0]
 8001fd0:	4413      	add	r3, r2
 8001fd2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001fdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fde:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe2:	69db      	ldr	r3, [r3, #28]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d019      	beq.n	800201c <PCD_EP_ISR_Handler+0x1ee>
 8001fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fea:	695b      	ldr	r3, [r3, #20]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d015      	beq.n	800201c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6818      	ldr	r0, [r3, #0]
 8001ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ff6:	6959      	ldr	r1, [r3, #20]
 8001ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002000:	b29b      	uxth	r3, r3
 8002002:	f004 fdee 	bl	8006be2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002008:	695a      	ldr	r2, [r3, #20]
 800200a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200c:	69db      	ldr	r3, [r3, #28]
 800200e:	441a      	add	r2, r3
 8002010:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002012:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002014:	2100      	movs	r1, #0
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f007 fb22 	bl	8009660 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002028:	2b00      	cmp	r3, #0
 800202a:	f040 81f2 	bne.w	8002412 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	61bb      	str	r3, [r7, #24]
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800203c:	b29b      	uxth	r3, r3
 800203e:	461a      	mov	r2, r3
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	4413      	add	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800204c:	617b      	str	r3, [r7, #20]
 800204e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d112      	bne.n	800207c <PCD_EP_ISR_Handler+0x24e>
 8002056:	697b      	ldr	r3, [r7, #20]
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	b29b      	uxth	r3, r3
 800205c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002060:	b29a      	uxth	r2, r3
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	801a      	strh	r2, [r3, #0]
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	881b      	ldrh	r3, [r3, #0]
 800206a:	b29b      	uxth	r3, r3
 800206c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002070:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002074:	b29a      	uxth	r2, r3
 8002076:	697b      	ldr	r3, [r7, #20]
 8002078:	801a      	strh	r2, [r3, #0]
 800207a:	e02f      	b.n	80020dc <PCD_EP_ISR_Handler+0x2ae>
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	691b      	ldr	r3, [r3, #16]
 8002080:	2b3e      	cmp	r3, #62	; 0x3e
 8002082:	d813      	bhi.n	80020ac <PCD_EP_ISR_Handler+0x27e>
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	691b      	ldr	r3, [r3, #16]
 8002088:	085b      	lsrs	r3, r3, #1
 800208a:	633b      	str	r3, [r7, #48]	; 0x30
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	691b      	ldr	r3, [r3, #16]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d002      	beq.n	800209e <PCD_EP_ISR_Handler+0x270>
 8002098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800209a:	3301      	adds	r3, #1
 800209c:	633b      	str	r3, [r7, #48]	; 0x30
 800209e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020a0:	b29b      	uxth	r3, r3
 80020a2:	029b      	lsls	r3, r3, #10
 80020a4:	b29a      	uxth	r2, r3
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	801a      	strh	r2, [r3, #0]
 80020aa:	e017      	b.n	80020dc <PCD_EP_ISR_Handler+0x2ae>
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	095b      	lsrs	r3, r3, #5
 80020b2:	633b      	str	r3, [r7, #48]	; 0x30
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	691b      	ldr	r3, [r3, #16]
 80020b8:	f003 031f 	and.w	r3, r3, #31
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d102      	bne.n	80020c6 <PCD_EP_ISR_Handler+0x298>
 80020c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c2:	3b01      	subs	r3, #1
 80020c4:	633b      	str	r3, [r7, #48]	; 0x30
 80020c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020c8:	b29b      	uxth	r3, r3
 80020ca:	029b      	lsls	r3, r3, #10
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80020d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80020d6:	b29a      	uxth	r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	881b      	ldrh	r3, [r3, #0]
 80020e2:	b29b      	uxth	r3, r3
 80020e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80020e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80020ec:	827b      	strh	r3, [r7, #18]
 80020ee:	8a7b      	ldrh	r3, [r7, #18]
 80020f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80020f4:	827b      	strh	r3, [r7, #18]
 80020f6:	8a7b      	ldrh	r3, [r7, #18]
 80020f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80020fc:	827b      	strh	r3, [r7, #18]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681a      	ldr	r2, [r3, #0]
 8002102:	8a7b      	ldrh	r3, [r7, #18]
 8002104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800210c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002114:	b29b      	uxth	r3, r3
 8002116:	8013      	strh	r3, [r2, #0]
 8002118:	e17b      	b.n	8002412 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	4413      	add	r3, r2
 8002128:	881b      	ldrh	r3, [r3, #0]
 800212a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800212c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8002130:	2b00      	cmp	r3, #0
 8002132:	f280 80ea 	bge.w	800230a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	461a      	mov	r2, r3
 800213c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002140:	009b      	lsls	r3, r3, #2
 8002142:	4413      	add	r3, r2
 8002144:	881b      	ldrh	r3, [r3, #0]
 8002146:	b29a      	uxth	r2, r3
 8002148:	f640 738f 	movw	r3, #3983	; 0xf8f
 800214c:	4013      	ands	r3, r2
 800214e:	853b      	strh	r3, [r7, #40]	; 0x28
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	461a      	mov	r2, r3
 8002156:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800215a:	009b      	lsls	r3, r3, #2
 800215c:	4413      	add	r3, r2
 800215e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002160:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002164:	b292      	uxth	r2, r2
 8002166:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002168:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800216c:	4613      	mov	r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	4413      	add	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	4413      	add	r3, r2
 800217c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800217e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002180:	7b1b      	ldrb	r3, [r3, #12]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d122      	bne.n	80021cc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800218e:	b29b      	uxth	r3, r3
 8002190:	461a      	mov	r2, r3
 8002192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002194:	781b      	ldrb	r3, [r3, #0]
 8002196:	00db      	lsls	r3, r3, #3
 8002198:	4413      	add	r3, r2
 800219a:	3306      	adds	r3, #6
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	687a      	ldr	r2, [r7, #4]
 80021a0:	6812      	ldr	r2, [r2, #0]
 80021a2:	4413      	add	r3, r2
 80021a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021a8:	881b      	ldrh	r3, [r3, #0]
 80021aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80021b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	f000 8087 	beq.w	80022c6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	6818      	ldr	r0, [r3, #0]
 80021bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021be:	6959      	ldr	r1, [r3, #20]
 80021c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c2:	88da      	ldrh	r2, [r3, #6]
 80021c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80021c6:	f004 fd0c 	bl	8006be2 <USB_ReadPMA>
 80021ca:	e07c      	b.n	80022c6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80021cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ce:	78db      	ldrb	r3, [r3, #3]
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d108      	bne.n	80021e6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80021d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021d6:	461a      	mov	r2, r3
 80021d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f000 f927 	bl	800242e <HAL_PCD_EP_DB_Receive>
 80021e0:	4603      	mov	r3, r0
 80021e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80021e4:	e06f      	b.n	80022c6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	461a      	mov	r2, r3
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	009b      	lsls	r3, r3, #2
 80021f2:	4413      	add	r3, r2
 80021f4:	881b      	ldrh	r3, [r3, #0]
 80021f6:	b29b      	uxth	r3, r3
 80021f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002200:	847b      	strh	r3, [r7, #34]	; 0x22
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	461a      	mov	r2, r3
 8002208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	441a      	add	r2, r3
 8002210:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002212:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002216:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800221a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800221e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002222:	b29b      	uxth	r3, r3
 8002224:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	461a      	mov	r2, r3
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	4413      	add	r3, r2
 8002234:	881b      	ldrh	r3, [r3, #0]
 8002236:	b29b      	uxth	r3, r3
 8002238:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d021      	beq.n	8002284 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002248:	b29b      	uxth	r3, r3
 800224a:	461a      	mov	r2, r3
 800224c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224e:	781b      	ldrb	r3, [r3, #0]
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	3302      	adds	r3, #2
 8002256:	005b      	lsls	r3, r3, #1
 8002258:	687a      	ldr	r2, [r7, #4]
 800225a:	6812      	ldr	r2, [r2, #0]
 800225c:	4413      	add	r3, r2
 800225e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002268:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800226a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800226c:	2b00      	cmp	r3, #0
 800226e:	d02a      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6818      	ldr	r0, [r3, #0]
 8002274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002276:	6959      	ldr	r1, [r3, #20]
 8002278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227a:	891a      	ldrh	r2, [r3, #8]
 800227c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800227e:	f004 fcb0 	bl	8006be2 <USB_ReadPMA>
 8002282:	e020      	b.n	80022c6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228c:	b29b      	uxth	r3, r3
 800228e:	461a      	mov	r2, r3
 8002290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	3306      	adds	r3, #6
 800229a:	005b      	lsls	r3, r3, #1
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	6812      	ldr	r2, [r2, #0]
 80022a0:	4413      	add	r3, r2
 80022a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a6:	881b      	ldrh	r3, [r3, #0]
 80022a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80022ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d008      	beq.n	80022c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6818      	ldr	r0, [r3, #0]
 80022b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ba:	6959      	ldr	r1, [r3, #20]
 80022bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022be:	895a      	ldrh	r2, [r3, #10]
 80022c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022c2:	f004 fc8e 	bl	8006be2 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80022c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c8:	69da      	ldr	r2, [r3, #28]
 80022ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022cc:	441a      	add	r2, r3
 80022ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80022d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022d4:	695a      	ldr	r2, [r3, #20]
 80022d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80022d8:	441a      	add	r2, r3
 80022da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80022de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e0:	699b      	ldr	r3, [r3, #24]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d004      	beq.n	80022f0 <PCD_EP_ISR_Handler+0x4c2>
 80022e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80022e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ea:	691b      	ldr	r3, [r3, #16]
 80022ec:	429a      	cmp	r2, r3
 80022ee:	d206      	bcs.n	80022fe <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80022f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	4619      	mov	r1, r3
 80022f6:	6878      	ldr	r0, [r7, #4]
 80022f8:	f007 f9b2 	bl	8009660 <HAL_PCD_DataOutStageCallback>
 80022fc:	e005      	b.n	800230a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002304:	4618      	mov	r0, r3
 8002306:	f002 fcb1 	bl	8004c6c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800230a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800230c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002310:	2b00      	cmp	r3, #0
 8002312:	d07e      	beq.n	8002412 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002314:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002318:	1c5a      	adds	r2, r3, #1
 800231a:	4613      	mov	r3, r2
 800231c:	009b      	lsls	r3, r3, #2
 800231e:	4413      	add	r3, r2
 8002320:	00db      	lsls	r3, r3, #3
 8002322:	687a      	ldr	r2, [r7, #4]
 8002324:	4413      	add	r3, r2
 8002326:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	843b      	strh	r3, [r7, #32]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	8c3b      	ldrh	r3, [r7, #32]
 8002354:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002358:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800235c:	b29b      	uxth	r3, r3
 800235e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002362:	78db      	ldrb	r3, [r3, #3]
 8002364:	2b03      	cmp	r3, #3
 8002366:	d00c      	beq.n	8002382 <PCD_EP_ISR_Handler+0x554>
 8002368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236a:	78db      	ldrb	r3, [r3, #3]
 800236c:	2b00      	cmp	r3, #0
 800236e:	d008      	beq.n	8002382 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002372:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002374:	2b02      	cmp	r3, #2
 8002376:	d146      	bne.n	8002406 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002378:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800237a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237e:	2b00      	cmp	r3, #0
 8002380:	d141      	bne.n	8002406 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238a:	b29b      	uxth	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4413      	add	r3, r2
 8002396:	3302      	adds	r3, #2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	687a      	ldr	r2, [r7, #4]
 800239c:	6812      	ldr	r2, [r2, #0]
 800239e:	4413      	add	r3, r2
 80023a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a4:	881b      	ldrh	r3, [r3, #0]
 80023a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023aa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80023ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ae:	699a      	ldr	r2, [r3, #24]
 80023b0:	8bfb      	ldrh	r3, [r7, #30]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d906      	bls.n	80023c4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b8:	699a      	ldr	r2, [r3, #24]
 80023ba:	8bfb      	ldrh	r3, [r7, #30]
 80023bc:	1ad2      	subs	r2, r2, r3
 80023be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c0:	619a      	str	r2, [r3, #24]
 80023c2:	e002      	b.n	80023ca <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80023c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c6:	2200      	movs	r2, #0
 80023c8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80023ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023cc:	699b      	ldr	r3, [r3, #24]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d106      	bne.n	80023e0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80023d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	4619      	mov	r1, r3
 80023d8:	6878      	ldr	r0, [r7, #4]
 80023da:	f007 f95c 	bl	8009696 <HAL_PCD_DataInStageCallback>
 80023de:	e018      	b.n	8002412 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80023e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e2:	695a      	ldr	r2, [r3, #20]
 80023e4:	8bfb      	ldrh	r3, [r7, #30]
 80023e6:	441a      	add	r2, r3
 80023e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ea:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80023ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ee:	69da      	ldr	r2, [r3, #28]
 80023f0:	8bfb      	ldrh	r3, [r7, #30]
 80023f2:	441a      	add	r2, r3
 80023f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023f6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80023fe:	4618      	mov	r0, r3
 8002400:	f002 fc34 	bl	8004c6c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002404:	e005      	b.n	8002412 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002406:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002408:	461a      	mov	r2, r3
 800240a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800240c:	6878      	ldr	r0, [r7, #4]
 800240e:	f000 f91b 	bl	8002648 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800241a:	b29b      	uxth	r3, r3
 800241c:	b21b      	sxth	r3, r3
 800241e:	2b00      	cmp	r3, #0
 8002420:	f6ff ad0a 	blt.w	8001e38 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002424:	2300      	movs	r3, #0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3738      	adds	r7, #56	; 0x38
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800242e:	b580      	push	{r7, lr}
 8002430:	b088      	sub	sp, #32
 8002432:	af00      	add	r7, sp, #0
 8002434:	60f8      	str	r0, [r7, #12]
 8002436:	60b9      	str	r1, [r7, #8]
 8002438:	4613      	mov	r3, r2
 800243a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800243c:	88fb      	ldrh	r3, [r7, #6]
 800243e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002442:	2b00      	cmp	r3, #0
 8002444:	d07e      	beq.n	8002544 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	00db      	lsls	r3, r3, #3
 8002458:	4413      	add	r3, r2
 800245a:	3302      	adds	r3, #2
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	68fa      	ldr	r2, [r7, #12]
 8002460:	6812      	ldr	r2, [r2, #0]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	699a      	ldr	r2, [r3, #24]
 8002474:	8b7b      	ldrh	r3, [r7, #26]
 8002476:	429a      	cmp	r2, r3
 8002478:	d306      	bcc.n	8002488 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	699a      	ldr	r2, [r3, #24]
 800247e:	8b7b      	ldrh	r3, [r7, #26]
 8002480:	1ad2      	subs	r2, r2, r3
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	619a      	str	r2, [r3, #24]
 8002486:	e002      	b.n	800248e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	699b      	ldr	r3, [r3, #24]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d123      	bne.n	80024de <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	461a      	mov	r2, r3
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	009b      	lsls	r3, r3, #2
 80024a2:	4413      	add	r3, r2
 80024a4:	881b      	ldrh	r3, [r3, #0]
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80024ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024b0:	833b      	strh	r3, [r7, #24]
 80024b2:	8b3b      	ldrh	r3, [r7, #24]
 80024b4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80024b8:	833b      	strh	r3, [r7, #24]
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	68bb      	ldr	r3, [r7, #8]
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	441a      	add	r2, r3
 80024c8:	8b3b      	ldrh	r3, [r7, #24]
 80024ca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024ce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80024d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024da:	b29b      	uxth	r3, r3
 80024dc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80024de:	88fb      	ldrh	r3, [r7, #6]
 80024e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d01f      	beq.n	8002528 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	461a      	mov	r2, r3
 80024ee:	68bb      	ldr	r3, [r7, #8]
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	009b      	lsls	r3, r3, #2
 80024f4:	4413      	add	r3, r2
 80024f6:	881b      	ldrh	r3, [r3, #0]
 80024f8:	b29b      	uxth	r3, r3
 80024fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002502:	82fb      	strh	r3, [r7, #22]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	461a      	mov	r2, r3
 800250a:	68bb      	ldr	r3, [r7, #8]
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	009b      	lsls	r3, r3, #2
 8002510:	441a      	add	r2, r3
 8002512:	8afb      	ldrh	r3, [r7, #22]
 8002514:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002518:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800251c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002520:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002524:	b29b      	uxth	r3, r3
 8002526:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002528:	8b7b      	ldrh	r3, [r7, #26]
 800252a:	2b00      	cmp	r3, #0
 800252c:	f000 8087 	beq.w	800263e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6959      	ldr	r1, [r3, #20]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	891a      	ldrh	r2, [r3, #8]
 800253c:	8b7b      	ldrh	r3, [r7, #26]
 800253e:	f004 fb50 	bl	8006be2 <USB_ReadPMA>
 8002542:	e07c      	b.n	800263e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800254c:	b29b      	uxth	r3, r3
 800254e:	461a      	mov	r2, r3
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	00db      	lsls	r3, r3, #3
 8002556:	4413      	add	r3, r2
 8002558:	3306      	adds	r3, #6
 800255a:	005b      	lsls	r3, r3, #1
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	4413      	add	r3, r2
 8002562:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800256c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	699a      	ldr	r2, [r3, #24]
 8002572:	8b7b      	ldrh	r3, [r7, #26]
 8002574:	429a      	cmp	r2, r3
 8002576:	d306      	bcc.n	8002586 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	699a      	ldr	r2, [r3, #24]
 800257c:	8b7b      	ldrh	r3, [r7, #26]
 800257e:	1ad2      	subs	r2, r2, r3
 8002580:	68bb      	ldr	r3, [r7, #8]
 8002582:	619a      	str	r2, [r3, #24]
 8002584:	e002      	b.n	800258c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	2200      	movs	r2, #0
 800258a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d123      	bne.n	80025dc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	461a      	mov	r2, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	781b      	ldrb	r3, [r3, #0]
 800259e:	009b      	lsls	r3, r3, #2
 80025a0:	4413      	add	r3, r2
 80025a2:	881b      	ldrh	r3, [r3, #0]
 80025a4:	b29b      	uxth	r3, r3
 80025a6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80025aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80025ae:	83fb      	strh	r3, [r7, #30]
 80025b0:	8bfb      	ldrh	r3, [r7, #30]
 80025b2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80025b6:	83fb      	strh	r3, [r7, #30]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	441a      	add	r2, r3
 80025c6:	8bfb      	ldrh	r3, [r7, #30]
 80025c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80025cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80025d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80025d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025d8:	b29b      	uxth	r3, r3
 80025da:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80025dc:	88fb      	ldrh	r3, [r7, #6]
 80025de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d11f      	bne.n	8002626 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	461a      	mov	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	781b      	ldrb	r3, [r3, #0]
 80025f0:	009b      	lsls	r3, r3, #2
 80025f2:	4413      	add	r3, r2
 80025f4:	881b      	ldrh	r3, [r3, #0]
 80025f6:	b29b      	uxth	r3, r3
 80025f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80025fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002600:	83bb      	strh	r3, [r7, #28]
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	461a      	mov	r2, r3
 8002608:	68bb      	ldr	r3, [r7, #8]
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	441a      	add	r2, r3
 8002610:	8bbb      	ldrh	r3, [r7, #28]
 8002612:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002616:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800261a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800261e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002622:	b29b      	uxth	r3, r3
 8002624:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002626:	8b7b      	ldrh	r3, [r7, #26]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6818      	ldr	r0, [r3, #0]
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	6959      	ldr	r1, [r3, #20]
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	895a      	ldrh	r2, [r3, #10]
 8002638:	8b7b      	ldrh	r3, [r7, #26]
 800263a:	f004 fad2 	bl	8006be2 <USB_ReadPMA>
    }
  }

  return count;
 800263e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002640:	4618      	mov	r0, r3
 8002642:	3720      	adds	r7, #32
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b0a2      	sub	sp, #136	; 0x88
 800264c:	af00      	add	r7, sp, #0
 800264e:	60f8      	str	r0, [r7, #12]
 8002650:	60b9      	str	r1, [r7, #8]
 8002652:	4613      	mov	r3, r2
 8002654:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002656:	88fb      	ldrh	r3, [r7, #6]
 8002658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 81c7 	beq.w	80029f0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800266a:	b29b      	uxth	r3, r3
 800266c:	461a      	mov	r2, r3
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00db      	lsls	r3, r3, #3
 8002674:	4413      	add	r3, r2
 8002676:	3302      	adds	r3, #2
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	6812      	ldr	r2, [r2, #0]
 800267e:	4413      	add	r3, r2
 8002680:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800268a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 800268e:	68bb      	ldr	r3, [r7, #8]
 8002690:	699a      	ldr	r2, [r3, #24]
 8002692:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002696:	429a      	cmp	r2, r3
 8002698:	d907      	bls.n	80026aa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	699a      	ldr	r2, [r3, #24]
 800269e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026a2:	1ad2      	subs	r2, r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	619a      	str	r2, [r3, #24]
 80026a8:	e002      	b.n	80026b0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2200      	movs	r2, #0
 80026ae:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80026b0:	68bb      	ldr	r3, [r7, #8]
 80026b2:	699b      	ldr	r3, [r3, #24]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	f040 80b9 	bne.w	800282c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	785b      	ldrb	r3, [r3, #1]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d126      	bne.n	8002710 <HAL_PCD_EP_DB_Transmit+0xc8>
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026d0:	b29b      	uxth	r3, r3
 80026d2:	461a      	mov	r2, r3
 80026d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026d6:	4413      	add	r3, r2
 80026d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	011a      	lsls	r2, r3, #4
 80026e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e2:	4413      	add	r3, r2
 80026e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80026e8:	627b      	str	r3, [r7, #36]	; 0x24
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	881b      	ldrh	r3, [r3, #0]
 80026ee:	b29b      	uxth	r3, r3
 80026f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80026f4:	b29a      	uxth	r2, r3
 80026f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026f8:	801a      	strh	r2, [r3, #0]
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	881b      	ldrh	r3, [r3, #0]
 80026fe:	b29b      	uxth	r3, r3
 8002700:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002704:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002708:	b29a      	uxth	r2, r3
 800270a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800270c:	801a      	strh	r2, [r3, #0]
 800270e:	e01a      	b.n	8002746 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	785b      	ldrb	r3, [r3, #1]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d116      	bne.n	8002746 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	633b      	str	r3, [r7, #48]	; 0x30
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002726:	b29b      	uxth	r3, r3
 8002728:	461a      	mov	r2, r3
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	4413      	add	r3, r2
 800272e:	633b      	str	r3, [r7, #48]	; 0x30
 8002730:	68bb      	ldr	r3, [r7, #8]
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	011a      	lsls	r2, r3, #4
 8002736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002738:	4413      	add	r3, r2
 800273a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800273e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002742:	2200      	movs	r2, #0
 8002744:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	623b      	str	r3, [r7, #32]
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	785b      	ldrb	r3, [r3, #1]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d126      	bne.n	80027a2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	61bb      	str	r3, [r7, #24]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002762:	b29b      	uxth	r3, r3
 8002764:	461a      	mov	r2, r3
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	4413      	add	r3, r2
 800276a:	61bb      	str	r3, [r7, #24]
 800276c:	68bb      	ldr	r3, [r7, #8]
 800276e:	781b      	ldrb	r3, [r3, #0]
 8002770:	011a      	lsls	r2, r3, #4
 8002772:	69bb      	ldr	r3, [r7, #24]
 8002774:	4413      	add	r3, r2
 8002776:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800277a:	617b      	str	r3, [r7, #20]
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	881b      	ldrh	r3, [r3, #0]
 8002780:	b29b      	uxth	r3, r3
 8002782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002786:	b29a      	uxth	r2, r3
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	801a      	strh	r2, [r3, #0]
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	881b      	ldrh	r3, [r3, #0]
 8002790:	b29b      	uxth	r3, r3
 8002792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800279a:	b29a      	uxth	r2, r3
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	801a      	strh	r2, [r3, #0]
 80027a0:	e017      	b.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027a2:	68bb      	ldr	r3, [r7, #8]
 80027a4:	785b      	ldrb	r3, [r3, #1]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	d113      	bne.n	80027d2 <HAL_PCD_EP_DB_Transmit+0x18a>
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b2:	b29b      	uxth	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	4413      	add	r3, r2
 80027ba:	623b      	str	r3, [r7, #32]
 80027bc:	68bb      	ldr	r3, [r7, #8]
 80027be:	781b      	ldrb	r3, [r3, #0]
 80027c0:	011a      	lsls	r2, r3, #4
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	4413      	add	r3, r2
 80027c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027ca:	61fb      	str	r3, [r7, #28]
 80027cc:	69fb      	ldr	r3, [r7, #28]
 80027ce:	2200      	movs	r2, #0
 80027d0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80027d2:	68bb      	ldr	r3, [r7, #8]
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	4619      	mov	r1, r3
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f006 ff5c 	bl	8009696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027de:	88fb      	ldrh	r3, [r7, #6]
 80027e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 82d4 	beq.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	461a      	mov	r2, r3
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	009b      	lsls	r3, r3, #2
 80027f6:	4413      	add	r3, r2
 80027f8:	881b      	ldrh	r3, [r3, #0]
 80027fa:	b29b      	uxth	r3, r3
 80027fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002800:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002804:	827b      	strh	r3, [r7, #18]
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	441a      	add	r2, r3
 8002814:	8a7b      	ldrh	r3, [r7, #18]
 8002816:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800281a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800281e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002822:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002826:	b29b      	uxth	r3, r3
 8002828:	8013      	strh	r3, [r2, #0]
 800282a:	e2b2      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800282c:	88fb      	ldrh	r3, [r7, #6]
 800282e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d021      	beq.n	800287a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	4413      	add	r3, r2
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	b29b      	uxth	r3, r3
 8002848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800284c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002850:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	441a      	add	r2, r3
 8002862:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002866:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800286a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800286e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002872:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002876:	b29b      	uxth	r3, r3
 8002878:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002880:	2b01      	cmp	r3, #1
 8002882:	f040 8286 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002886:	68bb      	ldr	r3, [r7, #8]
 8002888:	695a      	ldr	r2, [r3, #20]
 800288a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800288e:	441a      	add	r2, r3
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002894:	68bb      	ldr	r3, [r7, #8]
 8002896:	69da      	ldr	r2, [r3, #28]
 8002898:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800289c:	441a      	add	r2, r3
 800289e:	68bb      	ldr	r3, [r7, #8]
 80028a0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80028a2:	68bb      	ldr	r3, [r7, #8]
 80028a4:	6a1a      	ldr	r2, [r3, #32]
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	429a      	cmp	r2, r3
 80028ac:	d309      	bcc.n	80028c2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80028ae:	68bb      	ldr	r3, [r7, #8]
 80028b0:	691b      	ldr	r3, [r3, #16]
 80028b2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80028b4:	68bb      	ldr	r3, [r7, #8]
 80028b6:	6a1a      	ldr	r2, [r3, #32]
 80028b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80028ba:	1ad2      	subs	r2, r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	621a      	str	r2, [r3, #32]
 80028c0:	e015      	b.n	80028ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	6a1b      	ldr	r3, [r3, #32]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d107      	bne.n	80028da <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 80028ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028ce:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 80028d0:	68bb      	ldr	r3, [r7, #8]
 80028d2:	2200      	movs	r2, #0
 80028d4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80028d8:	e009      	b.n	80028ee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	2200      	movs	r2, #0
 80028de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80028e2:	68bb      	ldr	r3, [r7, #8]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80028ee:	68bb      	ldr	r3, [r7, #8]
 80028f0:	785b      	ldrb	r3, [r3, #1]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d155      	bne.n	80029a2 <HAL_PCD_EP_DB_Transmit+0x35a>
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	63bb      	str	r3, [r7, #56]	; 0x38
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002904:	b29b      	uxth	r3, r3
 8002906:	461a      	mov	r2, r3
 8002908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290a:	4413      	add	r3, r2
 800290c:	63bb      	str	r3, [r7, #56]	; 0x38
 800290e:	68bb      	ldr	r3, [r7, #8]
 8002910:	781b      	ldrb	r3, [r3, #0]
 8002912:	011a      	lsls	r2, r3, #4
 8002914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002916:	4413      	add	r3, r2
 8002918:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800291c:	637b      	str	r3, [r7, #52]	; 0x34
 800291e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002920:	2b00      	cmp	r3, #0
 8002922:	d112      	bne.n	800294a <HAL_PCD_EP_DB_Transmit+0x302>
 8002924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002926:	881b      	ldrh	r3, [r3, #0]
 8002928:	b29b      	uxth	r3, r3
 800292a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800292e:	b29a      	uxth	r2, r3
 8002930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002932:	801a      	strh	r2, [r3, #0]
 8002934:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	b29b      	uxth	r3, r3
 800293a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800293e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002942:	b29a      	uxth	r2, r3
 8002944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002946:	801a      	strh	r2, [r3, #0]
 8002948:	e047      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x392>
 800294a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800294c:	2b3e      	cmp	r3, #62	; 0x3e
 800294e:	d811      	bhi.n	8002974 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002950:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	64bb      	str	r3, [r7, #72]	; 0x48
 8002956:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002958:	f003 0301 	and.w	r3, r3, #1
 800295c:	2b00      	cmp	r3, #0
 800295e:	d002      	beq.n	8002966 <HAL_PCD_EP_DB_Transmit+0x31e>
 8002960:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002962:	3301      	adds	r3, #1
 8002964:	64bb      	str	r3, [r7, #72]	; 0x48
 8002966:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002968:	b29b      	uxth	r3, r3
 800296a:	029b      	lsls	r3, r3, #10
 800296c:	b29a      	uxth	r2, r3
 800296e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002970:	801a      	strh	r2, [r3, #0]
 8002972:	e032      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x392>
 8002974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	64bb      	str	r3, [r7, #72]	; 0x48
 800297a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800297c:	f003 031f 	and.w	r3, r3, #31
 8002980:	2b00      	cmp	r3, #0
 8002982:	d102      	bne.n	800298a <HAL_PCD_EP_DB_Transmit+0x342>
 8002984:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002986:	3b01      	subs	r3, #1
 8002988:	64bb      	str	r3, [r7, #72]	; 0x48
 800298a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800298c:	b29b      	uxth	r3, r3
 800298e:	029b      	lsls	r3, r3, #10
 8002990:	b29b      	uxth	r3, r3
 8002992:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002996:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800299a:	b29a      	uxth	r2, r3
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	801a      	strh	r2, [r3, #0]
 80029a0:	e01b      	b.n	80029da <HAL_PCD_EP_DB_Transmit+0x392>
 80029a2:	68bb      	ldr	r3, [r7, #8]
 80029a4:	785b      	ldrb	r3, [r3, #1]
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d117      	bne.n	80029da <HAL_PCD_EP_DB_Transmit+0x392>
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	643b      	str	r3, [r7, #64]	; 0x40
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029b8:	b29b      	uxth	r3, r3
 80029ba:	461a      	mov	r2, r3
 80029bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029be:	4413      	add	r3, r2
 80029c0:	643b      	str	r3, [r7, #64]	; 0x40
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	011a      	lsls	r2, r3, #4
 80029c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80029ca:	4413      	add	r3, r2
 80029cc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80029d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80029d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80029d8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6818      	ldr	r0, [r3, #0]
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	891a      	ldrh	r2, [r3, #8]
 80029e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	f004 f8b5 	bl	8006b58 <USB_WritePMA>
 80029ee:	e1d0      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	461a      	mov	r2, r3
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	781b      	ldrb	r3, [r3, #0]
 8002a00:	00db      	lsls	r3, r3, #3
 8002a02:	4413      	add	r3, r2
 8002a04:	3306      	adds	r3, #6
 8002a06:	005b      	lsls	r3, r3, #1
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	6812      	ldr	r2, [r2, #0]
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002a12:	881b      	ldrh	r3, [r3, #0]
 8002a14:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002a18:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	699a      	ldr	r2, [r3, #24]
 8002a20:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d307      	bcc.n	8002a38 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	699a      	ldr	r2, [r3, #24]
 8002a2c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a30:	1ad2      	subs	r2, r2, r3
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	619a      	str	r2, [r3, #24]
 8002a36:	e002      	b.n	8002a3e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	699b      	ldr	r3, [r3, #24]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f040 80c4 	bne.w	8002bd0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	785b      	ldrb	r3, [r3, #1]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d126      	bne.n	8002a9e <HAL_PCD_EP_DB_Transmit+0x456>
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a64:	4413      	add	r3, r2
 8002a66:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	011a      	lsls	r2, r3, #4
 8002a6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a70:	4413      	add	r3, r2
 8002a72:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002a76:	66bb      	str	r3, [r7, #104]	; 0x68
 8002a78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a7a:	881b      	ldrh	r3, [r3, #0]
 8002a7c:	b29b      	uxth	r3, r3
 8002a7e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a82:	b29a      	uxth	r2, r3
 8002a84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	b29b      	uxth	r3, r3
 8002a8e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a92:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a96:	b29a      	uxth	r2, r3
 8002a98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a9a:	801a      	strh	r2, [r3, #0]
 8002a9c:	e01a      	b.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	785b      	ldrb	r3, [r3, #1]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d116      	bne.n	8002ad4 <HAL_PCD_EP_DB_Transmit+0x48c>
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	677b      	str	r3, [r7, #116]	; 0x74
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002ab4:	b29b      	uxth	r3, r3
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aba:	4413      	add	r3, r2
 8002abc:	677b      	str	r3, [r7, #116]	; 0x74
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	781b      	ldrb	r3, [r3, #0]
 8002ac2:	011a      	lsls	r2, r3, #4
 8002ac4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002acc:	673b      	str	r3, [r7, #112]	; 0x70
 8002ace:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	785b      	ldrb	r3, [r3, #1]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d12f      	bne.n	8002b42 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	461a      	mov	r2, r3
 8002af6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002afa:	4413      	add	r3, r2
 8002afc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	011a      	lsls	r2, r3, #4
 8002b06:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002b0a:	4413      	add	r3, r2
 8002b0c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b10:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b14:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b26:	801a      	strh	r2, [r3, #0]
 8002b28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b2c:	881b      	ldrh	r3, [r3, #0]
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b34:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b38:	b29a      	uxth	r2, r3
 8002b3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002b3e:	801a      	strh	r2, [r3, #0]
 8002b40:	e017      	b.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	785b      	ldrb	r3, [r3, #1]
 8002b46:	2b01      	cmp	r3, #1
 8002b48:	d113      	bne.n	8002b72 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	461a      	mov	r2, r3
 8002b56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b58:	4413      	add	r3, r2
 8002b5a:	67bb      	str	r3, [r7, #120]	; 0x78
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	011a      	lsls	r2, r3, #4
 8002b62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002b64:	4413      	add	r3, r2
 8002b66:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b6a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002b6c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002b6e:	2200      	movs	r2, #0
 8002b70:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	4619      	mov	r1, r3
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f006 fd8c 	bl	8009696 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002b7e:	88fb      	ldrh	r3, [r7, #6]
 8002b80:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	f040 8104 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	4413      	add	r3, r2
 8002b98:	881b      	ldrh	r3, [r3, #0]
 8002b9a:	b29b      	uxth	r3, r3
 8002b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ba0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	781b      	ldrb	r3, [r3, #0]
 8002bb2:	009b      	lsls	r3, r3, #2
 8002bb4:	441a      	add	r2, r3
 8002bb6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002bba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bca:	b29b      	uxth	r3, r3
 8002bcc:	8013      	strh	r3, [r2, #0]
 8002bce:	e0e0      	b.n	8002d92 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002bd0:	88fb      	ldrh	r3, [r7, #6]
 8002bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d121      	bne.n	8002c1e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	461a      	mov	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	009b      	lsls	r3, r3, #2
 8002be6:	4413      	add	r3, r2
 8002be8:	881b      	ldrh	r3, [r3, #0]
 8002bea:	b29b      	uxth	r3, r3
 8002bec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bf4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	68bb      	ldr	r3, [r7, #8]
 8002c00:	781b      	ldrb	r3, [r3, #0]
 8002c02:	009b      	lsls	r3, r3, #2
 8002c04:	441a      	add	r2, r3
 8002c06:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002c0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002c16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1a:	b29b      	uxth	r3, r3
 8002c1c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	f040 80b4 	bne.w	8002d92 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	695a      	ldr	r2, [r3, #20]
 8002c2e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c32:	441a      	add	r2, r3
 8002c34:	68bb      	ldr	r3, [r7, #8]
 8002c36:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c40:	441a      	add	r2, r3
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c46:	68bb      	ldr	r3, [r7, #8]
 8002c48:	6a1a      	ldr	r2, [r3, #32]
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	429a      	cmp	r2, r3
 8002c50:	d309      	bcc.n	8002c66 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	691b      	ldr	r3, [r3, #16]
 8002c56:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	6a1a      	ldr	r2, [r3, #32]
 8002c5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c5e:	1ad2      	subs	r2, r2, r3
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	621a      	str	r2, [r3, #32]
 8002c64:	e015      	b.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	6a1b      	ldr	r3, [r3, #32]
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d107      	bne.n	8002c7e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002c6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c72:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c7c:	e009      	b.n	8002c92 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002c7e:	68bb      	ldr	r3, [r7, #8]
 8002c80:	6a1b      	ldr	r3, [r3, #32]
 8002c82:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	2200      	movs	r2, #0
 8002c88:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002c8a:	68bb      	ldr	r3, [r7, #8]
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	667b      	str	r3, [r7, #100]	; 0x64
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	785b      	ldrb	r3, [r3, #1]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d155      	bne.n	8002d4c <HAL_PCD_EP_DB_Transmit+0x704>
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002cae:	b29b      	uxth	r3, r3
 8002cb0:	461a      	mov	r2, r3
 8002cb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cb4:	4413      	add	r3, r2
 8002cb6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	011a      	lsls	r2, r3, #4
 8002cbe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002cc6:	65bb      	str	r3, [r7, #88]	; 0x58
 8002cc8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d112      	bne.n	8002cf4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002cce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cdc:	801a      	strh	r2, [r3, #0]
 8002cde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002ce0:	881b      	ldrh	r3, [r3, #0]
 8002ce2:	b29b      	uxth	r3, r3
 8002ce4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002ce8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002cf0:	801a      	strh	r2, [r3, #0]
 8002cf2:	e044      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x736>
 8002cf4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf6:	2b3e      	cmp	r3, #62	; 0x3e
 8002cf8:	d811      	bhi.n	8002d1e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cfc:	085b      	lsrs	r3, r3, #1
 8002cfe:	657b      	str	r3, [r7, #84]	; 0x54
 8002d00:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d02:	f003 0301 	and.w	r3, r3, #1
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d002      	beq.n	8002d10 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002d0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	657b      	str	r3, [r7, #84]	; 0x54
 8002d10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	029b      	lsls	r3, r3, #10
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d1a:	801a      	strh	r2, [r3, #0]
 8002d1c:	e02f      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x736>
 8002d1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d20:	095b      	lsrs	r3, r3, #5
 8002d22:	657b      	str	r3, [r7, #84]	; 0x54
 8002d24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d26:	f003 031f 	and.w	r3, r3, #31
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d102      	bne.n	8002d34 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002d2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d30:	3b01      	subs	r3, #1
 8002d32:	657b      	str	r3, [r7, #84]	; 0x54
 8002d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	029b      	lsls	r3, r3, #10
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002d40:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002d44:	b29a      	uxth	r2, r3
 8002d46:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002d48:	801a      	strh	r2, [r3, #0]
 8002d4a:	e018      	b.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x736>
 8002d4c:	68bb      	ldr	r3, [r7, #8]
 8002d4e:	785b      	ldrb	r3, [r3, #1]
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d114      	bne.n	8002d7e <HAL_PCD_EP_DB_Transmit+0x736>
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d5c:	b29b      	uxth	r3, r3
 8002d5e:	461a      	mov	r2, r3
 8002d60:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d62:	4413      	add	r3, r2
 8002d64:	667b      	str	r3, [r7, #100]	; 0x64
 8002d66:	68bb      	ldr	r3, [r7, #8]
 8002d68:	781b      	ldrb	r3, [r3, #0]
 8002d6a:	011a      	lsls	r2, r3, #4
 8002d6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d6e:	4413      	add	r3, r2
 8002d70:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002d74:	663b      	str	r3, [r7, #96]	; 0x60
 8002d76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d7c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	6818      	ldr	r0, [r3, #0]
 8002d82:	68bb      	ldr	r3, [r7, #8]
 8002d84:	6959      	ldr	r1, [r3, #20]
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	895a      	ldrh	r2, [r3, #10]
 8002d8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	f003 fee3 	bl	8006b58 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	68bb      	ldr	r3, [r7, #8]
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	4413      	add	r3, r2
 8002da0:	881b      	ldrh	r3, [r3, #0]
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002da8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002dac:	823b      	strh	r3, [r7, #16]
 8002dae:	8a3b      	ldrh	r3, [r7, #16]
 8002db0:	f083 0310 	eor.w	r3, r3, #16
 8002db4:	823b      	strh	r3, [r7, #16]
 8002db6:	8a3b      	ldrh	r3, [r7, #16]
 8002db8:	f083 0320 	eor.w	r3, r3, #32
 8002dbc:	823b      	strh	r3, [r7, #16]
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	461a      	mov	r2, r3
 8002dc4:	68bb      	ldr	r3, [r7, #8]
 8002dc6:	781b      	ldrb	r3, [r3, #0]
 8002dc8:	009b      	lsls	r3, r3, #2
 8002dca:	441a      	add	r2, r3
 8002dcc:	8a3b      	ldrh	r3, [r7, #16]
 8002dce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002dd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002dd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	3788      	adds	r7, #136	; 0x88
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bd80      	pop	{r7, pc}

08002dec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b087      	sub	sp, #28
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	607b      	str	r3, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	817b      	strh	r3, [r7, #10]
 8002dfa:	4613      	mov	r3, r2
 8002dfc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	b29b      	uxth	r3, r3
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d00b      	beq.n	8002e22 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e0a:	897b      	ldrh	r3, [r7, #10]
 8002e0c:	f003 0307 	and.w	r3, r3, #7
 8002e10:	1c5a      	adds	r2, r3, #1
 8002e12:	4613      	mov	r3, r2
 8002e14:	009b      	lsls	r3, r3, #2
 8002e16:	4413      	add	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	68fa      	ldr	r2, [r7, #12]
 8002e1c:	4413      	add	r3, r2
 8002e1e:	617b      	str	r3, [r7, #20]
 8002e20:	e009      	b.n	8002e36 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002e22:	897a      	ldrh	r2, [r7, #10]
 8002e24:	4613      	mov	r3, r2
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	4413      	add	r3, r2
 8002e2a:	00db      	lsls	r3, r3, #3
 8002e2c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002e30:	68fa      	ldr	r2, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002e36:	893b      	ldrh	r3, [r7, #8]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d107      	bne.n	8002e4c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002e3c:	697b      	ldr	r3, [r7, #20]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	b29a      	uxth	r2, r3
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	80da      	strh	r2, [r3, #6]
 8002e4a:	e00b      	b.n	8002e64 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2201      	movs	r2, #1
 8002e50:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	0c1b      	lsrs	r3, r3, #16
 8002e5e:	b29a      	uxth	r2, r3
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002e64:	2300      	movs	r3, #0
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	371c      	adds	r7, #28
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	bc80      	pop	{r7}
 8002e6e:	4770      	bx	lr

08002e70 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b086      	sub	sp, #24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d101      	bne.n	8002e82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e7e:	2301      	movs	r3, #1
 8002e80:	e272      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	f000 8087 	beq.w	8002f9e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002e90:	4b92      	ldr	r3, [pc, #584]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 030c 	and.w	r3, r3, #12
 8002e98:	2b04      	cmp	r3, #4
 8002e9a:	d00c      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002e9c:	4b8f      	ldr	r3, [pc, #572]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 030c 	and.w	r3, r3, #12
 8002ea4:	2b08      	cmp	r3, #8
 8002ea6:	d112      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
 8002ea8:	4b8c      	ldr	r3, [pc, #560]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eb4:	d10b      	bne.n	8002ece <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eb6:	4b89      	ldr	r3, [pc, #548]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d06c      	beq.n	8002f9c <HAL_RCC_OscConfig+0x12c>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d168      	bne.n	8002f9c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e24c      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ed6:	d106      	bne.n	8002ee6 <HAL_RCC_OscConfig+0x76>
 8002ed8:	4b80      	ldr	r3, [pc, #512]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7f      	ldr	r2, [pc, #508]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ede:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002ee2:	6013      	str	r3, [r2, #0]
 8002ee4:	e02e      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d10c      	bne.n	8002f08 <HAL_RCC_OscConfig+0x98>
 8002eee:	4b7b      	ldr	r3, [pc, #492]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	4a7a      	ldr	r2, [pc, #488]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ef4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ef8:	6013      	str	r3, [r2, #0]
 8002efa:	4b78      	ldr	r3, [pc, #480]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a77      	ldr	r2, [pc, #476]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f04:	6013      	str	r3, [r2, #0]
 8002f06:	e01d      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002f10:	d10c      	bne.n	8002f2c <HAL_RCC_OscConfig+0xbc>
 8002f12:	4b72      	ldr	r3, [pc, #456]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a71      	ldr	r2, [pc, #452]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002f1c:	6013      	str	r3, [r2, #0]
 8002f1e:	4b6f      	ldr	r3, [pc, #444]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a6e      	ldr	r2, [pc, #440]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f28:	6013      	str	r3, [r2, #0]
 8002f2a:	e00b      	b.n	8002f44 <HAL_RCC_OscConfig+0xd4>
 8002f2c:	4b6b      	ldr	r3, [pc, #428]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	4a6a      	ldr	r2, [pc, #424]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	4b68      	ldr	r3, [pc, #416]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a67      	ldr	r2, [pc, #412]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002f42:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d013      	beq.n	8002f74 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f4c:	f7fd fdd8 	bl	8000b00 <HAL_GetTick>
 8002f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f52:	e008      	b.n	8002f66 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f54:	f7fd fdd4 	bl	8000b00 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	693b      	ldr	r3, [r7, #16]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b64      	cmp	r3, #100	; 0x64
 8002f60:	d901      	bls.n	8002f66 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f62:	2303      	movs	r3, #3
 8002f64:	e200      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f66:	4b5d      	ldr	r3, [pc, #372]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d0f0      	beq.n	8002f54 <HAL_RCC_OscConfig+0xe4>
 8002f72:	e014      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f74:	f7fd fdc4 	bl	8000b00 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f7c:	f7fd fdc0 	bl	8000b00 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b64      	cmp	r3, #100	; 0x64
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e1ec      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f8e:	4b53      	ldr	r3, [pc, #332]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x10c>
 8002f9a:	e000      	b.n	8002f9e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0302 	and.w	r3, r3, #2
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d063      	beq.n	8003072 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002faa:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f003 030c 	and.w	r3, r3, #12
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00b      	beq.n	8002fce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fb6:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f003 030c 	and.w	r3, r3, #12
 8002fbe:	2b08      	cmp	r3, #8
 8002fc0:	d11c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
 8002fc2:	4b46      	ldr	r3, [pc, #280]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	685b      	ldr	r3, [r3, #4]
 8002fc6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d116      	bne.n	8002ffc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002fce:	4b43      	ldr	r3, [pc, #268]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d005      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	691b      	ldr	r3, [r3, #16]
 8002fde:	2b01      	cmp	r3, #1
 8002fe0:	d001      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002fe2:	2301      	movs	r3, #1
 8002fe4:	e1c0      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fe6:	4b3d      	ldr	r3, [pc, #244]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	00db      	lsls	r3, r3, #3
 8002ff4:	4939      	ldr	r1, [pc, #228]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ffa:	e03a      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d020      	beq.n	8003046 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003004:	4b36      	ldr	r3, [pc, #216]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003006:	2201      	movs	r2, #1
 8003008:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800300a:	f7fd fd79 	bl	8000b00 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003012:	f7fd fd75 	bl	8000b00 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e1a1      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003024:	4b2d      	ldr	r3, [pc, #180]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003030:	4b2a      	ldr	r3, [pc, #168]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	695b      	ldr	r3, [r3, #20]
 800303c:	00db      	lsls	r3, r3, #3
 800303e:	4927      	ldr	r1, [pc, #156]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003040:	4313      	orrs	r3, r2
 8003042:	600b      	str	r3, [r1, #0]
 8003044:	e015      	b.n	8003072 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <HAL_RCC_OscConfig+0x270>)
 8003048:	2200      	movs	r2, #0
 800304a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800304c:	f7fd fd58 	bl	8000b00 <HAL_GetTick>
 8003050:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003052:	e008      	b.n	8003066 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003054:	f7fd fd54 	bl	8000b00 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	2b02      	cmp	r3, #2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e180      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003066:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1f0      	bne.n	8003054 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f003 0308 	and.w	r3, r3, #8
 800307a:	2b00      	cmp	r3, #0
 800307c:	d03a      	beq.n	80030f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	699b      	ldr	r3, [r3, #24]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d019      	beq.n	80030ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 8003088:	2201      	movs	r2, #1
 800308a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800308c:	f7fd fd38 	bl	8000b00 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003094:	f7fd fd34 	bl	8000b00 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e160      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030a6:	4b0d      	ldr	r3, [pc, #52]	; (80030dc <HAL_RCC_OscConfig+0x26c>)
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0f0      	beq.n	8003094 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030b2:	2001      	movs	r0, #1
 80030b4:	f000 fb10 	bl	80036d8 <RCC_Delay>
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ba:	4b0a      	ldr	r3, [pc, #40]	; (80030e4 <HAL_RCC_OscConfig+0x274>)
 80030bc:	2200      	movs	r2, #0
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7fd fd1e 	bl	8000b00 <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030c6:	e00f      	b.n	80030e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7fd fd1a 	bl	8000b00 <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d908      	bls.n	80030e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e146      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	42420000 	.word	0x42420000
 80030e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030e8:	4b92      	ldr	r3, [pc, #584]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80030ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ec:	f003 0302 	and.w	r3, r3, #2
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d1e9      	bne.n	80030c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0304 	and.w	r3, r3, #4
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80a6 	beq.w	800324e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003102:	2300      	movs	r3, #0
 8003104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003106:	4b8b      	ldr	r3, [pc, #556]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	69db      	ldr	r3, [r3, #28]
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d10d      	bne.n	800312e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003112:	4b88      	ldr	r3, [pc, #544]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003114:	69db      	ldr	r3, [r3, #28]
 8003116:	4a87      	ldr	r2, [pc, #540]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003118:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800311c:	61d3      	str	r3, [r2, #28]
 800311e:	4b85      	ldr	r3, [pc, #532]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003126:	60bb      	str	r3, [r7, #8]
 8003128:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800312a:	2301      	movs	r3, #1
 800312c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800312e:	4b82      	ldr	r3, [pc, #520]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003136:	2b00      	cmp	r3, #0
 8003138:	d118      	bne.n	800316c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800313a:	4b7f      	ldr	r3, [pc, #508]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a7e      	ldr	r2, [pc, #504]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003140:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003144:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003146:	f7fd fcdb 	bl	8000b00 <HAL_GetTick>
 800314a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800314e:	f7fd fcd7 	bl	8000b00 <HAL_GetTick>
 8003152:	4602      	mov	r2, r0
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b64      	cmp	r3, #100	; 0x64
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e103      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003160:	4b75      	ldr	r3, [pc, #468]	; (8003338 <HAL_RCC_OscConfig+0x4c8>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003168:	2b00      	cmp	r3, #0
 800316a:	d0f0      	beq.n	800314e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	2b01      	cmp	r3, #1
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x312>
 8003174:	4b6f      	ldr	r3, [pc, #444]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	4a6e      	ldr	r2, [pc, #440]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800317a:	f043 0301 	orr.w	r3, r3, #1
 800317e:	6213      	str	r3, [r2, #32]
 8003180:	e02d      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68db      	ldr	r3, [r3, #12]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x334>
 800318a:	4b6a      	ldr	r3, [pc, #424]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	4a69      	ldr	r2, [pc, #420]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	f023 0301 	bic.w	r3, r3, #1
 8003194:	6213      	str	r3, [r2, #32]
 8003196:	4b67      	ldr	r3, [pc, #412]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	4a66      	ldr	r2, [pc, #408]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800319c:	f023 0304 	bic.w	r3, r3, #4
 80031a0:	6213      	str	r3, [r2, #32]
 80031a2:	e01c      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	2b05      	cmp	r3, #5
 80031aa:	d10c      	bne.n	80031c6 <HAL_RCC_OscConfig+0x356>
 80031ac:	4b61      	ldr	r3, [pc, #388]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	4a60      	ldr	r2, [pc, #384]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031b2:	f043 0304 	orr.w	r3, r3, #4
 80031b6:	6213      	str	r3, [r2, #32]
 80031b8:	4b5e      	ldr	r3, [pc, #376]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	4a5d      	ldr	r2, [pc, #372]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	6213      	str	r3, [r2, #32]
 80031c4:	e00b      	b.n	80031de <HAL_RCC_OscConfig+0x36e>
 80031c6:	4b5b      	ldr	r3, [pc, #364]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	4a5a      	ldr	r2, [pc, #360]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	f023 0301 	bic.w	r3, r3, #1
 80031d0:	6213      	str	r3, [r2, #32]
 80031d2:	4b58      	ldr	r3, [pc, #352]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031d4:	6a1b      	ldr	r3, [r3, #32]
 80031d6:	4a57      	ldr	r2, [pc, #348]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80031d8:	f023 0304 	bic.w	r3, r3, #4
 80031dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	68db      	ldr	r3, [r3, #12]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d015      	beq.n	8003212 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80031e6:	f7fd fc8b 	bl	8000b00 <HAL_GetTick>
 80031ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80031ec:	e00a      	b.n	8003204 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80031ee:	f7fd fc87 	bl	8000b00 <HAL_GetTick>
 80031f2:	4602      	mov	r2, r0
 80031f4:	693b      	ldr	r3, [r7, #16]
 80031f6:	1ad3      	subs	r3, r2, r3
 80031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e0b1      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003204:	4b4b      	ldr	r3, [pc, #300]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003206:	6a1b      	ldr	r3, [r3, #32]
 8003208:	f003 0302 	and.w	r3, r3, #2
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0ee      	beq.n	80031ee <HAL_RCC_OscConfig+0x37e>
 8003210:	e014      	b.n	800323c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003212:	f7fd fc75 	bl	8000b00 <HAL_GetTick>
 8003216:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800321a:	f7fd fc71 	bl	8000b00 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	693b      	ldr	r3, [r7, #16]
 8003222:	1ad3      	subs	r3, r2, r3
 8003224:	f241 3288 	movw	r2, #5000	; 0x1388
 8003228:	4293      	cmp	r3, r2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e09b      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003230:	4b40      	ldr	r3, [pc, #256]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003232:	6a1b      	ldr	r3, [r3, #32]
 8003234:	f003 0302 	and.w	r3, r3, #2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d1ee      	bne.n	800321a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800323c:	7dfb      	ldrb	r3, [r7, #23]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d105      	bne.n	800324e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003242:	4b3c      	ldr	r3, [pc, #240]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	69db      	ldr	r3, [r3, #28]
 8003246:	4a3b      	ldr	r2, [pc, #236]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800324c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	69db      	ldr	r3, [r3, #28]
 8003252:	2b00      	cmp	r3, #0
 8003254:	f000 8087 	beq.w	8003366 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003258:	4b36      	ldr	r3, [pc, #216]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f003 030c 	and.w	r3, r3, #12
 8003260:	2b08      	cmp	r3, #8
 8003262:	d061      	beq.n	8003328 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	69db      	ldr	r3, [r3, #28]
 8003268:	2b02      	cmp	r3, #2
 800326a:	d146      	bne.n	80032fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800326c:	4b33      	ldr	r3, [pc, #204]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003272:	f7fd fc45 	bl	8000b00 <HAL_GetTick>
 8003276:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003278:	e008      	b.n	800328c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800327a:	f7fd fc41 	bl	8000b00 <HAL_GetTick>
 800327e:	4602      	mov	r2, r0
 8003280:	693b      	ldr	r3, [r7, #16]
 8003282:	1ad3      	subs	r3, r2, r3
 8003284:	2b02      	cmp	r3, #2
 8003286:	d901      	bls.n	800328c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e06d      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800328c:	4b29      	ldr	r3, [pc, #164]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1f0      	bne.n	800327a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a1b      	ldr	r3, [r3, #32]
 800329c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032a0:	d108      	bne.n	80032b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032a2:	4b24      	ldr	r3, [pc, #144]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	4921      	ldr	r1, [pc, #132]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032b4:	4b1f      	ldr	r3, [pc, #124]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a19      	ldr	r1, [r3, #32]
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c4:	430b      	orrs	r3, r1
 80032c6:	491b      	ldr	r1, [pc, #108]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032c8:	4313      	orrs	r3, r2
 80032ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d2:	f7fd fc15 	bl	8000b00 <HAL_GetTick>
 80032d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032d8:	e008      	b.n	80032ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032da:	f7fd fc11 	bl	8000b00 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d901      	bls.n	80032ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e03d      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80032ec:	4b11      	ldr	r3, [pc, #68]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d0f0      	beq.n	80032da <HAL_RCC_OscConfig+0x46a>
 80032f8:	e035      	b.n	8003366 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032fa:	4b10      	ldr	r3, [pc, #64]	; (800333c <HAL_RCC_OscConfig+0x4cc>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003300:	f7fd fbfe 	bl	8000b00 <HAL_GetTick>
 8003304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003306:	e008      	b.n	800331a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003308:	f7fd fbfa 	bl	8000b00 <HAL_GetTick>
 800330c:	4602      	mov	r2, r0
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	1ad3      	subs	r3, r2, r3
 8003312:	2b02      	cmp	r3, #2
 8003314:	d901      	bls.n	800331a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e026      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800331a:	4b06      	ldr	r3, [pc, #24]	; (8003334 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f0      	bne.n	8003308 <HAL_RCC_OscConfig+0x498>
 8003326:	e01e      	b.n	8003366 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	2b01      	cmp	r3, #1
 800332e:	d107      	bne.n	8003340 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e019      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
 8003334:	40021000 	.word	0x40021000
 8003338:	40007000 	.word	0x40007000
 800333c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003340:	4b0b      	ldr	r3, [pc, #44]	; (8003370 <HAL_RCC_OscConfig+0x500>)
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	429a      	cmp	r2, r3
 8003352:	d106      	bne.n	8003362 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800335e:	429a      	cmp	r2, r3
 8003360:	d001      	beq.n	8003366 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	e000      	b.n	8003368 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003366:	2300      	movs	r3, #0
}
 8003368:	4618      	mov	r0, r3
 800336a:	3718      	adds	r7, #24
 800336c:	46bd      	mov	sp, r7
 800336e:	bd80      	pop	{r7, pc}
 8003370:	40021000 	.word	0x40021000

08003374 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
 800337c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d101      	bne.n	8003388 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0d0      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003388:	4b6a      	ldr	r3, [pc, #424]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f003 0307 	and.w	r3, r3, #7
 8003390:	683a      	ldr	r2, [r7, #0]
 8003392:	429a      	cmp	r2, r3
 8003394:	d910      	bls.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003396:	4b67      	ldr	r3, [pc, #412]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f023 0207 	bic.w	r2, r3, #7
 800339e:	4965      	ldr	r1, [pc, #404]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033a6:	4b63      	ldr	r3, [pc, #396]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0307 	and.w	r3, r3, #7
 80033ae:	683a      	ldr	r2, [r7, #0]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d001      	beq.n	80033b8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033b4:	2301      	movs	r3, #1
 80033b6:	e0b8      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f003 0302 	and.w	r3, r3, #2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d020      	beq.n	8003406 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d005      	beq.n	80033dc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80033d0:	4b59      	ldr	r3, [pc, #356]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	4a58      	ldr	r2, [pc, #352]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033d6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80033da:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f003 0308 	and.w	r3, r3, #8
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d005      	beq.n	80033f4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80033e8:	4b53      	ldr	r3, [pc, #332]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	4a52      	ldr	r2, [pc, #328]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033ee:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80033f2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80033f4:	4b50      	ldr	r3, [pc, #320]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	494d      	ldr	r1, [pc, #308]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003402:	4313      	orrs	r3, r2
 8003404:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0301 	and.w	r3, r3, #1
 800340e:	2b00      	cmp	r3, #0
 8003410:	d040      	beq.n	8003494 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	2b01      	cmp	r3, #1
 8003418:	d107      	bne.n	800342a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800341a:	4b47      	ldr	r3, [pc, #284]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003422:	2b00      	cmp	r3, #0
 8003424:	d115      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e07f      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	2b02      	cmp	r3, #2
 8003430:	d107      	bne.n	8003442 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003432:	4b41      	ldr	r3, [pc, #260]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800343a:	2b00      	cmp	r3, #0
 800343c:	d109      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e073      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003442:	4b3d      	ldr	r3, [pc, #244]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0302 	and.w	r3, r3, #2
 800344a:	2b00      	cmp	r3, #0
 800344c:	d101      	bne.n	8003452 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e06b      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003452:	4b39      	ldr	r3, [pc, #228]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f023 0203 	bic.w	r2, r3, #3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	4936      	ldr	r1, [pc, #216]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	4313      	orrs	r3, r2
 8003462:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003464:	f7fd fb4c 	bl	8000b00 <HAL_GetTick>
 8003468:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800346a:	e00a      	b.n	8003482 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800346c:	f7fd fb48 	bl	8000b00 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e053      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003482:	4b2d      	ldr	r3, [pc, #180]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f003 020c 	and.w	r2, r3, #12
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	429a      	cmp	r2, r3
 8003492:	d1eb      	bne.n	800346c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0307 	and.w	r3, r3, #7
 800349c:	683a      	ldr	r2, [r7, #0]
 800349e:	429a      	cmp	r2, r3
 80034a0:	d210      	bcs.n	80034c4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034a2:	4b24      	ldr	r3, [pc, #144]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f023 0207 	bic.w	r2, r3, #7
 80034aa:	4922      	ldr	r1, [pc, #136]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034b2:	4b20      	ldr	r3, [pc, #128]	; (8003534 <HAL_RCC_ClockConfig+0x1c0>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0307 	and.w	r3, r3, #7
 80034ba:	683a      	ldr	r2, [r7, #0]
 80034bc:	429a      	cmp	r2, r3
 80034be:	d001      	beq.n	80034c4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e032      	b.n	800352a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f003 0304 	and.w	r3, r3, #4
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d008      	beq.n	80034e2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80034d0:	4b19      	ldr	r3, [pc, #100]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68db      	ldr	r3, [r3, #12]
 80034dc:	4916      	ldr	r1, [pc, #88]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034de:	4313      	orrs	r3, r2
 80034e0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f003 0308 	and.w	r3, r3, #8
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d009      	beq.n	8003502 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80034ee:	4b12      	ldr	r3, [pc, #72]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	00db      	lsls	r3, r3, #3
 80034fc:	490e      	ldr	r1, [pc, #56]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 80034fe:	4313      	orrs	r3, r2
 8003500:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003502:	f000 f859 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003506:	4602      	mov	r2, r0
 8003508:	4b0b      	ldr	r3, [pc, #44]	; (8003538 <HAL_RCC_ClockConfig+0x1c4>)
 800350a:	685b      	ldr	r3, [r3, #4]
 800350c:	091b      	lsrs	r3, r3, #4
 800350e:	f003 030f 	and.w	r3, r3, #15
 8003512:	490a      	ldr	r1, [pc, #40]	; (800353c <HAL_RCC_ClockConfig+0x1c8>)
 8003514:	5ccb      	ldrb	r3, [r1, r3]
 8003516:	fa22 f303 	lsr.w	r3, r2, r3
 800351a:	4a09      	ldr	r2, [pc, #36]	; (8003540 <HAL_RCC_ClockConfig+0x1cc>)
 800351c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800351e:	4b09      	ldr	r3, [pc, #36]	; (8003544 <HAL_RCC_ClockConfig+0x1d0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4618      	mov	r0, r3
 8003524:	f7fd faaa 	bl	8000a7c <HAL_InitTick>

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}
 8003532:	bf00      	nop
 8003534:	40022000 	.word	0x40022000
 8003538:	40021000 	.word	0x40021000
 800353c:	0800aca4 	.word	0x0800aca4
 8003540:	20000000 	.word	0x20000000
 8003544:	20000004 	.word	0x20000004

08003548 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg @ref RCC_MCODIV_1 no division applied to MCO clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	; 0x28
 800354c:	af00      	add	r7, sp, #0
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	607a      	str	r2, [r7, #4]
  GPIO_InitTypeDef gpio = {0U};
 8003554:	f107 0318 	add.w	r3, r7, #24
 8003558:	2200      	movs	r2, #0
 800355a:	601a      	str	r2, [r3, #0]
 800355c:	605a      	str	r2, [r3, #4]
 800355e:	609a      	str	r2, [r3, #8]
 8003560:	60da      	str	r2, [r3, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(RCC_MCOx);
  UNUSED(RCC_MCODiv);

  /* Configure the MCO1 pin in alternate function mode */
  gpio.Mode      = GPIO_MODE_AF_PP;
 8003562:	2302      	movs	r3, #2
 8003564:	61fb      	str	r3, [r7, #28]
  gpio.Speed     = GPIO_SPEED_FREQ_HIGH;
 8003566:	2303      	movs	r3, #3
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
  gpio.Pull      = GPIO_NOPULL;
 800356a:	2300      	movs	r3, #0
 800356c:	623b      	str	r3, [r7, #32]
  gpio.Pin       = MCO1_PIN;
 800356e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003572:	61bb      	str	r3, [r7, #24]

  /* MCO1 Clock Enable */
  MCO1_CLK_ENABLE();
 8003574:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_RCC_MCOConfig+0x68>)
 8003576:	699b      	ldr	r3, [r3, #24]
 8003578:	4a0d      	ldr	r2, [pc, #52]	; (80035b0 <HAL_RCC_MCOConfig+0x68>)
 800357a:	f043 0304 	orr.w	r3, r3, #4
 800357e:	6193      	str	r3, [r2, #24]
 8003580:	4b0b      	ldr	r3, [pc, #44]	; (80035b0 <HAL_RCC_MCOConfig+0x68>)
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	697b      	ldr	r3, [r7, #20]

  HAL_GPIO_Init(MCO1_GPIO_PORT, &gpio);
 800358c:	f107 0318 	add.w	r3, r7, #24
 8003590:	4619      	mov	r1, r3
 8003592:	4808      	ldr	r0, [pc, #32]	; (80035b4 <HAL_RCC_MCOConfig+0x6c>)
 8003594:	f7fd fde0 	bl	8001158 <HAL_GPIO_Init>

  /* Configure the MCO clock source */
  __HAL_RCC_MCO1_CONFIG(RCC_MCOSource, RCC_MCODiv);
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_MCOConfig+0x68>)
 800359a:	685b      	ldr	r3, [r3, #4]
 800359c:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80035a0:	4903      	ldr	r1, [pc, #12]	; (80035b0 <HAL_RCC_MCOConfig+0x68>)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
}
 80035a8:	bf00      	nop
 80035aa:	3728      	adds	r7, #40	; 0x28
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	40021000 	.word	0x40021000
 80035b4:	40010800 	.word	0x40010800

080035b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	b490      	push	{r4, r7}
 80035ba:	b08a      	sub	sp, #40	; 0x28
 80035bc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80035be:	4b29      	ldr	r3, [pc, #164]	; (8003664 <HAL_RCC_GetSysClockFreq+0xac>)
 80035c0:	1d3c      	adds	r4, r7, #4
 80035c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80035c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80035c8:	f240 2301 	movw	r3, #513	; 0x201
 80035cc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	61fb      	str	r3, [r7, #28]
 80035d2:	2300      	movs	r3, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	2300      	movs	r3, #0
 80035d8:	627b      	str	r3, [r7, #36]	; 0x24
 80035da:	2300      	movs	r3, #0
 80035dc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035e2:	4b21      	ldr	r3, [pc, #132]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb0>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	f003 030c 	and.w	r3, r3, #12
 80035ee:	2b04      	cmp	r3, #4
 80035f0:	d002      	beq.n	80035f8 <HAL_RCC_GetSysClockFreq+0x40>
 80035f2:	2b08      	cmp	r3, #8
 80035f4:	d003      	beq.n	80035fe <HAL_RCC_GetSysClockFreq+0x46>
 80035f6:	e02b      	b.n	8003650 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035f8:	4b1c      	ldr	r3, [pc, #112]	; (800366c <HAL_RCC_GetSysClockFreq+0xb4>)
 80035fa:	623b      	str	r3, [r7, #32]
      break;
 80035fc:	e02b      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	0c9b      	lsrs	r3, r3, #18
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	3328      	adds	r3, #40	; 0x28
 8003608:	443b      	add	r3, r7
 800360a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800360e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003616:	2b00      	cmp	r3, #0
 8003618:	d012      	beq.n	8003640 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800361a:	4b13      	ldr	r3, [pc, #76]	; (8003668 <HAL_RCC_GetSysClockFreq+0xb0>)
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	0c5b      	lsrs	r3, r3, #17
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	3328      	adds	r3, #40	; 0x28
 8003626:	443b      	add	r3, r7
 8003628:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800362c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800362e:	697b      	ldr	r3, [r7, #20]
 8003630:	4a0e      	ldr	r2, [pc, #56]	; (800366c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003632:	fb03 f202 	mul.w	r2, r3, r2
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	fbb2 f3f3 	udiv	r3, r2, r3
 800363c:	627b      	str	r3, [r7, #36]	; 0x24
 800363e:	e004      	b.n	800364a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	4a0b      	ldr	r2, [pc, #44]	; (8003670 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003644:	fb02 f303 	mul.w	r3, r2, r3
 8003648:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	623b      	str	r3, [r7, #32]
      break;
 800364e:	e002      	b.n	8003656 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003650:	4b06      	ldr	r3, [pc, #24]	; (800366c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003652:	623b      	str	r3, [r7, #32]
      break;
 8003654:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003656:	6a3b      	ldr	r3, [r7, #32]
}
 8003658:	4618      	mov	r0, r3
 800365a:	3728      	adds	r7, #40	; 0x28
 800365c:	46bd      	mov	sp, r7
 800365e:	bc90      	pop	{r4, r7}
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	0800ac50 	.word	0x0800ac50
 8003668:	40021000 	.word	0x40021000
 800366c:	007a1200 	.word	0x007a1200
 8003670:	003d0900 	.word	0x003d0900

08003674 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003674:	b480      	push	{r7}
 8003676:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003678:	4b02      	ldr	r3, [pc, #8]	; (8003684 <HAL_RCC_GetHCLKFreq+0x10>)
 800367a:	681b      	ldr	r3, [r3, #0]
}
 800367c:	4618      	mov	r0, r3
 800367e:	46bd      	mov	sp, r7
 8003680:	bc80      	pop	{r7}
 8003682:	4770      	bx	lr
 8003684:	20000000 	.word	0x20000000

08003688 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003688:	b580      	push	{r7, lr}
 800368a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800368c:	f7ff fff2 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 8003690:	4602      	mov	r2, r0
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	0a1b      	lsrs	r3, r3, #8
 8003698:	f003 0307 	and.w	r3, r3, #7
 800369c:	4903      	ldr	r1, [pc, #12]	; (80036ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800369e:	5ccb      	ldrb	r3, [r1, r3]
 80036a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	40021000 	.word	0x40021000
 80036ac:	0800acb4 	.word	0x0800acb4

080036b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80036b4:	f7ff ffde 	bl	8003674 <HAL_RCC_GetHCLKFreq>
 80036b8:	4602      	mov	r2, r0
 80036ba:	4b05      	ldr	r3, [pc, #20]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	0adb      	lsrs	r3, r3, #11
 80036c0:	f003 0307 	and.w	r3, r3, #7
 80036c4:	4903      	ldr	r1, [pc, #12]	; (80036d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c6:	5ccb      	ldrb	r3, [r1, r3]
 80036c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036cc:	4618      	mov	r0, r3
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	40021000 	.word	0x40021000
 80036d4:	0800acb4 	.word	0x0800acb4

080036d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80036e0:	4b0a      	ldr	r3, [pc, #40]	; (800370c <RCC_Delay+0x34>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	4a0a      	ldr	r2, [pc, #40]	; (8003710 <RCC_Delay+0x38>)
 80036e6:	fba2 2303 	umull	r2, r3, r2, r3
 80036ea:	0a5b      	lsrs	r3, r3, #9
 80036ec:	687a      	ldr	r2, [r7, #4]
 80036ee:	fb02 f303 	mul.w	r3, r2, r3
 80036f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80036f4:	bf00      	nop
  }
  while (Delay --);
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	1e5a      	subs	r2, r3, #1
 80036fa:	60fa      	str	r2, [r7, #12]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d1f9      	bne.n	80036f4 <RCC_Delay+0x1c>
}
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	3714      	adds	r7, #20
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr
 800370c:	20000000 	.word	0x20000000
 8003710:	10624dd3 	.word	0x10624dd3

08003714 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	2300      	movs	r3, #0
 8003722:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 0301 	and.w	r3, r3, #1
 800372c:	2b00      	cmp	r3, #0
 800372e:	d07d      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003730:	2300      	movs	r3, #0
 8003732:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003734:	4b4f      	ldr	r3, [pc, #316]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d10d      	bne.n	800375c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003740:	4b4c      	ldr	r3, [pc, #304]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003742:	69db      	ldr	r3, [r3, #28]
 8003744:	4a4b      	ldr	r2, [pc, #300]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003746:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800374a:	61d3      	str	r3, [r2, #28]
 800374c:	4b49      	ldr	r3, [pc, #292]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800374e:	69db      	ldr	r3, [r3, #28]
 8003750:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003754:	60bb      	str	r3, [r7, #8]
 8003756:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003758:	2301      	movs	r3, #1
 800375a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800375c:	4b46      	ldr	r3, [pc, #280]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003764:	2b00      	cmp	r3, #0
 8003766:	d118      	bne.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003768:	4b43      	ldr	r3, [pc, #268]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	4a42      	ldr	r2, [pc, #264]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800376e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003772:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003774:	f7fd f9c4 	bl	8000b00 <HAL_GetTick>
 8003778:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800377a:	e008      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800377c:	f7fd f9c0 	bl	8000b00 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	693b      	ldr	r3, [r7, #16]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	2b64      	cmp	r3, #100	; 0x64
 8003788:	d901      	bls.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800378a:	2303      	movs	r3, #3
 800378c:	e06d      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800378e:	4b3a      	ldr	r3, [pc, #232]	; (8003878 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d0f0      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800379a:	4b36      	ldr	r3, [pc, #216]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037a2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d02e      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80037b2:	68fa      	ldr	r2, [r7, #12]
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d027      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80037b8:	4b2e      	ldr	r3, [pc, #184]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037ba:	6a1b      	ldr	r3, [r3, #32]
 80037bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037c0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80037c2:	4b2e      	ldr	r3, [pc, #184]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80037c8:	4b2c      	ldr	r3, [pc, #176]	; (800387c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80037ca:	2200      	movs	r2, #0
 80037cc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80037ce:	4a29      	ldr	r2, [pc, #164]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d014      	beq.n	8003808 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037de:	f7fd f98f 	bl	8000b00 <HAL_GetTick>
 80037e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037e4:	e00a      	b.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037e6:	f7fd f98b 	bl	8000b00 <HAL_GetTick>
 80037ea:	4602      	mov	r2, r0
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	1ad3      	subs	r3, r2, r3
 80037f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f4:	4293      	cmp	r3, r2
 80037f6:	d901      	bls.n	80037fc <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80037f8:	2303      	movs	r3, #3
 80037fa:	e036      	b.n	800386a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80037fc:	4b1d      	ldr	r3, [pc, #116]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80037fe:	6a1b      	ldr	r3, [r3, #32]
 8003800:	f003 0302 	and.w	r3, r3, #2
 8003804:	2b00      	cmp	r3, #0
 8003806:	d0ee      	beq.n	80037e6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003808:	4b1a      	ldr	r3, [pc, #104]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800380a:	6a1b      	ldr	r3, [r3, #32]
 800380c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	4917      	ldr	r1, [pc, #92]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003816:	4313      	orrs	r3, r2
 8003818:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800381a:	7dfb      	ldrb	r3, [r7, #23]
 800381c:	2b01      	cmp	r3, #1
 800381e:	d105      	bne.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003820:	4b14      	ldr	r3, [pc, #80]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003822:	69db      	ldr	r3, [r3, #28]
 8003824:	4a13      	ldr	r2, [pc, #76]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800382a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0302 	and.w	r3, r3, #2
 8003834:	2b00      	cmp	r3, #0
 8003836:	d008      	beq.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003838:	4b0e      	ldr	r3, [pc, #56]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	490b      	ldr	r1, [pc, #44]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003846:	4313      	orrs	r3, r2
 8003848:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0310 	and.w	r3, r3, #16
 8003852:	2b00      	cmp	r3, #0
 8003854:	d008      	beq.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003856:	4b07      	ldr	r3, [pc, #28]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	4904      	ldr	r1, [pc, #16]	; (8003874 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003864:	4313      	orrs	r3, r2
 8003866:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40021000 	.word	0x40021000
 8003878:	40007000 	.word	0x40007000
 800387c:	42420440 	.word	0x42420440

08003880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b082      	sub	sp, #8
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d101      	bne.n	8003892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e076      	b.n	8003980 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003896:	2b00      	cmp	r3, #0
 8003898:	d108      	bne.n	80038ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	685b      	ldr	r3, [r3, #4]
 800389e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80038a2:	d009      	beq.n	80038b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2200      	movs	r2, #0
 80038a8:	61da      	str	r2, [r3, #28]
 80038aa:	e005      	b.n	80038b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2200      	movs	r2, #0
 80038b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2200      	movs	r2, #0
 80038bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f7fc ff2a 	bl	800072c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	681a      	ldr	r2, [r3, #0]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80038ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	689b      	ldr	r3, [r3, #8]
 80038fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003900:	431a      	orrs	r2, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68db      	ldr	r3, [r3, #12]
 8003906:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800390a:	431a      	orrs	r2, r3
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	f003 0302 	and.w	r3, r3, #2
 8003914:	431a      	orrs	r2, r3
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	695b      	ldr	r3, [r3, #20]
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	431a      	orrs	r2, r3
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003928:	431a      	orrs	r2, r3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003932:	431a      	orrs	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6a1b      	ldr	r3, [r3, #32]
 8003938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800393c:	ea42 0103 	orr.w	r1, r2, r3
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003944:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	430a      	orrs	r2, r1
 800394e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	699b      	ldr	r3, [r3, #24]
 8003954:	0c1a      	lsrs	r2, r3, #16
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f002 0204 	and.w	r2, r2, #4
 800395e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800396e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800397e:	2300      	movs	r3, #0
}
 8003980:	4618      	mov	r0, r3
 8003982:	3708      	adds	r7, #8
 8003984:	46bd      	mov	sp, r7
 8003986:	bd80      	pop	{r7, pc}

08003988 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003988:	b580      	push	{r7, lr}
 800398a:	b088      	sub	sp, #32
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	603b      	str	r3, [r7, #0]
 8003994:	4613      	mov	r3, r2
 8003996:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003998:	2300      	movs	r3, #0
 800399a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80039a2:	2b01      	cmp	r3, #1
 80039a4:	d101      	bne.n	80039aa <HAL_SPI_Transmit+0x22>
 80039a6:	2302      	movs	r3, #2
 80039a8:	e126      	b.n	8003bf8 <HAL_SPI_Transmit+0x270>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80039b2:	f7fd f8a5 	bl	8000b00 <HAL_GetTick>
 80039b6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80039b8:	88fb      	ldrh	r3, [r7, #6]
 80039ba:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80039c2:	b2db      	uxtb	r3, r3
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d002      	beq.n	80039ce <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80039c8:	2302      	movs	r3, #2
 80039ca:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039cc:	e10b      	b.n	8003be6 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d002      	beq.n	80039da <HAL_SPI_Transmit+0x52>
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d102      	bne.n	80039e0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80039de:	e102      	b.n	8003be6 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2203      	movs	r2, #3
 80039e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	68ba      	ldr	r2, [r7, #8]
 80039f2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	88fa      	ldrh	r2, [r7, #6]
 80039f8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	88fa      	ldrh	r2, [r7, #6]
 80039fe:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	2200      	movs	r2, #0
 8003a04:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2200      	movs	r2, #0
 8003a10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	2200      	movs	r2, #0
 8003a16:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a26:	d10f      	bne.n	8003a48 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681a      	ldr	r2, [r3, #0]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a36:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	681a      	ldr	r2, [r3, #0]
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003a46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a52:	2b40      	cmp	r3, #64	; 0x40
 8003a54:	d007      	beq.n	8003a66 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003a64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	68db      	ldr	r3, [r3, #12]
 8003a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003a6e:	d14b      	bne.n	8003b08 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d002      	beq.n	8003a7e <HAL_SPI_Transmit+0xf6>
 8003a78:	8afb      	ldrh	r3, [r7, #22]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d13e      	bne.n	8003afc <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a82:	881a      	ldrh	r2, [r3, #0]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8e:	1c9a      	adds	r2, r3, #2
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29a      	uxth	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003aa2:	e02b      	b.n	8003afc <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	689b      	ldr	r3, [r3, #8]
 8003aaa:	f003 0302 	and.w	r3, r3, #2
 8003aae:	2b02      	cmp	r3, #2
 8003ab0:	d112      	bne.n	8003ad8 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	881a      	ldrh	r2, [r3, #0]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	1c9a      	adds	r2, r3, #2
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003acc:	b29b      	uxth	r3, r3
 8003ace:	3b01      	subs	r3, #1
 8003ad0:	b29a      	uxth	r2, r3
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	86da      	strh	r2, [r3, #54]	; 0x36
 8003ad6:	e011      	b.n	8003afc <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ad8:	f7fd f812 	bl	8000b00 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	69bb      	ldr	r3, [r7, #24]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	683a      	ldr	r2, [r7, #0]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d803      	bhi.n	8003af0 <HAL_SPI_Transmit+0x168>
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aee:	d102      	bne.n	8003af6 <HAL_SPI_Transmit+0x16e>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d102      	bne.n	8003afc <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003afa:	e074      	b.n	8003be6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1ce      	bne.n	8003aa4 <HAL_SPI_Transmit+0x11c>
 8003b06:	e04c      	b.n	8003ba2 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	685b      	ldr	r3, [r3, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <HAL_SPI_Transmit+0x18e>
 8003b10:	8afb      	ldrh	r3, [r7, #22]
 8003b12:	2b01      	cmp	r3, #1
 8003b14:	d140      	bne.n	8003b98 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	330c      	adds	r3, #12
 8003b20:	7812      	ldrb	r2, [r2, #0]
 8003b22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b28:	1c5a      	adds	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b32:	b29b      	uxth	r3, r3
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003b3c:	e02c      	b.n	8003b98 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f003 0302 	and.w	r3, r3, #2
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d113      	bne.n	8003b74 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	330c      	adds	r3, #12
 8003b56:	7812      	ldrb	r2, [r2, #0]
 8003b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b68:	b29b      	uxth	r3, r3
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	b29a      	uxth	r2, r3
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	86da      	strh	r2, [r3, #54]	; 0x36
 8003b72:	e011      	b.n	8003b98 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003b74:	f7fc ffc4 	bl	8000b00 <HAL_GetTick>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	1ad3      	subs	r3, r2, r3
 8003b7e:	683a      	ldr	r2, [r7, #0]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	d803      	bhi.n	8003b8c <HAL_SPI_Transmit+0x204>
 8003b84:	683b      	ldr	r3, [r7, #0]
 8003b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b8a:	d102      	bne.n	8003b92 <HAL_SPI_Transmit+0x20a>
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d102      	bne.n	8003b98 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003b92:	2303      	movs	r3, #3
 8003b94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003b96:	e026      	b.n	8003be6 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003b9c:	b29b      	uxth	r3, r3
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d1cd      	bne.n	8003b3e <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003ba2:	69ba      	ldr	r2, [r7, #24]
 8003ba4:	6839      	ldr	r1, [r7, #0]
 8003ba6:	68f8      	ldr	r0, [r7, #12]
 8003ba8:	f000 f8b2 	bl	8003d10 <SPI_EndRxTxTransaction>
 8003bac:	4603      	mov	r3, r0
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d002      	beq.n	8003bb8 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	2220      	movs	r2, #32
 8003bb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	689b      	ldr	r3, [r3, #8]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d10a      	bne.n	8003bd6 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	613b      	str	r3, [r7, #16]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	613b      	str	r3, [r7, #16]
 8003bd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d002      	beq.n	8003be4 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	77fb      	strb	r3, [r7, #31]
 8003be2:	e000      	b.n	8003be6 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003be4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	2201      	movs	r2, #1
 8003bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c10:	f7fc ff76 	bl	8000b00 <HAL_GetTick>
 8003c14:	4602      	mov	r2, r0
 8003c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c18:	1a9b      	subs	r3, r3, r2
 8003c1a:	683a      	ldr	r2, [r7, #0]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c20:	f7fc ff6e 	bl	8000b00 <HAL_GetTick>
 8003c24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c26:	4b39      	ldr	r3, [pc, #228]	; (8003d0c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	015b      	lsls	r3, r3, #5
 8003c2c:	0d1b      	lsrs	r3, r3, #20
 8003c2e:	69fa      	ldr	r2, [r7, #28]
 8003c30:	fb02 f303 	mul.w	r3, r2, r3
 8003c34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c36:	e054      	b.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c38:	683b      	ldr	r3, [r7, #0]
 8003c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c3e:	d050      	beq.n	8003ce2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c40:	f7fc ff5e 	bl	8000b00 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	69bb      	ldr	r3, [r7, #24]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	429a      	cmp	r2, r3
 8003c4e:	d902      	bls.n	8003c56 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d13d      	bne.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	685a      	ldr	r2, [r3, #4]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003c6e:	d111      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c78:	d004      	beq.n	8003c84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	689b      	ldr	r3, [r3, #8]
 8003c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c82:	d107      	bne.n	8003c94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c9c:	d10f      	bne.n	8003cbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003cac:	601a      	str	r2, [r3, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	2200      	movs	r2, #0
 8003cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003cce:	2303      	movs	r3, #3
 8003cd0:	e017      	b.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d101      	bne.n	8003cdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003cd8:	2300      	movs	r3, #0
 8003cda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	4013      	ands	r3, r2
 8003cec:	68ba      	ldr	r2, [r7, #8]
 8003cee:	429a      	cmp	r2, r3
 8003cf0:	bf0c      	ite	eq
 8003cf2:	2301      	moveq	r3, #1
 8003cf4:	2300      	movne	r3, #0
 8003cf6:	b2db      	uxtb	r3, r3
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	79fb      	ldrb	r3, [r7, #7]
 8003cfc:	429a      	cmp	r2, r3
 8003cfe:	d19b      	bne.n	8003c38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3720      	adds	r7, #32
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bd80      	pop	{r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	20000000 	.word	0x20000000

08003d10 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af02      	add	r7, sp, #8
 8003d16:	60f8      	str	r0, [r7, #12]
 8003d18:	60b9      	str	r1, [r7, #8]
 8003d1a:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	9300      	str	r3, [sp, #0]
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2200      	movs	r2, #0
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff ff6a 	bl	8003c00 <SPI_WaitFlagStateUntilTimeout>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d007      	beq.n	8003d42 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	f043 0220 	orr.w	r2, r3, #32
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e000      	b.n	8003d44 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003d42:	2300      	movs	r3, #0
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}

08003d4c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d4c:	b580      	push	{r7, lr}
 8003d4e:	b082      	sub	sp, #8
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d101      	bne.n	8003d5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e03f      	b.n	8003dde <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d106      	bne.n	8003d78 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f7fc fd24 	bl	80007c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2224      	movs	r2, #36	; 0x24
 8003d7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	68da      	ldr	r2, [r3, #12]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d90:	6878      	ldr	r0, [r7, #4]
 8003d92:	f000 f905 	bl	8003fa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691a      	ldr	r2, [r3, #16]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003da4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	695a      	ldr	r2, [r3, #20]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003db4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	68da      	ldr	r2, [r3, #12]
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003dc4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2220      	movs	r2, #32
 8003dd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	3708      	adds	r7, #8
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bd80      	pop	{r7, pc}

08003de6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b08a      	sub	sp, #40	; 0x28
 8003dea:	af02      	add	r7, sp, #8
 8003dec:	60f8      	str	r0, [r7, #12]
 8003dee:	60b9      	str	r1, [r7, #8]
 8003df0:	603b      	str	r3, [r7, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003df6:	2300      	movs	r3, #0
 8003df8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b20      	cmp	r3, #32
 8003e04:	d17c      	bne.n	8003f00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e06:	68bb      	ldr	r3, [r7, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d002      	beq.n	8003e12 <HAL_UART_Transmit+0x2c>
 8003e0c:	88fb      	ldrh	r3, [r7, #6]
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d101      	bne.n	8003e16 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e075      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	d101      	bne.n	8003e24 <HAL_UART_Transmit+0x3e>
 8003e20:	2302      	movs	r3, #2
 8003e22:	e06e      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2200      	movs	r2, #0
 8003e30:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2221      	movs	r2, #33	; 0x21
 8003e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003e3a:	f7fc fe61 	bl	8000b00 <HAL_GetTick>
 8003e3e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	88fa      	ldrh	r2, [r7, #6]
 8003e44:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	88fa      	ldrh	r2, [r7, #6]
 8003e4a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e54:	d108      	bne.n	8003e68 <HAL_UART_Transmit+0x82>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003e62:	68bb      	ldr	r3, [r7, #8]
 8003e64:	61bb      	str	r3, [r7, #24]
 8003e66:	e003      	b.n	8003e70 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	2200      	movs	r2, #0
 8003e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003e78:	e02a      	b.n	8003ed0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	9300      	str	r3, [sp, #0]
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2200      	movs	r2, #0
 8003e82:	2180      	movs	r1, #128	; 0x80
 8003e84:	68f8      	ldr	r0, [r7, #12]
 8003e86:	f000 f840 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d001      	beq.n	8003e94 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003e90:	2303      	movs	r3, #3
 8003e92:	e036      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d10b      	bne.n	8003eb2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e9a:	69bb      	ldr	r3, [r7, #24]
 8003e9c:	881b      	ldrh	r3, [r3, #0]
 8003e9e:	461a      	mov	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003ea8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	3302      	adds	r3, #2
 8003eae:	61bb      	str	r3, [r7, #24]
 8003eb0:	e007      	b.n	8003ec2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	781a      	ldrb	r2, [r3, #0]
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	3301      	adds	r3, #1
 8003ec0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003ed4:	b29b      	uxth	r3, r3
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1cf      	bne.n	8003e7a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	9300      	str	r3, [sp, #0]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	2140      	movs	r1, #64	; 0x40
 8003ee4:	68f8      	ldr	r0, [r7, #12]
 8003ee6:	f000 f810 	bl	8003f0a <UART_WaitOnFlagUntilTimeout>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d001      	beq.n	8003ef4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003ef0:	2303      	movs	r3, #3
 8003ef2:	e006      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	2220      	movs	r2, #32
 8003ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003efc:	2300      	movs	r3, #0
 8003efe:	e000      	b.n	8003f02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f00:	2302      	movs	r3, #2
  }
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3720      	adds	r7, #32
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}

08003f0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003f0a:	b580      	push	{r7, lr}
 8003f0c:	b084      	sub	sp, #16
 8003f0e:	af00      	add	r7, sp, #0
 8003f10:	60f8      	str	r0, [r7, #12]
 8003f12:	60b9      	str	r1, [r7, #8]
 8003f14:	603b      	str	r3, [r7, #0]
 8003f16:	4613      	mov	r3, r2
 8003f18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f1a:	e02c      	b.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d028      	beq.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d007      	beq.n	8003f3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003f2a:	f7fc fde9 	bl	8000b00 <HAL_GetTick>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	1ad3      	subs	r3, r2, r3
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	429a      	cmp	r2, r3
 8003f38:	d21d      	bcs.n	8003f76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68da      	ldr	r2, [r3, #12]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003f48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695a      	ldr	r2, [r3, #20]
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f022 0201 	bic.w	r2, r2, #1
 8003f58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2220      	movs	r2, #32
 8003f5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	2220      	movs	r2, #32
 8003f66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e00f      	b.n	8003f96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	68bb      	ldr	r3, [r7, #8]
 8003f7e:	4013      	ands	r3, r2
 8003f80:	68ba      	ldr	r2, [r7, #8]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	bf0c      	ite	eq
 8003f86:	2301      	moveq	r3, #1
 8003f88:	2300      	movne	r3, #0
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	461a      	mov	r2, r3
 8003f8e:	79fb      	ldrb	r3, [r7, #7]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d0c3      	beq.n	8003f1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f94:	2300      	movs	r3, #0
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3710      	adds	r7, #16
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
	...

08003fa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	691b      	ldr	r3, [r3, #16]
 8003fae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	68da      	ldr	r2, [r3, #12]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	689a      	ldr	r2, [r3, #8]
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	691b      	ldr	r3, [r3, #16]
 8003fc6:	431a      	orrs	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	695b      	ldr	r3, [r3, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	68db      	ldr	r3, [r3, #12]
 8003fd6:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8003fda:	f023 030c 	bic.w	r3, r3, #12
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	6812      	ldr	r2, [r2, #0]
 8003fe2:	68b9      	ldr	r1, [r7, #8]
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	695b      	ldr	r3, [r3, #20]
 8003fee:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	699a      	ldr	r2, [r3, #24]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a2c      	ldr	r2, [pc, #176]	; (80040b4 <UART_SetConfig+0x114>)
 8004004:	4293      	cmp	r3, r2
 8004006:	d103      	bne.n	8004010 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004008:	f7ff fb52 	bl	80036b0 <HAL_RCC_GetPCLK2Freq>
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	e002      	b.n	8004016 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004010:	f7ff fb3a 	bl	8003688 <HAL_RCC_GetPCLK1Freq>
 8004014:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4613      	mov	r3, r2
 800401a:	009b      	lsls	r3, r3, #2
 800401c:	4413      	add	r3, r2
 800401e:	009a      	lsls	r2, r3, #2
 8004020:	441a      	add	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	009b      	lsls	r3, r3, #2
 8004028:	fbb2 f3f3 	udiv	r3, r2, r3
 800402c:	4a22      	ldr	r2, [pc, #136]	; (80040b8 <UART_SetConfig+0x118>)
 800402e:	fba2 2303 	umull	r2, r3, r2, r3
 8004032:	095b      	lsrs	r3, r3, #5
 8004034:	0119      	lsls	r1, r3, #4
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4613      	mov	r3, r2
 800403a:	009b      	lsls	r3, r3, #2
 800403c:	4413      	add	r3, r2
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	441a      	add	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	685b      	ldr	r3, [r3, #4]
 8004046:	009b      	lsls	r3, r3, #2
 8004048:	fbb2 f2f3 	udiv	r2, r2, r3
 800404c:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <UART_SetConfig+0x118>)
 800404e:	fba3 0302 	umull	r0, r3, r3, r2
 8004052:	095b      	lsrs	r3, r3, #5
 8004054:	2064      	movs	r0, #100	; 0x64
 8004056:	fb00 f303 	mul.w	r3, r0, r3
 800405a:	1ad3      	subs	r3, r2, r3
 800405c:	011b      	lsls	r3, r3, #4
 800405e:	3332      	adds	r3, #50	; 0x32
 8004060:	4a15      	ldr	r2, [pc, #84]	; (80040b8 <UART_SetConfig+0x118>)
 8004062:	fba2 2303 	umull	r2, r3, r2, r3
 8004066:	095b      	lsrs	r3, r3, #5
 8004068:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800406c:	4419      	add	r1, r3
 800406e:	68fa      	ldr	r2, [r7, #12]
 8004070:	4613      	mov	r3, r2
 8004072:	009b      	lsls	r3, r3, #2
 8004074:	4413      	add	r3, r2
 8004076:	009a      	lsls	r2, r3, #2
 8004078:	441a      	add	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	685b      	ldr	r3, [r3, #4]
 800407e:	009b      	lsls	r3, r3, #2
 8004080:	fbb2 f2f3 	udiv	r2, r2, r3
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <UART_SetConfig+0x118>)
 8004086:	fba3 0302 	umull	r0, r3, r3, r2
 800408a:	095b      	lsrs	r3, r3, #5
 800408c:	2064      	movs	r0, #100	; 0x64
 800408e:	fb00 f303 	mul.w	r3, r0, r3
 8004092:	1ad3      	subs	r3, r2, r3
 8004094:	011b      	lsls	r3, r3, #4
 8004096:	3332      	adds	r3, #50	; 0x32
 8004098:	4a07      	ldr	r2, [pc, #28]	; (80040b8 <UART_SetConfig+0x118>)
 800409a:	fba2 2303 	umull	r2, r3, r2, r3
 800409e:	095b      	lsrs	r3, r3, #5
 80040a0:	f003 020f 	and.w	r2, r3, #15
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	440a      	add	r2, r1
 80040aa:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	40013800 	.word	0x40013800
 80040b8:	51eb851f 	.word	0x51eb851f

080040bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80040bc:	b084      	sub	sp, #16
 80040be:	b480      	push	{r7}
 80040c0:	b083      	sub	sp, #12
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	6078      	str	r0, [r7, #4]
 80040c6:	f107 0014 	add.w	r0, r7, #20
 80040ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80040ce:	2300      	movs	r3, #0
}
 80040d0:	4618      	mov	r0, r3
 80040d2:	370c      	adds	r7, #12
 80040d4:	46bd      	mov	sp, r7
 80040d6:	bc80      	pop	{r7}
 80040d8:	b004      	add	sp, #16
 80040da:	4770      	bx	lr

080040dc <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2200      	movs	r2, #0
 80040e8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80040ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80040f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	b29a      	uxth	r2, r3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	3714      	adds	r7, #20
 8004102:	46bd      	mov	sp, r7
 8004104:	bc80      	pop	{r7}
 8004106:	4770      	bx	lr

08004108 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8004108:	b480      	push	{r7}
 800410a:	b085      	sub	sp, #20
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8004110:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8004114:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800411c:	b29a      	uxth	r2, r3
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	b29b      	uxth	r3, r3
 8004122:	43db      	mvns	r3, r3
 8004124:	b29b      	uxth	r3, r3
 8004126:	4013      	ands	r3, r2
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004130:	2300      	movs	r3, #0
}
 8004132:	4618      	mov	r0, r3
 8004134:	3714      	adds	r7, #20
 8004136:	46bd      	mov	sp, r7
 8004138:	bc80      	pop	{r7}
 800413a:	4770      	bx	lr

0800413c <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 800413c:	b480      	push	{r7}
 800413e:	b083      	sub	sp, #12
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
 8004144:	460b      	mov	r3, r1
 8004146:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004154:	b084      	sub	sp, #16
 8004156:	b480      	push	{r7}
 8004158:	b083      	sub	sp, #12
 800415a:	af00      	add	r7, sp, #0
 800415c:	6078      	str	r0, [r7, #4]
 800415e:	f107 0014 	add.w	r0, r7, #20
 8004162:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2201      	movs	r2, #1
 800416a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2200      	movs	r2, #0
 8004182:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	370c      	adds	r7, #12
 800418c:	46bd      	mov	sp, r7
 800418e:	bc80      	pop	{r7}
 8004190:	b004      	add	sp, #16
 8004192:	4770      	bx	lr

08004194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_TypeDef *USBx, uint32_t num)
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
 800419c:	6039      	str	r1, [r7, #0]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800419e:	2300      	movs	r3, #0
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bc80      	pop	{r7}
 80041a8:	4770      	bx	lr

080041aa <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx : Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_TypeDef *USBx)
{
 80041aa:	b480      	push	{r7}
 80041ac:	b083      	sub	sp, #12
 80041ae:	af00      	add	r7, sp, #0
 80041b0:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80041b2:	2300      	movs	r3, #0
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	370c      	adds	r7, #12
 80041b8:	46bd      	mov	sp, r7
 80041ba:	bc80      	pop	{r7}
 80041bc:	4770      	bx	lr
	...

080041c0 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b09b      	sub	sp, #108	; 0x6c
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
 80041c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80041ca:	2300      	movs	r3, #0
 80041cc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	781b      	ldrb	r3, [r3, #0]
 80041d6:	009b      	lsls	r3, r3, #2
 80041d8:	4413      	add	r3, r2
 80041da:	881b      	ldrh	r3, [r3, #0]
 80041dc:	b29b      	uxth	r3, r3
 80041de:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	78db      	ldrb	r3, [r3, #3]
 80041ee:	2b03      	cmp	r3, #3
 80041f0:	d81f      	bhi.n	8004232 <USB_ActivateEndpoint+0x72>
 80041f2:	a201      	add	r2, pc, #4	; (adr r2, 80041f8 <USB_ActivateEndpoint+0x38>)
 80041f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f8:	08004209 	.word	0x08004209
 80041fc:	08004225 	.word	0x08004225
 8004200:	0800423b 	.word	0x0800423b
 8004204:	08004217 	.word	0x08004217
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004208:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800420c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004210:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004214:	e012      	b.n	800423c <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8004216:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800421a:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 800421e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004222:	e00b      	b.n	800423c <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004224:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004228:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800422c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8004230:	e004      	b.n	800423c <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 8004238:	e000      	b.n	800423c <USB_ActivateEndpoint+0x7c>
      break;
 800423a:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	441a      	add	r2, r3
 8004246:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800424a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800424e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004252:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004256:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800425a:	b29b      	uxth	r3, r3
 800425c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	781b      	ldrb	r3, [r3, #0]
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	881b      	ldrh	r3, [r3, #0]
 800426a:	b29b      	uxth	r3, r3
 800426c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004274:	b29a      	uxth	r2, r3
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	b29b      	uxth	r3, r3
 800427c:	4313      	orrs	r3, r2
 800427e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	781b      	ldrb	r3, [r3, #0]
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	441a      	add	r2, r3
 800428c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004290:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004294:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004298:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800429c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042a0:	b29b      	uxth	r3, r3
 80042a2:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	7b1b      	ldrb	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	f040 8149 	bne.w	8004540 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	785b      	ldrb	r3, [r3, #1]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	f000 8084 	beq.w	80043c0 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	617b      	str	r3, [r7, #20]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80042c2:	b29b      	uxth	r3, r3
 80042c4:	461a      	mov	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	4413      	add	r3, r2
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	683b      	ldr	r3, [r7, #0]
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	011a      	lsls	r2, r3, #4
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	4413      	add	r3, r2
 80042d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80042da:	613b      	str	r3, [r7, #16]
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	88db      	ldrh	r3, [r3, #6]
 80042e0:	085b      	lsrs	r3, r3, #1
 80042e2:	b29b      	uxth	r3, r3
 80042e4:	005b      	lsls	r3, r3, #1
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80042ec:	687a      	ldr	r2, [r7, #4]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	781b      	ldrb	r3, [r3, #0]
 80042f2:	009b      	lsls	r3, r3, #2
 80042f4:	4413      	add	r3, r2
 80042f6:	881b      	ldrh	r3, [r3, #0]
 80042f8:	81fb      	strh	r3, [r7, #14]
 80042fa:	89fb      	ldrh	r3, [r7, #14]
 80042fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004300:	2b00      	cmp	r3, #0
 8004302:	d01b      	beq.n	800433c <USB_ActivateEndpoint+0x17c>
 8004304:	687a      	ldr	r2, [r7, #4]
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	781b      	ldrb	r3, [r3, #0]
 800430a:	009b      	lsls	r3, r3, #2
 800430c:	4413      	add	r3, r2
 800430e:	881b      	ldrh	r3, [r3, #0]
 8004310:	b29b      	uxth	r3, r3
 8004312:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	81bb      	strh	r3, [r7, #12]
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	009b      	lsls	r3, r3, #2
 8004324:	441a      	add	r2, r3
 8004326:	89bb      	ldrh	r3, [r7, #12]
 8004328:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800432c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004330:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004334:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004338:	b29b      	uxth	r3, r3
 800433a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	78db      	ldrb	r3, [r3, #3]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d020      	beq.n	8004386 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004344:	687a      	ldr	r2, [r7, #4]
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	781b      	ldrb	r3, [r3, #0]
 800434a:	009b      	lsls	r3, r3, #2
 800434c:	4413      	add	r3, r2
 800434e:	881b      	ldrh	r3, [r3, #0]
 8004350:	b29b      	uxth	r3, r3
 8004352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800435a:	813b      	strh	r3, [r7, #8]
 800435c:	893b      	ldrh	r3, [r7, #8]
 800435e:	f083 0320 	eor.w	r3, r3, #32
 8004362:	813b      	strh	r3, [r7, #8]
 8004364:	687a      	ldr	r2, [r7, #4]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	781b      	ldrb	r3, [r3, #0]
 800436a:	009b      	lsls	r3, r3, #2
 800436c:	441a      	add	r2, r3
 800436e:	893b      	ldrh	r3, [r7, #8]
 8004370:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004374:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004378:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800437c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004380:	b29b      	uxth	r3, r3
 8004382:	8013      	strh	r3, [r2, #0]
 8004384:	e27f      	b.n	8004886 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004386:	687a      	ldr	r2, [r7, #4]
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4413      	add	r3, r2
 8004390:	881b      	ldrh	r3, [r3, #0]
 8004392:	b29b      	uxth	r3, r3
 8004394:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004398:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800439c:	817b      	strh	r3, [r7, #10]
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	781b      	ldrb	r3, [r3, #0]
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	441a      	add	r2, r3
 80043a8:	897b      	ldrh	r3, [r7, #10]
 80043aa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80043ae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80043b2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043ba:	b29b      	uxth	r3, r3
 80043bc:	8013      	strh	r3, [r2, #0]
 80043be:	e262      	b.n	8004886 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043ca:	b29b      	uxth	r3, r3
 80043cc:	461a      	mov	r2, r3
 80043ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043d0:	4413      	add	r3, r2
 80043d2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	781b      	ldrb	r3, [r3, #0]
 80043d8:	011a      	lsls	r2, r3, #4
 80043da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043dc:	4413      	add	r3, r2
 80043de:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	88db      	ldrh	r3, [r3, #6]
 80043e8:	085b      	lsrs	r3, r3, #1
 80043ea:	b29b      	uxth	r3, r3
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	b29a      	uxth	r2, r3
 80043f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043f2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	627b      	str	r3, [r7, #36]	; 0x24
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80043fe:	b29b      	uxth	r3, r3
 8004400:	461a      	mov	r2, r3
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	4413      	add	r3, r2
 8004406:	627b      	str	r3, [r7, #36]	; 0x24
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	781b      	ldrb	r3, [r3, #0]
 800440c:	011a      	lsls	r2, r3, #4
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	4413      	add	r3, r2
 8004412:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8004416:	623b      	str	r3, [r7, #32]
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d112      	bne.n	8004446 <USB_ActivateEndpoint+0x286>
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	881b      	ldrh	r3, [r3, #0]
 8004424:	b29b      	uxth	r3, r3
 8004426:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800442a:	b29a      	uxth	r2, r3
 800442c:	6a3b      	ldr	r3, [r7, #32]
 800442e:	801a      	strh	r2, [r3, #0]
 8004430:	6a3b      	ldr	r3, [r7, #32]
 8004432:	881b      	ldrh	r3, [r3, #0]
 8004434:	b29b      	uxth	r3, r3
 8004436:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800443a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800443e:	b29a      	uxth	r2, r3
 8004440:	6a3b      	ldr	r3, [r7, #32]
 8004442:	801a      	strh	r2, [r3, #0]
 8004444:	e02f      	b.n	80044a6 <USB_ActivateEndpoint+0x2e6>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b3e      	cmp	r3, #62	; 0x3e
 800444c:	d813      	bhi.n	8004476 <USB_ActivateEndpoint+0x2b6>
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	085b      	lsrs	r3, r3, #1
 8004454:	663b      	str	r3, [r7, #96]	; 0x60
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0301 	and.w	r3, r3, #1
 800445e:	2b00      	cmp	r3, #0
 8004460:	d002      	beq.n	8004468 <USB_ActivateEndpoint+0x2a8>
 8004462:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004464:	3301      	adds	r3, #1
 8004466:	663b      	str	r3, [r7, #96]	; 0x60
 8004468:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800446a:	b29b      	uxth	r3, r3
 800446c:	029b      	lsls	r3, r3, #10
 800446e:	b29a      	uxth	r2, r3
 8004470:	6a3b      	ldr	r3, [r7, #32]
 8004472:	801a      	strh	r2, [r3, #0]
 8004474:	e017      	b.n	80044a6 <USB_ActivateEndpoint+0x2e6>
 8004476:	683b      	ldr	r3, [r7, #0]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	663b      	str	r3, [r7, #96]	; 0x60
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	f003 031f 	and.w	r3, r3, #31
 8004486:	2b00      	cmp	r3, #0
 8004488:	d102      	bne.n	8004490 <USB_ActivateEndpoint+0x2d0>
 800448a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800448c:	3b01      	subs	r3, #1
 800448e:	663b      	str	r3, [r7, #96]	; 0x60
 8004490:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004492:	b29b      	uxth	r3, r3
 8004494:	029b      	lsls	r3, r3, #10
 8004496:	b29b      	uxth	r3, r3
 8004498:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800449c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80044a0:	b29a      	uxth	r2, r3
 80044a2:	6a3b      	ldr	r3, [r7, #32]
 80044a4:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80044a6:	687a      	ldr	r2, [r7, #4]
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	4413      	add	r3, r2
 80044b0:	881b      	ldrh	r3, [r3, #0]
 80044b2:	83fb      	strh	r3, [r7, #30]
 80044b4:	8bfb      	ldrh	r3, [r7, #30]
 80044b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d01b      	beq.n	80044f6 <USB_ActivateEndpoint+0x336>
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	781b      	ldrb	r3, [r3, #0]
 80044c4:	009b      	lsls	r3, r3, #2
 80044c6:	4413      	add	r3, r2
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	b29b      	uxth	r3, r3
 80044cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044d4:	83bb      	strh	r3, [r7, #28]
 80044d6:	687a      	ldr	r2, [r7, #4]
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	781b      	ldrb	r3, [r3, #0]
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	441a      	add	r2, r3
 80044e0:	8bbb      	ldrh	r3, [r7, #28]
 80044e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80044e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80044ea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044f2:	b29b      	uxth	r3, r3
 80044f4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	4413      	add	r3, r2
 8004500:	881b      	ldrh	r3, [r3, #0]
 8004502:	b29b      	uxth	r3, r3
 8004504:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004508:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800450c:	837b      	strh	r3, [r7, #26]
 800450e:	8b7b      	ldrh	r3, [r7, #26]
 8004510:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004514:	837b      	strh	r3, [r7, #26]
 8004516:	8b7b      	ldrh	r3, [r7, #26]
 8004518:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800451c:	837b      	strh	r3, [r7, #26]
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	009b      	lsls	r3, r3, #2
 8004526:	441a      	add	r2, r3
 8004528:	8b7b      	ldrh	r3, [r7, #26]
 800452a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800452e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004532:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004536:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800453a:	b29b      	uxth	r3, r3
 800453c:	8013      	strh	r3, [r2, #0]
 800453e:	e1a2      	b.n	8004886 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	781b      	ldrb	r3, [r3, #0]
 8004546:	009b      	lsls	r3, r3, #2
 8004548:	4413      	add	r3, r2
 800454a:	881b      	ldrh	r3, [r3, #0]
 800454c:	b29b      	uxth	r3, r3
 800454e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004556:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	009b      	lsls	r3, r3, #2
 8004562:	441a      	add	r2, r3
 8004564:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004568:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800456c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004570:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004574:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004578:	b29b      	uxth	r3, r3
 800457a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004586:	b29b      	uxth	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800458c:	4413      	add	r3, r2
 800458e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	781b      	ldrb	r3, [r3, #0]
 8004594:	011a      	lsls	r2, r3, #4
 8004596:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004598:	4413      	add	r3, r2
 800459a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800459e:	657b      	str	r3, [r7, #84]	; 0x54
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	891b      	ldrh	r3, [r3, #8]
 80045a4:	085b      	lsrs	r3, r3, #1
 80045a6:	b29b      	uxth	r3, r3
 80045a8:	005b      	lsls	r3, r3, #1
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80045ae:	801a      	strh	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	653b      	str	r3, [r7, #80]	; 0x50
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	461a      	mov	r2, r3
 80045be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045c0:	4413      	add	r3, r2
 80045c2:	653b      	str	r3, [r7, #80]	; 0x50
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	781b      	ldrb	r3, [r3, #0]
 80045c8:	011a      	lsls	r2, r3, #4
 80045ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 80045d2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	895b      	ldrh	r3, [r3, #10]
 80045d8:	085b      	lsrs	r3, r3, #1
 80045da:	b29b      	uxth	r3, r3
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045e2:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	785b      	ldrb	r3, [r3, #1]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f040 8091 	bne.w	8004710 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80045ee:	687a      	ldr	r2, [r7, #4]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	4413      	add	r3, r2
 80045f8:	881b      	ldrh	r3, [r3, #0]
 80045fa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80045fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80045fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01b      	beq.n	800463e <USB_ActivateEndpoint+0x47e>
 8004606:	687a      	ldr	r2, [r7, #4]
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	4413      	add	r3, r2
 8004610:	881b      	ldrh	r3, [r3, #0]
 8004612:	b29b      	uxth	r3, r3
 8004614:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004618:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461c:	877b      	strh	r3, [r7, #58]	; 0x3a
 800461e:	687a      	ldr	r2, [r7, #4]
 8004620:	683b      	ldr	r3, [r7, #0]
 8004622:	781b      	ldrb	r3, [r3, #0]
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	441a      	add	r2, r3
 8004628:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800462a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800462e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004632:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004636:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800463a:	b29b      	uxth	r3, r3
 800463c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	781b      	ldrb	r3, [r3, #0]
 8004644:	009b      	lsls	r3, r3, #2
 8004646:	4413      	add	r3, r2
 8004648:	881b      	ldrh	r3, [r3, #0]
 800464a:	873b      	strh	r3, [r7, #56]	; 0x38
 800464c:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800464e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004652:	2b00      	cmp	r3, #0
 8004654:	d01b      	beq.n	800468e <USB_ActivateEndpoint+0x4ce>
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	4413      	add	r3, r2
 8004660:	881b      	ldrh	r3, [r3, #0]
 8004662:	b29b      	uxth	r3, r3
 8004664:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004668:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800466c:	86fb      	strh	r3, [r7, #54]	; 0x36
 800466e:	687a      	ldr	r2, [r7, #4]
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	781b      	ldrb	r3, [r3, #0]
 8004674:	009b      	lsls	r3, r3, #2
 8004676:	441a      	add	r2, r3
 8004678:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800467a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800467e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004682:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004686:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800468a:	b29b      	uxth	r3, r3
 800468c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800468e:	687a      	ldr	r2, [r7, #4]
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	4413      	add	r3, r2
 8004698:	881b      	ldrh	r3, [r3, #0]
 800469a:	b29b      	uxth	r3, r3
 800469c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80046a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046a6:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046a8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80046ac:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046ae:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046b0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80046b4:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046b6:	687a      	ldr	r2, [r7, #4]
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	009b      	lsls	r3, r3, #2
 80046be:	441a      	add	r2, r3
 80046c0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80046c2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046c6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80046d2:	b29b      	uxth	r3, r3
 80046d4:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80046d6:	687a      	ldr	r2, [r7, #4]
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	781b      	ldrb	r3, [r3, #0]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	4413      	add	r3, r2
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	b29b      	uxth	r3, r3
 80046e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046ec:	867b      	strh	r3, [r7, #50]	; 0x32
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	009b      	lsls	r3, r3, #2
 80046f6:	441a      	add	r2, r3
 80046f8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 80046fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004702:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004706:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800470a:	b29b      	uxth	r3, r3
 800470c:	8013      	strh	r3, [r2, #0]
 800470e:	e0ba      	b.n	8004886 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	781b      	ldrb	r3, [r3, #0]
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4413      	add	r3, r2
 800471a:	881b      	ldrh	r3, [r3, #0]
 800471c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004720:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004724:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d01d      	beq.n	8004768 <USB_ActivateEndpoint+0x5a8>
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	009b      	lsls	r3, r3, #2
 8004734:	4413      	add	r3, r2
 8004736:	881b      	ldrh	r3, [r3, #0]
 8004738:	b29b      	uxth	r3, r3
 800473a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800473e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004742:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	683b      	ldr	r3, [r7, #0]
 800474a:	781b      	ldrb	r3, [r3, #0]
 800474c:	009b      	lsls	r3, r3, #2
 800474e:	441a      	add	r2, r3
 8004750:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004754:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004758:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800475c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004760:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004764:	b29b      	uxth	r3, r3
 8004766:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	683b      	ldr	r3, [r7, #0]
 800476c:	781b      	ldrb	r3, [r3, #0]
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	4413      	add	r3, r2
 8004772:	881b      	ldrh	r3, [r3, #0]
 8004774:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004778:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800477c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004780:	2b00      	cmp	r3, #0
 8004782:	d01d      	beq.n	80047c0 <USB_ActivateEndpoint+0x600>
 8004784:	687a      	ldr	r2, [r7, #4]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	781b      	ldrb	r3, [r3, #0]
 800478a:	009b      	lsls	r3, r3, #2
 800478c:	4413      	add	r3, r2
 800478e:	881b      	ldrh	r3, [r3, #0]
 8004790:	b29b      	uxth	r3, r3
 8004792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004796:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800479a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	781b      	ldrb	r3, [r3, #0]
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	441a      	add	r2, r3
 80047a8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80047ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047bc:	b29b      	uxth	r3, r3
 80047be:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	78db      	ldrb	r3, [r3, #3]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d024      	beq.n	8004812 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4413      	add	r3, r2
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047da:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80047de:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047e2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047e6:	f083 0320 	eor.w	r3, r3, #32
 80047ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80047ee:	687a      	ldr	r2, [r7, #4]
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	009b      	lsls	r3, r3, #2
 80047f6:	441a      	add	r2, r3
 80047f8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80047fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004800:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004804:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004808:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800480c:	b29b      	uxth	r3, r3
 800480e:	8013      	strh	r3, [r2, #0]
 8004810:	e01d      	b.n	800484e <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004812:	687a      	ldr	r2, [r7, #4]
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	781b      	ldrb	r3, [r3, #0]
 8004818:	009b      	lsls	r3, r3, #2
 800481a:	4413      	add	r3, r2
 800481c:	881b      	ldrh	r3, [r3, #0]
 800481e:	b29b      	uxth	r3, r3
 8004820:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004824:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004828:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 800482c:	687a      	ldr	r2, [r7, #4]
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	441a      	add	r2, r3
 8004836:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800483a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800483e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800484a:	b29b      	uxth	r3, r3
 800484c:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800484e:	687a      	ldr	r2, [r7, #4]
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	781b      	ldrb	r3, [r3, #0]
 8004854:	009b      	lsls	r3, r3, #2
 8004856:	4413      	add	r3, r2
 8004858:	881b      	ldrh	r3, [r3, #0]
 800485a:	b29b      	uxth	r3, r3
 800485c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004860:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004864:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	441a      	add	r2, r3
 8004870:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004872:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004876:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800487a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800487e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004882:	b29b      	uxth	r3, r3
 8004884:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004886:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 800488a:	4618      	mov	r0, r3
 800488c:	376c      	adds	r7, #108	; 0x6c
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr

08004894 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004894:	b480      	push	{r7}
 8004896:	b08d      	sub	sp, #52	; 0x34
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	7b1b      	ldrb	r3, [r3, #12]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	f040 808e 	bne.w	80049c4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	785b      	ldrb	r3, [r3, #1]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d044      	beq.n	800493a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048b0:	687a      	ldr	r2, [r7, #4]
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	009b      	lsls	r3, r3, #2
 80048b8:	4413      	add	r3, r2
 80048ba:	881b      	ldrh	r3, [r3, #0]
 80048bc:	81bb      	strh	r3, [r7, #12]
 80048be:	89bb      	ldrh	r3, [r7, #12]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d01b      	beq.n	8004900 <USB_DeactivateEndpoint+0x6c>
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	009b      	lsls	r3, r3, #2
 80048d0:	4413      	add	r3, r2
 80048d2:	881b      	ldrh	r3, [r3, #0]
 80048d4:	b29b      	uxth	r3, r3
 80048d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048de:	817b      	strh	r3, [r7, #10]
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	781b      	ldrb	r3, [r3, #0]
 80048e6:	009b      	lsls	r3, r3, #2
 80048e8:	441a      	add	r2, r3
 80048ea:	897b      	ldrh	r3, [r7, #10]
 80048ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048f8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	683b      	ldr	r3, [r7, #0]
 8004904:	781b      	ldrb	r3, [r3, #0]
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	881b      	ldrh	r3, [r3, #0]
 800490c:	b29b      	uxth	r3, r3
 800490e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004916:	813b      	strh	r3, [r7, #8]
 8004918:	687a      	ldr	r2, [r7, #4]
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	781b      	ldrb	r3, [r3, #0]
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	441a      	add	r2, r3
 8004922:	893b      	ldrh	r3, [r7, #8]
 8004924:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004928:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800492c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004934:	b29b      	uxth	r3, r3
 8004936:	8013      	strh	r3, [r2, #0]
 8004938:	e192      	b.n	8004c60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	009b      	lsls	r3, r3, #2
 8004942:	4413      	add	r3, r2
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	827b      	strh	r3, [r7, #18]
 8004948:	8a7b      	ldrh	r3, [r7, #18]
 800494a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d01b      	beq.n	800498a <USB_DeactivateEndpoint+0xf6>
 8004952:	687a      	ldr	r2, [r7, #4]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	009b      	lsls	r3, r3, #2
 800495a:	4413      	add	r3, r2
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	b29b      	uxth	r3, r3
 8004960:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004964:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004968:	823b      	strh	r3, [r7, #16]
 800496a:	687a      	ldr	r2, [r7, #4]
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	781b      	ldrb	r3, [r3, #0]
 8004970:	009b      	lsls	r3, r3, #2
 8004972:	441a      	add	r2, r3
 8004974:	8a3b      	ldrh	r3, [r7, #16]
 8004976:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800497a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800497e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004982:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004986:	b29b      	uxth	r3, r3
 8004988:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	881b      	ldrh	r3, [r3, #0]
 8004996:	b29b      	uxth	r3, r3
 8004998:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800499c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049a0:	81fb      	strh	r3, [r7, #14]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	781b      	ldrb	r3, [r3, #0]
 80049a8:	009b      	lsls	r3, r3, #2
 80049aa:	441a      	add	r2, r3
 80049ac:	89fb      	ldrh	r3, [r7, #14]
 80049ae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049b2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049be:	b29b      	uxth	r3, r3
 80049c0:	8013      	strh	r3, [r2, #0]
 80049c2:	e14d      	b.n	8004c60 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	785b      	ldrb	r3, [r3, #1]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	f040 80a5 	bne.w	8004b18 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	881b      	ldrh	r3, [r3, #0]
 80049da:	843b      	strh	r3, [r7, #32]
 80049dc:	8c3b      	ldrh	r3, [r7, #32]
 80049de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d01b      	beq.n	8004a1e <USB_DeactivateEndpoint+0x18a>
 80049e6:	687a      	ldr	r2, [r7, #4]
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	009b      	lsls	r3, r3, #2
 80049ee:	4413      	add	r3, r2
 80049f0:	881b      	ldrh	r3, [r3, #0]
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049fc:	83fb      	strh	r3, [r7, #30]
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	781b      	ldrb	r3, [r3, #0]
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	441a      	add	r2, r3
 8004a08:	8bfb      	ldrh	r3, [r7, #30]
 8004a0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a12:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004a16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	4413      	add	r3, r2
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	83bb      	strh	r3, [r7, #28]
 8004a2c:	8bbb      	ldrh	r3, [r7, #28]
 8004a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d01b      	beq.n	8004a6e <USB_DeactivateEndpoint+0x1da>
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	009b      	lsls	r3, r3, #2
 8004a3e:	4413      	add	r3, r2
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	b29b      	uxth	r3, r3
 8004a44:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a4c:	837b      	strh	r3, [r7, #26]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	441a      	add	r2, r3
 8004a58:	8b7b      	ldrh	r3, [r7, #26]
 8004a5a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a5e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a66:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004a6e:	687a      	ldr	r2, [r7, #4]
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	009b      	lsls	r3, r3, #2
 8004a76:	4413      	add	r3, r2
 8004a78:	881b      	ldrh	r3, [r3, #0]
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a80:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a84:	833b      	strh	r3, [r7, #24]
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	441a      	add	r2, r3
 8004a90:	8b3b      	ldrh	r3, [r7, #24]
 8004a92:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a96:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a9e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004aa2:	b29b      	uxth	r3, r3
 8004aa4:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	b29b      	uxth	r3, r3
 8004ab4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004ab8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004abc:	82fb      	strh	r3, [r7, #22]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	441a      	add	r2, r3
 8004ac8:	8afb      	ldrh	r3, [r7, #22]
 8004aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	009b      	lsls	r3, r3, #2
 8004ae6:	4413      	add	r3, r2
 8004ae8:	881b      	ldrh	r3, [r3, #0]
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004af0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004af4:	82bb      	strh	r3, [r7, #20]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	8abb      	ldrh	r3, [r7, #20]
 8004b02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	8013      	strh	r3, [r2, #0]
 8004b16:	e0a3      	b.n	8004c60 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004b26:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b28:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d01b      	beq.n	8004b68 <USB_DeactivateEndpoint+0x2d4>
 8004b30:	687a      	ldr	r2, [r7, #4]
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	781b      	ldrb	r3, [r3, #0]
 8004b36:	009b      	lsls	r3, r3, #2
 8004b38:	4413      	add	r3, r2
 8004b3a:	881b      	ldrh	r3, [r3, #0]
 8004b3c:	b29b      	uxth	r3, r3
 8004b3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b46:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004b48:	687a      	ldr	r2, [r7, #4]
 8004b4a:	683b      	ldr	r3, [r7, #0]
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	441a      	add	r2, r3
 8004b52:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004b54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b64:	b29b      	uxth	r3, r3
 8004b66:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b68:	687a      	ldr	r2, [r7, #4]
 8004b6a:	683b      	ldr	r3, [r7, #0]
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	009b      	lsls	r3, r3, #2
 8004b70:	4413      	add	r3, r2
 8004b72:	881b      	ldrh	r3, [r3, #0]
 8004b74:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004b76:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d01b      	beq.n	8004bb8 <USB_DeactivateEndpoint+0x324>
 8004b80:	687a      	ldr	r2, [r7, #4]
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	009b      	lsls	r3, r3, #2
 8004b88:	4413      	add	r3, r2
 8004b8a:	881b      	ldrh	r3, [r3, #0]
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b96:	853b      	strh	r3, [r7, #40]	; 0x28
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	683b      	ldr	r3, [r7, #0]
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	441a      	add	r2, r3
 8004ba2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004ba4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ba8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004bb8:	687a      	ldr	r2, [r7, #4]
 8004bba:	683b      	ldr	r3, [r7, #0]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4413      	add	r3, r2
 8004bc2:	881b      	ldrh	r3, [r3, #0]
 8004bc4:	b29b      	uxth	r3, r3
 8004bc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bce:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	009b      	lsls	r3, r3, #2
 8004bd8:	441a      	add	r2, r3
 8004bda:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004bdc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004be0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004be4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004be8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bec:	b29b      	uxth	r3, r3
 8004bee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	683b      	ldr	r3, [r7, #0]
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	009b      	lsls	r3, r3, #2
 8004bf8:	4413      	add	r3, r2
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	b29b      	uxth	r3, r3
 8004bfe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c06:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	009b      	lsls	r3, r3, #2
 8004c10:	441a      	add	r2, r3
 8004c12:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004c14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4413      	add	r3, r2
 8004c32:	881b      	ldrh	r3, [r3, #0]
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c3e:	847b      	strh	r3, [r7, #34]	; 0x22
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	683b      	ldr	r3, [r7, #0]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004c4c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c50:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c54:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8004c60:	2300      	movs	r3, #0
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3734      	adds	r7, #52	; 0x34
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr

08004c6c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c6c:	b580      	push	{r7, lr}
 8004c6e:	b0cc      	sub	sp, #304	; 0x130
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c76:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004c7a:	6018      	str	r0, [r3, #0]
 8004c7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c84:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	2b01      	cmp	r3, #1
 8004c94:	f041 817d 	bne.w	8005f92 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8004c98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004c9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	699a      	ldr	r2, [r3, #24]
 8004ca4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ca8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	429a      	cmp	r2, r3
 8004cb2:	d908      	bls.n	8004cc6 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8004cb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8004cc4:	e007      	b.n	8004cd6 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8004cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8004cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	7b1b      	ldrb	r3, [r3, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d152      	bne.n	8004d8c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004ce6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	6959      	ldr	r1, [r3, #20]
 8004cf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004cf6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	88da      	ldrh	r2, [r3, #6]
 8004cfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8004d08:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8004d0c:	6800      	ldr	r0, [r0, #0]
 8004d0e:	f001 ff23 	bl	8006b58 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004d12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d16:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d1a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d1e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004d22:	6812      	ldr	r2, [r2, #0]
 8004d24:	601a      	str	r2, [r3, #0]
 8004d26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d2a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004d34:	b29b      	uxth	r3, r3
 8004d36:	4619      	mov	r1, r3
 8004d38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d3c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d40:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004d44:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8004d48:	6812      	ldr	r2, [r2, #0]
 8004d4a:	440a      	add	r2, r1
 8004d4c:	601a      	str	r2, [r3, #0]
 8004d4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	781b      	ldrb	r3, [r3, #0]
 8004d5a:	011a      	lsls	r2, r3, #4
 8004d5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d60:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4413      	add	r3, r2
 8004d68:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8004d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d70:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d74:	601a      	str	r2, [r3, #0]
 8004d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d80:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	801a      	strh	r2, [r3, #0]
 8004d88:	f001 b8b5 	b.w	8005ef6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8004d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004d90:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	78db      	ldrb	r3, [r3, #3]
 8004d98:	2b02      	cmp	r3, #2
 8004d9a:	f040 84c6 	bne.w	800572a <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8004d9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004da2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6a1a      	ldr	r2, [r3, #32]
 8004daa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	691b      	ldr	r3, [r3, #16]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	f240 8443 	bls.w	8005642 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 8004dbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dc0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	781b      	ldrb	r3, [r3, #0]
 8004dd2:	009b      	lsls	r3, r3, #2
 8004dd4:	4413      	add	r3, r2
 8004dd6:	881b      	ldrh	r3, [r3, #0]
 8004dd8:	b29b      	uxth	r3, r3
 8004dda:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004de2:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8004de6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004dea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004df4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	441a      	add	r2, r3
 8004e00:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004e04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e0c:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 8004e18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	6a1a      	ldr	r2, [r3, #32]
 8004e24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004e28:	1ad2      	subs	r2, r2, r3
 8004e2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004e36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e3a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	781b      	ldrb	r3, [r3, #0]
 8004e4c:	009b      	lsls	r3, r3, #2
 8004e4e:	4413      	add	r3, r2
 8004e50:	881b      	ldrh	r3, [r3, #0]
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	f000 823e 	beq.w	80052da <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e62:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004e66:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e6a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e6e:	6812      	ldr	r2, [r2, #0]
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	785b      	ldrb	r3, [r3, #1]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f040 809a 	bne.w	8004fb8 <USB_EPStartXfer+0x34c>
 8004e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e88:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004e8c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004e90:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8004e94:	6812      	ldr	r2, [r2, #0]
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004e9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004ea6:	b29b      	uxth	r3, r3
 8004ea8:	4619      	mov	r1, r3
 8004eaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004eae:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004eb2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004eb6:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 8004eba:	6812      	ldr	r2, [r2, #0]
 8004ebc:	440a      	add	r2, r1
 8004ebe:	601a      	str	r2, [r3, #0]
 8004ec0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ec4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	781b      	ldrb	r3, [r3, #0]
 8004ecc:	011a      	lsls	r2, r3, #4
 8004ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ed2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 8004ede:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ee2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ee6:	601a      	str	r2, [r3, #0]
 8004ee8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d122      	bne.n	8004f36 <USB_EPStartXfer+0x2ca>
 8004ef0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ef4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	881b      	ldrh	r3, [r3, #0]
 8004efc:	b29b      	uxth	r3, r3
 8004efe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f08:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	801a      	strh	r2, [r3, #0]
 8004f10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f14:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	881b      	ldrh	r3, [r3, #0]
 8004f1c:	b29b      	uxth	r3, r3
 8004f1e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004f22:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004f26:	b29a      	uxth	r2, r3
 8004f28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f2c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	801a      	strh	r2, [r3, #0]
 8004f34:	e079      	b.n	800502a <USB_EPStartXfer+0x3be>
 8004f36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f3a:	2b3e      	cmp	r3, #62	; 0x3e
 8004f3c:	d81b      	bhi.n	8004f76 <USB_EPStartXfer+0x30a>
 8004f3e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f42:	085b      	lsrs	r3, r3, #1
 8004f44:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f4c:	f003 0301 	and.w	r3, r3, #1
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d004      	beq.n	8004f5e <USB_EPStartXfer+0x2f2>
 8004f54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f58:	3301      	adds	r3, #1
 8004f5a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f62:	b29b      	uxth	r3, r3
 8004f64:	029b      	lsls	r3, r3, #10
 8004f66:	b29a      	uxth	r2, r3
 8004f68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004f6c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	801a      	strh	r2, [r3, #0]
 8004f74:	e059      	b.n	800502a <USB_EPStartXfer+0x3be>
 8004f76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f7a:	095b      	lsrs	r3, r3, #5
 8004f7c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8004f84:	f003 031f 	and.w	r3, r3, #31
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d104      	bne.n	8004f96 <USB_EPStartXfer+0x32a>
 8004f8c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f90:	3b01      	subs	r3, #1
 8004f92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8004f96:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	029b      	lsls	r3, r3, #10
 8004f9e:	b29b      	uxth	r3, r3
 8004fa0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004fa4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004fa8:	b29a      	uxth	r2, r3
 8004faa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fae:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	801a      	strh	r2, [r3, #0]
 8004fb6:	e038      	b.n	800502a <USB_EPStartXfer+0x3be>
 8004fb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	785b      	ldrb	r3, [r3, #1]
 8004fc4:	2b01      	cmp	r3, #1
 8004fc6:	d130      	bne.n	800502a <USB_EPStartXfer+0x3be>
 8004fc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fcc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4619      	mov	r1, r3
 8004fda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004fde:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fe2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8004fe6:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	440a      	add	r2, r1
 8004fee:	601a      	str	r2, [r3, #0]
 8004ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8004ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	011a      	lsls	r2, r3, #4
 8004ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005002:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4413      	add	r3, r2
 800500a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800500e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005012:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005016:	601a      	str	r2, [r3, #0]
 8005018:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800501c:	b29a      	uxth	r2, r3
 800501e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005022:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800502a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800502e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	895b      	ldrh	r3, [r3, #10]
 8005036:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800503a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6959      	ldr	r1, [r3, #20]
 8005046:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800504a:	b29b      	uxth	r3, r3
 800504c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005050:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005054:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005058:	6800      	ldr	r0, [r0, #0]
 800505a:	f001 fd7d 	bl	8006b58 <USB_WritePMA>
            ep->xfer_buff += len;
 800505e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005062:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	695a      	ldr	r2, [r3, #20]
 800506a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800506e:	441a      	add	r2, r3
 8005070:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005074:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800507c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005080:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	6a1a      	ldr	r2, [r3, #32]
 8005088:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	691b      	ldr	r3, [r3, #16]
 8005094:	429a      	cmp	r2, r3
 8005096:	d90f      	bls.n	80050b8 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005098:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	6a1a      	ldr	r2, [r3, #32]
 80050a4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050a8:	1ad2      	subs	r2, r2, r3
 80050aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	621a      	str	r2, [r3, #32]
 80050b6:	e00e      	b.n	80050d6 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 80050b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	6a1b      	ldr	r3, [r3, #32]
 80050c4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80050c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	2200      	movs	r2, #0
 80050d4:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	785b      	ldrb	r3, [r3, #1]
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	f040 809a 	bne.w	800521c <USB_EPStartXfer+0x5b0>
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80050f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050f4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	601a      	str	r2, [r3, #0]
 80050fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005100:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800510a:	b29b      	uxth	r3, r3
 800510c:	4619      	mov	r1, r3
 800510e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005112:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8005116:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800511a:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800511e:	6812      	ldr	r2, [r2, #0]
 8005120:	440a      	add	r2, r1
 8005122:	601a      	str	r2, [r3, #0]
 8005124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005128:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	781b      	ldrb	r3, [r3, #0]
 8005130:	011a      	lsls	r2, r3, #4
 8005132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005136:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4413      	add	r3, r2
 800513e:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005142:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005146:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800514a:	601a      	str	r2, [r3, #0]
 800514c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d122      	bne.n	800519a <USB_EPStartXfer+0x52e>
 8005154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005158:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	881b      	ldrh	r3, [r3, #0]
 8005160:	b29b      	uxth	r3, r3
 8005162:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005166:	b29a      	uxth	r2, r3
 8005168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800516c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	801a      	strh	r2, [r3, #0]
 8005174:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005178:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	881b      	ldrh	r3, [r3, #0]
 8005180:	b29b      	uxth	r3, r3
 8005182:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005186:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800518a:	b29a      	uxth	r2, r3
 800518c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005190:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	801a      	strh	r2, [r3, #0]
 8005198:	e083      	b.n	80052a2 <USB_EPStartXfer+0x636>
 800519a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800519e:	2b3e      	cmp	r3, #62	; 0x3e
 80051a0:	d81b      	bhi.n	80051da <USB_EPStartXfer+0x56e>
 80051a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051a6:	085b      	lsrs	r3, r3, #1
 80051a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051b0:	f003 0301 	and.w	r3, r3, #1
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d004      	beq.n	80051c2 <USB_EPStartXfer+0x556>
 80051b8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051bc:	3301      	adds	r3, #1
 80051be:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051c2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051c6:	b29b      	uxth	r3, r3
 80051c8:	029b      	lsls	r3, r3, #10
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051d0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	801a      	strh	r2, [r3, #0]
 80051d8:	e063      	b.n	80052a2 <USB_EPStartXfer+0x636>
 80051da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051de:	095b      	lsrs	r3, r3, #5
 80051e0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051e8:	f003 031f 	and.w	r3, r3, #31
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d104      	bne.n	80051fa <USB_EPStartXfer+0x58e>
 80051f0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051f4:	3b01      	subs	r3, #1
 80051f6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80051fa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80051fe:	b29b      	uxth	r3, r3
 8005200:	029b      	lsls	r3, r3, #10
 8005202:	b29b      	uxth	r3, r3
 8005204:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005208:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800520c:	b29a      	uxth	r2, r3
 800520e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005212:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	801a      	strh	r2, [r3, #0]
 800521a:	e042      	b.n	80052a2 <USB_EPStartXfer+0x636>
 800521c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005220:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	785b      	ldrb	r3, [r3, #1]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d13a      	bne.n	80052a2 <USB_EPStartXfer+0x636>
 800522c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005230:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8005234:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005238:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800523c:	6812      	ldr	r2, [r2, #0]
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005244:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800524e:	b29b      	uxth	r3, r3
 8005250:	4619      	mov	r1, r3
 8005252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005256:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800525a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800525e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005262:	6812      	ldr	r2, [r2, #0]
 8005264:	440a      	add	r2, r1
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800526c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	011a      	lsls	r2, r3, #4
 8005276:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800527a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	4413      	add	r3, r2
 8005282:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005286:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800528a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800528e:	601a      	str	r2, [r3, #0]
 8005290:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005294:	b29a      	uxth	r2, r3
 8005296:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800529a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80052a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	891b      	ldrh	r3, [r3, #8]
 80052ae:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80052b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	6959      	ldr	r1, [r3, #20]
 80052be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052c2:	b29b      	uxth	r3, r3
 80052c4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80052c8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80052cc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80052d0:	6800      	ldr	r0, [r0, #0]
 80052d2:	f001 fc41 	bl	8006b58 <USB_WritePMA>
 80052d6:	f000 be0e 	b.w	8005ef6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80052da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	785b      	ldrb	r3, [r3, #1]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d16d      	bne.n	80053c6 <USB_EPStartXfer+0x75a>
 80052ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005304:	b29b      	uxth	r3, r3
 8005306:	461a      	mov	r2, r3
 8005308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800530a:	4413      	add	r3, r2
 800530c:	64bb      	str	r3, [r7, #72]	; 0x48
 800530e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005312:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	011a      	lsls	r2, r3, #4
 800531c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800531e:	4413      	add	r3, r2
 8005320:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005324:	647b      	str	r3, [r7, #68]	; 0x44
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d112      	bne.n	8005354 <USB_EPStartXfer+0x6e8>
 800532e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005330:	881b      	ldrh	r3, [r3, #0]
 8005332:	b29b      	uxth	r3, r3
 8005334:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005338:	b29a      	uxth	r2, r3
 800533a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800533c:	801a      	strh	r2, [r3, #0]
 800533e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005340:	881b      	ldrh	r3, [r3, #0]
 8005342:	b29b      	uxth	r3, r3
 8005344:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005348:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800534c:	b29a      	uxth	r2, r3
 800534e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005350:	801a      	strh	r2, [r3, #0]
 8005352:	e063      	b.n	800541c <USB_EPStartXfer+0x7b0>
 8005354:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005358:	2b3e      	cmp	r3, #62	; 0x3e
 800535a:	d817      	bhi.n	800538c <USB_EPStartXfer+0x720>
 800535c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005360:	085b      	lsrs	r3, r3, #1
 8005362:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005366:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	2b00      	cmp	r3, #0
 8005370:	d004      	beq.n	800537c <USB_EPStartXfer+0x710>
 8005372:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005376:	3301      	adds	r3, #1
 8005378:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800537c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005380:	b29b      	uxth	r3, r3
 8005382:	029b      	lsls	r3, r3, #10
 8005384:	b29a      	uxth	r2, r3
 8005386:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005388:	801a      	strh	r2, [r3, #0]
 800538a:	e047      	b.n	800541c <USB_EPStartXfer+0x7b0>
 800538c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005390:	095b      	lsrs	r3, r3, #5
 8005392:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005396:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800539a:	f003 031f 	and.w	r3, r3, #31
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d104      	bne.n	80053ac <USB_EPStartXfer+0x740>
 80053a2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053a6:	3b01      	subs	r3, #1
 80053a8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80053ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	029b      	lsls	r3, r3, #10
 80053b4:	b29b      	uxth	r3, r3
 80053b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80053ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80053be:	b29a      	uxth	r2, r3
 80053c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c2:	801a      	strh	r2, [r3, #0]
 80053c4:	e02a      	b.n	800541c <USB_EPStartXfer+0x7b0>
 80053c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	785b      	ldrb	r3, [r3, #1]
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d122      	bne.n	800541c <USB_EPStartXfer+0x7b0>
 80053d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	653b      	str	r3, [r7, #80]	; 0x50
 80053e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80053f0:	b29b      	uxth	r3, r3
 80053f2:	461a      	mov	r2, r3
 80053f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053f6:	4413      	add	r3, r2
 80053f8:	653b      	str	r3, [r7, #80]	; 0x50
 80053fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	011a      	lsls	r2, r3, #4
 8005408:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800540a:	4413      	add	r3, r2
 800540c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005410:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005412:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005416:	b29a      	uxth	r2, r3
 8005418:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541a:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800541c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005420:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	891b      	ldrh	r3, [r3, #8]
 8005428:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6959      	ldr	r1, [r3, #20]
 8005438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800543c:	b29b      	uxth	r3, r3
 800543e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005442:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005446:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800544a:	6800      	ldr	r0, [r0, #0]
 800544c:	f001 fb84 	bl	8006b58 <USB_WritePMA>
            ep->xfer_buff += len;
 8005450:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005454:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	695a      	ldr	r2, [r3, #20]
 800545c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005460:	441a      	add	r2, r3
 8005462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005466:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800546e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005472:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6a1a      	ldr	r2, [r3, #32]
 800547a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	429a      	cmp	r2, r3
 8005488:	d90f      	bls.n	80054aa <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800548a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6a1a      	ldr	r2, [r3, #32]
 8005496:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800549a:	1ad2      	subs	r2, r2, r3
 800549c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	621a      	str	r2, [r3, #32]
 80054a8:	e00e      	b.n	80054c8 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 80054aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6a1b      	ldr	r3, [r3, #32]
 80054b6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 80054ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	2200      	movs	r2, #0
 80054c6:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80054c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054cc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	643b      	str	r3, [r7, #64]	; 0x40
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	785b      	ldrb	r3, [r3, #1]
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d16d      	bne.n	80055c0 <USB_EPStartXfer+0x954>
 80054e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	63bb      	str	r3, [r7, #56]	; 0x38
 80054f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054fe:	b29b      	uxth	r3, r3
 8005500:	461a      	mov	r2, r3
 8005502:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005504:	4413      	add	r3, r2
 8005506:	63bb      	str	r3, [r7, #56]	; 0x38
 8005508:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800550c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	011a      	lsls	r2, r3, #4
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	4413      	add	r3, r2
 800551a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800551e:	637b      	str	r3, [r7, #52]	; 0x34
 8005520:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005524:	2b00      	cmp	r3, #0
 8005526:	d112      	bne.n	800554e <USB_EPStartXfer+0x8e2>
 8005528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800552a:	881b      	ldrh	r3, [r3, #0]
 800552c:	b29b      	uxth	r3, r3
 800552e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005532:	b29a      	uxth	r2, r3
 8005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005536:	801a      	strh	r2, [r3, #0]
 8005538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800553a:	881b      	ldrh	r3, [r3, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005542:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005546:	b29a      	uxth	r2, r3
 8005548:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800554a:	801a      	strh	r2, [r3, #0]
 800554c:	e05d      	b.n	800560a <USB_EPStartXfer+0x99e>
 800554e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005552:	2b3e      	cmp	r3, #62	; 0x3e
 8005554:	d817      	bhi.n	8005586 <USB_EPStartXfer+0x91a>
 8005556:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800555a:	085b      	lsrs	r3, r3, #1
 800555c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005560:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005564:	f003 0301 	and.w	r3, r3, #1
 8005568:	2b00      	cmp	r3, #0
 800556a:	d004      	beq.n	8005576 <USB_EPStartXfer+0x90a>
 800556c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005570:	3301      	adds	r3, #1
 8005572:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005576:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800557a:	b29b      	uxth	r3, r3
 800557c:	029b      	lsls	r3, r3, #10
 800557e:	b29a      	uxth	r2, r3
 8005580:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005582:	801a      	strh	r2, [r3, #0]
 8005584:	e041      	b.n	800560a <USB_EPStartXfer+0x99e>
 8005586:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558a:	095b      	lsrs	r3, r3, #5
 800558c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005590:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005594:	f003 031f 	and.w	r3, r3, #31
 8005598:	2b00      	cmp	r3, #0
 800559a:	d104      	bne.n	80055a6 <USB_EPStartXfer+0x93a>
 800559c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055a0:	3b01      	subs	r3, #1
 80055a2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80055a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055aa:	b29b      	uxth	r3, r3
 80055ac:	029b      	lsls	r3, r3, #10
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055b8:	b29a      	uxth	r2, r3
 80055ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055bc:	801a      	strh	r2, [r3, #0]
 80055be:	e024      	b.n	800560a <USB_EPStartXfer+0x99e>
 80055c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	785b      	ldrb	r3, [r3, #1]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d11c      	bne.n	800560a <USB_EPStartXfer+0x99e>
 80055d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055de:	b29b      	uxth	r3, r3
 80055e0:	461a      	mov	r2, r3
 80055e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055e4:	4413      	add	r3, r2
 80055e6:	643b      	str	r3, [r7, #64]	; 0x40
 80055e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	781b      	ldrb	r3, [r3, #0]
 80055f4:	011a      	lsls	r2, r3, #4
 80055f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055f8:	4413      	add	r3, r2
 80055fa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80055fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005604:	b29a      	uxth	r2, r3
 8005606:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005608:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800560a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800560e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	895b      	ldrh	r3, [r3, #10]
 8005616:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800561a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	6959      	ldr	r1, [r3, #20]
 8005626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800562a:	b29b      	uxth	r3, r3
 800562c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005630:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005634:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005638:	6800      	ldr	r0, [r0, #0]
 800563a:	f001 fa8d 	bl	8006b58 <USB_WritePMA>
 800563e:	f000 bc5a 	b.w	8005ef6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005642:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005646:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	6a1b      	ldr	r3, [r3, #32]
 800564e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005656:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800565a:	681a      	ldr	r2, [r3, #0]
 800565c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	781b      	ldrb	r3, [r3, #0]
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	4413      	add	r3, r2
 800566c:	881b      	ldrh	r3, [r3, #0]
 800566e:	b29b      	uxth	r3, r3
 8005670:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005674:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005678:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	781b      	ldrb	r3, [r3, #0]
 8005692:	009b      	lsls	r3, r3, #2
 8005694:	441a      	add	r2, r3
 8005696:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800569a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800569e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80056a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80056a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80056ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056be:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	461a      	mov	r2, r3
 80056cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ce:	4413      	add	r3, r2
 80056d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	781b      	ldrb	r3, [r3, #0]
 80056de:	011a      	lsls	r2, r3, #4
 80056e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056e2:	4413      	add	r3, r2
 80056e4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056e8:	65bb      	str	r3, [r7, #88]	; 0x58
 80056ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80056f2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80056f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	891b      	ldrh	r3, [r3, #8]
 8005700:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	6959      	ldr	r1, [r3, #20]
 8005710:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005714:	b29b      	uxth	r3, r3
 8005716:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800571a:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800571e:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005722:	6800      	ldr	r0, [r0, #0]
 8005724:	f001 fa18 	bl	8006b58 <USB_WritePMA>
 8005728:	e3e5      	b.n	8005ef6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800572a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800572e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	4413      	add	r3, r2
 8005744:	881b      	ldrh	r3, [r3, #0]
 8005746:	b29b      	uxth	r3, r3
 8005748:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800574c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005750:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005754:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005758:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800575c:	681a      	ldr	r2, [r3, #0]
 800575e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005762:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	441a      	add	r2, r3
 800576e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005772:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005776:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800577a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800577e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005782:	b29b      	uxth	r3, r3
 8005784:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	6a1a      	ldr	r2, [r3, #32]
 8005792:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005796:	1ad2      	subs	r2, r2, r3
 8005798:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800579c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80057a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057ac:	681a      	ldr	r2, [r3, #0]
 80057ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	781b      	ldrb	r3, [r3, #0]
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	881b      	ldrh	r3, [r3, #0]
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	f000 81bc 	beq.w	8005b44 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80057cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80057da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	785b      	ldrb	r3, [r3, #1]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d16d      	bne.n	80058c6 <USB_EPStartXfer+0xc5a>
 80057ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	67bb      	str	r3, [r7, #120]	; 0x78
 80057f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057fa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005804:	b29b      	uxth	r3, r3
 8005806:	461a      	mov	r2, r3
 8005808:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800580a:	4413      	add	r3, r2
 800580c:	67bb      	str	r3, [r7, #120]	; 0x78
 800580e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005812:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	781b      	ldrb	r3, [r3, #0]
 800581a:	011a      	lsls	r2, r3, #4
 800581c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800581e:	4413      	add	r3, r2
 8005820:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005824:	677b      	str	r3, [r7, #116]	; 0x74
 8005826:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582a:	2b00      	cmp	r3, #0
 800582c:	d112      	bne.n	8005854 <USB_EPStartXfer+0xbe8>
 800582e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005830:	881b      	ldrh	r3, [r3, #0]
 8005832:	b29b      	uxth	r3, r3
 8005834:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005838:	b29a      	uxth	r2, r3
 800583a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800583c:	801a      	strh	r2, [r3, #0]
 800583e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005840:	881b      	ldrh	r3, [r3, #0]
 8005842:	b29b      	uxth	r3, r3
 8005844:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005848:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800584c:	b29a      	uxth	r2, r3
 800584e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005850:	801a      	strh	r2, [r3, #0]
 8005852:	e060      	b.n	8005916 <USB_EPStartXfer+0xcaa>
 8005854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005858:	2b3e      	cmp	r3, #62	; 0x3e
 800585a:	d817      	bhi.n	800588c <USB_EPStartXfer+0xc20>
 800585c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005860:	085b      	lsrs	r3, r3, #1
 8005862:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005866:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d004      	beq.n	800587c <USB_EPStartXfer+0xc10>
 8005872:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005876:	3301      	adds	r3, #1
 8005878:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800587c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005880:	b29b      	uxth	r3, r3
 8005882:	029b      	lsls	r3, r3, #10
 8005884:	b29a      	uxth	r2, r3
 8005886:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005888:	801a      	strh	r2, [r3, #0]
 800588a:	e044      	b.n	8005916 <USB_EPStartXfer+0xcaa>
 800588c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005890:	095b      	lsrs	r3, r3, #5
 8005892:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005896:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800589a:	f003 031f 	and.w	r3, r3, #31
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d104      	bne.n	80058ac <USB_EPStartXfer+0xc40>
 80058a2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058a6:	3b01      	subs	r3, #1
 80058a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80058ac:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80058b0:	b29b      	uxth	r3, r3
 80058b2:	029b      	lsls	r3, r3, #10
 80058b4:	b29b      	uxth	r3, r3
 80058b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058be:	b29a      	uxth	r2, r3
 80058c0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058c2:	801a      	strh	r2, [r3, #0]
 80058c4:	e027      	b.n	8005916 <USB_EPStartXfer+0xcaa>
 80058c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	785b      	ldrb	r3, [r3, #1]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d11f      	bne.n	8005916 <USB_EPStartXfer+0xcaa>
 80058d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058e4:	b29b      	uxth	r3, r3
 80058e6:	461a      	mov	r2, r3
 80058e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058ec:	4413      	add	r3, r2
 80058ee:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80058f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	781b      	ldrb	r3, [r3, #0]
 80058fe:	011a      	lsls	r2, r3, #4
 8005900:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005904:	4413      	add	r3, r2
 8005906:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800590a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800590c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005910:	b29a      	uxth	r2, r3
 8005912:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005914:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800591a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	895b      	ldrh	r3, [r3, #10]
 8005922:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800592a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	6959      	ldr	r1, [r3, #20]
 8005932:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005936:	b29b      	uxth	r3, r3
 8005938:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800593c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005940:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005944:	6800      	ldr	r0, [r0, #0]
 8005946:	f001 f907 	bl	8006b58 <USB_WritePMA>
          ep->xfer_buff += len;
 800594a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800594e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695a      	ldr	r2, [r3, #20]
 8005956:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800595a:	441a      	add	r2, r3
 800595c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005960:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800596c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	6a1a      	ldr	r2, [r3, #32]
 8005974:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005978:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	691b      	ldr	r3, [r3, #16]
 8005980:	429a      	cmp	r2, r3
 8005982:	d90f      	bls.n	80059a4 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005984:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005988:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	6a1a      	ldr	r2, [r3, #32]
 8005990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005994:	1ad2      	subs	r2, r2, r3
 8005996:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	621a      	str	r2, [r3, #32]
 80059a2:	e00e      	b.n	80059c2 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 80059a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	6a1b      	ldr	r3, [r3, #32]
 80059b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80059b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2200      	movs	r2, #0
 80059c0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 80059c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	f000 8295 	beq.w	8005ef6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80059cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	785b      	ldrb	r3, [r3, #1]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d16d      	bne.n	8005ab8 <USB_EPStartXfer+0xe4c>
 80059dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059e0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80059e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ec:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	461a      	mov	r2, r3
 80059fa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80059fc:	4413      	add	r3, r2
 80059fe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	011a      	lsls	r2, r3, #4
 8005a0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a10:	4413      	add	r3, r2
 8005a12:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a16:	667b      	str	r3, [r7, #100]	; 0x64
 8005a18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d112      	bne.n	8005a46 <USB_EPStartXfer+0xdda>
 8005a20:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a22:	881b      	ldrh	r3, [r3, #0]
 8005a24:	b29b      	uxth	r3, r3
 8005a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a2e:	801a      	strh	r2, [r3, #0]
 8005a30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a32:	881b      	ldrh	r3, [r3, #0]
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a3e:	b29a      	uxth	r2, r3
 8005a40:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a42:	801a      	strh	r2, [r3, #0]
 8005a44:	e063      	b.n	8005b0e <USB_EPStartXfer+0xea2>
 8005a46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a4a:	2b3e      	cmp	r3, #62	; 0x3e
 8005a4c:	d817      	bhi.n	8005a7e <USB_EPStartXfer+0xe12>
 8005a4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a52:	085b      	lsrs	r3, r3, #1
 8005a54:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a5c:	f003 0301 	and.w	r3, r3, #1
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d004      	beq.n	8005a6e <USB_EPStartXfer+0xe02>
 8005a64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a68:	3301      	adds	r3, #1
 8005a6a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a72:	b29b      	uxth	r3, r3
 8005a74:	029b      	lsls	r3, r3, #10
 8005a76:	b29a      	uxth	r2, r3
 8005a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a7a:	801a      	strh	r2, [r3, #0]
 8005a7c:	e047      	b.n	8005b0e <USB_EPStartXfer+0xea2>
 8005a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a82:	095b      	lsrs	r3, r3, #5
 8005a84:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a8c:	f003 031f 	and.w	r3, r3, #31
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d104      	bne.n	8005a9e <USB_EPStartXfer+0xe32>
 8005a94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005a9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005aa2:	b29b      	uxth	r3, r3
 8005aa4:	029b      	lsls	r3, r3, #10
 8005aa6:	b29b      	uxth	r3, r3
 8005aa8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005aac:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ab0:	b29a      	uxth	r2, r3
 8005ab2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ab4:	801a      	strh	r2, [r3, #0]
 8005ab6:	e02a      	b.n	8005b0e <USB_EPStartXfer+0xea2>
 8005ab8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005abc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	785b      	ldrb	r3, [r3, #1]
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d122      	bne.n	8005b0e <USB_EPStartXfer+0xea2>
 8005ac8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005acc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	673b      	str	r3, [r7, #112]	; 0x70
 8005ad4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ad8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ae2:	b29b      	uxth	r3, r3
 8005ae4:	461a      	mov	r2, r3
 8005ae6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ae8:	4413      	add	r3, r2
 8005aea:	673b      	str	r3, [r7, #112]	; 0x70
 8005aec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005af0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	781b      	ldrb	r3, [r3, #0]
 8005af8:	011a      	lsls	r2, r3, #4
 8005afa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005afc:	4413      	add	r3, r2
 8005afe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005b04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b08:	b29a      	uxth	r2, r3
 8005b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	891b      	ldrh	r3, [r3, #8]
 8005b1a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005b1e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b22:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	6959      	ldr	r1, [r3, #20]
 8005b2a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b2e:	b29b      	uxth	r3, r3
 8005b30:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005b34:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005b38:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005b3c:	6800      	ldr	r0, [r0, #0]
 8005b3e:	f001 f80b 	bl	8006b58 <USB_WritePMA>
 8005b42:	e1d8      	b.n	8005ef6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005b44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	785b      	ldrb	r3, [r3, #1]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d178      	bne.n	8005c46 <USB_EPStartXfer+0xfda>
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	461a      	mov	r2, r3
 8005b74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b78:	4413      	add	r3, r2
 8005b7a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005b7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	781b      	ldrb	r3, [r3, #0]
 8005b8a:	011a      	lsls	r2, r3, #4
 8005b8c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005b90:	4413      	add	r3, r2
 8005b92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b96:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005b9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d116      	bne.n	8005bd0 <USB_EPStartXfer+0xf64>
 8005ba2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ba6:	881b      	ldrh	r3, [r3, #0]
 8005ba8:	b29b      	uxth	r3, r3
 8005baa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005bae:	b29a      	uxth	r2, r3
 8005bb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bb4:	801a      	strh	r2, [r3, #0]
 8005bb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bba:	881b      	ldrh	r3, [r3, #0]
 8005bbc:	b29b      	uxth	r3, r3
 8005bbe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc6:	b29a      	uxth	r2, r3
 8005bc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e06b      	b.n	8005ca8 <USB_EPStartXfer+0x103c>
 8005bd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bd4:	2b3e      	cmp	r3, #62	; 0x3e
 8005bd6:	d818      	bhi.n	8005c0a <USB_EPStartXfer+0xf9e>
 8005bd8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bdc:	085b      	lsrs	r3, r3, #1
 8005bde:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005be2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005be6:	f003 0301 	and.w	r3, r3, #1
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <USB_EPStartXfer+0xf8c>
 8005bee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005bf8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	029b      	lsls	r3, r3, #10
 8005c00:	b29a      	uxth	r2, r3
 8005c02:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c06:	801a      	strh	r2, [r3, #0]
 8005c08:	e04e      	b.n	8005ca8 <USB_EPStartXfer+0x103c>
 8005c0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c0e:	095b      	lsrs	r3, r3, #5
 8005c10:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c18:	f003 031f 	and.w	r3, r3, #31
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d104      	bne.n	8005c2a <USB_EPStartXfer+0xfbe>
 8005c20:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c24:	3b01      	subs	r3, #1
 8005c26:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005c2a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005c2e:	b29b      	uxth	r3, r3
 8005c30:	029b      	lsls	r3, r3, #10
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c38:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c42:	801a      	strh	r2, [r3, #0]
 8005c44:	e030      	b.n	8005ca8 <USB_EPStartXfer+0x103c>
 8005c46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d128      	bne.n	8005ca8 <USB_EPStartXfer+0x103c>
 8005c56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c68:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	461a      	mov	r2, r3
 8005c76:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005c80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	011a      	lsls	r2, r3, #4
 8005c8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005c92:	4413      	add	r3, r2
 8005c94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c98:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005c9c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ca0:	b29a      	uxth	r2, r3
 8005ca2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005ca6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005ca8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	891b      	ldrh	r3, [r3, #8]
 8005cb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	6959      	ldr	r1, [r3, #20]
 8005cc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc8:	b29b      	uxth	r3, r3
 8005cca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cd2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cd6:	6800      	ldr	r0, [r0, #0]
 8005cd8:	f000 ff3e 	bl	8006b58 <USB_WritePMA>
          ep->xfer_buff += len;
 8005cdc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ce0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	695a      	ldr	r2, [r3, #20]
 8005ce8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cec:	441a      	add	r2, r3
 8005cee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	6a1a      	ldr	r2, [r3, #32]
 8005d06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d0a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	429a      	cmp	r2, r3
 8005d14:	d90f      	bls.n	8005d36 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 8005d16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	6a1a      	ldr	r2, [r3, #32]
 8005d22:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d26:	1ad2      	subs	r2, r2, r3
 8005d28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	621a      	str	r2, [r3, #32]
 8005d34:	e00e      	b.n	8005d54 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6a1b      	ldr	r3, [r3, #32]
 8005d42:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	2200      	movs	r2, #0
 8005d52:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d54:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	f000 80cc 	beq.w	8005ef6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005d5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	785b      	ldrb	r3, [r3, #1]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d178      	bne.n	8005e6e <USB_EPStartXfer+0x1202>
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d98:	b29b      	uxth	r3, r3
 8005d9a:	461a      	mov	r2, r3
 8005d9c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005da0:	4413      	add	r3, r2
 8005da2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005da6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005daa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	781b      	ldrb	r3, [r3, #0]
 8005db2:	011a      	lsls	r2, r3, #4
 8005db4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005db8:	4413      	add	r3, r2
 8005dba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005dbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005dc2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d116      	bne.n	8005df8 <USB_EPStartXfer+0x118c>
 8005dca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005dce:	881b      	ldrh	r3, [r3, #0]
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dd6:	b29a      	uxth	r2, r3
 8005dd8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ddc:	801a      	strh	r2, [r3, #0]
 8005dde:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005df4:	801a      	strh	r2, [r3, #0]
 8005df6:	e064      	b.n	8005ec2 <USB_EPStartXfer+0x1256>
 8005df8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfc:	2b3e      	cmp	r3, #62	; 0x3e
 8005dfe:	d818      	bhi.n	8005e32 <USB_EPStartXfer+0x11c6>
 8005e00:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e04:	085b      	lsrs	r3, r3, #1
 8005e06:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0e:	f003 0301 	and.w	r3, r3, #1
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d004      	beq.n	8005e20 <USB_EPStartXfer+0x11b4>
 8005e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e1a:	3301      	adds	r3, #1
 8005e1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e24:	b29b      	uxth	r3, r3
 8005e26:	029b      	lsls	r3, r3, #10
 8005e28:	b29a      	uxth	r2, r3
 8005e2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e2e:	801a      	strh	r2, [r3, #0]
 8005e30:	e047      	b.n	8005ec2 <USB_EPStartXfer+0x1256>
 8005e32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e36:	095b      	lsrs	r3, r3, #5
 8005e38:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e40:	f003 031f 	and.w	r3, r3, #31
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	d104      	bne.n	8005e52 <USB_EPStartXfer+0x11e6>
 8005e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e4c:	3b01      	subs	r3, #1
 8005e4e:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	029b      	lsls	r3, r3, #10
 8005e5a:	b29b      	uxth	r3, r3
 8005e5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e64:	b29a      	uxth	r2, r3
 8005e66:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e6a:	801a      	strh	r2, [r3, #0]
 8005e6c:	e029      	b.n	8005ec2 <USB_EPStartXfer+0x1256>
 8005e6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e72:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	785b      	ldrb	r3, [r3, #1]
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d121      	bne.n	8005ec2 <USB_EPStartXfer+0x1256>
 8005e7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e82:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e94:	4413      	add	r3, r2
 8005e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	781b      	ldrb	r3, [r3, #0]
 8005ea6:	011a      	lsls	r2, r3, #4
 8005ea8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005eb2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005eb6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eba:	b29a      	uxth	r2, r3
 8005ebc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ec0:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005ec2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	895b      	ldrh	r3, [r3, #10]
 8005ece:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ed2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	6959      	ldr	r1, [r3, #20]
 8005ede:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ee8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005eec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ef0:	6800      	ldr	r0, [r0, #0]
 8005ef2:	f000 fe31 	bl	8006b58 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005ef6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005efa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005efe:	681a      	ldr	r2, [r3, #0]
 8005f00:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f04:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	781b      	ldrb	r3, [r3, #0]
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	4413      	add	r3, r2
 8005f10:	881b      	ldrh	r3, [r3, #0]
 8005f12:	b29b      	uxth	r3, r3
 8005f14:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f18:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f20:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f24:	8013      	strh	r3, [r2, #0]
 8005f26:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f2a:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f2e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f32:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f36:	8812      	ldrh	r2, [r2, #0]
 8005f38:	f082 0210 	eor.w	r2, r2, #16
 8005f3c:	801a      	strh	r2, [r3, #0]
 8005f3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f42:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f46:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005f4a:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 8005f4e:	8812      	ldrh	r2, [r2, #0]
 8005f50:	f082 0220 	eor.w	r2, r2, #32
 8005f54:	801a      	strh	r2, [r3, #0]
 8005f56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f5a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f5e:	681a      	ldr	r2, [r3, #0]
 8005f60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f64:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	781b      	ldrb	r3, [r3, #0]
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	441a      	add	r2, r3
 8005f70:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f74:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8005f78:	881b      	ldrh	r3, [r3, #0]
 8005f7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f8a:	b29b      	uxth	r3, r3
 8005f8c:	8013      	strh	r3, [r2, #0]
 8005f8e:	f000 bc9f 	b.w	80068d0 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f92:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f96:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	7b1b      	ldrb	r3, [r3, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f040 80ae 	bne.w	8006100 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	699a      	ldr	r2, [r3, #24]
 8005fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	429a      	cmp	r2, r3
 8005fbe:	d917      	bls.n	8005ff0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8005fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	691b      	ldr	r3, [r3, #16]
 8005fcc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fd4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	699a      	ldr	r2, [r3, #24]
 8005fdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fe0:	1ad2      	subs	r2, r2, r3
 8005fe2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005fe6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	619a      	str	r2, [r3, #24]
 8005fee:	e00e      	b.n	800600e <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 8005ff0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ff4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	699b      	ldr	r3, [r3, #24]
 8005ffc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8006000:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006004:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	2200      	movs	r2, #0
 800600c:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800600e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006012:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800601c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006020:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800602a:	b29b      	uxth	r3, r3
 800602c:	461a      	mov	r2, r3
 800602e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006032:	4413      	add	r3, r2
 8006034:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006038:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800603c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	781b      	ldrb	r3, [r3, #0]
 8006044:	011a      	lsls	r2, r3, #4
 8006046:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800604a:	4413      	add	r3, r2
 800604c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006050:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006058:	2b00      	cmp	r3, #0
 800605a:	d116      	bne.n	800608a <USB_EPStartXfer+0x141e>
 800605c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006060:	881b      	ldrh	r3, [r3, #0]
 8006062:	b29b      	uxth	r3, r3
 8006064:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006068:	b29a      	uxth	r2, r3
 800606a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800606e:	801a      	strh	r2, [r3, #0]
 8006070:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006074:	881b      	ldrh	r3, [r3, #0]
 8006076:	b29b      	uxth	r3, r3
 8006078:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800607c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006080:	b29a      	uxth	r2, r3
 8006082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	e3e8      	b.n	800685c <USB_EPStartXfer+0x1bf0>
 800608a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608e:	2b3e      	cmp	r3, #62	; 0x3e
 8006090:	d818      	bhi.n	80060c4 <USB_EPStartXfer+0x1458>
 8006092:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006096:	085b      	lsrs	r3, r3, #1
 8006098:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800609c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060a0:	f003 0301 	and.w	r3, r3, #1
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d004      	beq.n	80060b2 <USB_EPStartXfer+0x1446>
 80060a8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ac:	3301      	adds	r3, #1
 80060ae:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060b6:	b29b      	uxth	r3, r3
 80060b8:	029b      	lsls	r3, r3, #10
 80060ba:	b29a      	uxth	r2, r3
 80060bc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060c0:	801a      	strh	r2, [r3, #0]
 80060c2:	e3cb      	b.n	800685c <USB_EPStartXfer+0x1bf0>
 80060c4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d2:	f003 031f 	and.w	r3, r3, #31
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d104      	bne.n	80060e4 <USB_EPStartXfer+0x1478>
 80060da:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060de:	3b01      	subs	r3, #1
 80060e0:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060e4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060e8:	b29b      	uxth	r3, r3
 80060ea:	029b      	lsls	r3, r3, #10
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060f6:	b29a      	uxth	r2, r3
 80060f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060fc:	801a      	strh	r2, [r3, #0]
 80060fe:	e3ad      	b.n	800685c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8006100:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006104:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	78db      	ldrb	r3, [r3, #3]
 800610c:	2b02      	cmp	r3, #2
 800610e:	f040 8200 	bne.w	8006512 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8006112:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006116:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	785b      	ldrb	r3, [r3, #1]
 800611e:	2b00      	cmp	r3, #0
 8006120:	f040 8091 	bne.w	8006246 <USB_EPStartXfer+0x15da>
 8006124:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006128:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006136:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006140:	b29b      	uxth	r3, r3
 8006142:	461a      	mov	r2, r3
 8006144:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006148:	4413      	add	r3, r2
 800614a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800614e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	781b      	ldrb	r3, [r3, #0]
 800615a:	011a      	lsls	r2, r3, #4
 800615c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006160:	4413      	add	r3, r2
 8006162:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006166:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800616a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800616e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <USB_EPStartXfer+0x153c>
 800617a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e083      	b.n	80062b0 <USB_EPStartXfer+0x1644>
 80061a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	2b3e      	cmp	r3, #62	; 0x3e
 80061b6:	d820      	bhi.n	80061fa <USB_EPStartXfer+0x158e>
 80061b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	691b      	ldr	r3, [r3, #16]
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	691b      	ldr	r3, [r3, #16]
 80061d6:	f003 0301 	and.w	r3, r3, #1
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d004      	beq.n	80061e8 <USB_EPStartXfer+0x157c>
 80061de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061e2:	3301      	adds	r3, #1
 80061e4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061ec:	b29b      	uxth	r3, r3
 80061ee:	029b      	lsls	r3, r3, #10
 80061f0:	b29a      	uxth	r2, r3
 80061f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061f6:	801a      	strh	r2, [r3, #0]
 80061f8:	e05a      	b.n	80062b0 <USB_EPStartXfer+0x1644>
 80061fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80061fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	095b      	lsrs	r3, r3, #5
 8006208:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800620c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	691b      	ldr	r3, [r3, #16]
 8006218:	f003 031f 	and.w	r3, r3, #31
 800621c:	2b00      	cmp	r3, #0
 800621e:	d104      	bne.n	800622a <USB_EPStartXfer+0x15be>
 8006220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006224:	3b01      	subs	r3, #1
 8006226:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800622a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800622e:	b29b      	uxth	r3, r3
 8006230:	029b      	lsls	r3, r3, #10
 8006232:	b29b      	uxth	r3, r3
 8006234:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006238:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800623c:	b29a      	uxth	r2, r3
 800623e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006242:	801a      	strh	r2, [r3, #0]
 8006244:	e034      	b.n	80062b0 <USB_EPStartXfer+0x1644>
 8006246:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	785b      	ldrb	r3, [r3, #1]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d12c      	bne.n	80062b0 <USB_EPStartXfer+0x1644>
 8006256:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800625a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006264:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006268:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006272:	b29b      	uxth	r3, r3
 8006274:	461a      	mov	r2, r3
 8006276:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800627a:	4413      	add	r3, r2
 800627c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006280:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006284:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	781b      	ldrb	r3, [r3, #0]
 800628c:	011a      	lsls	r2, r3, #4
 800628e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006292:	4413      	add	r3, r2
 8006294:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800629c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691b      	ldr	r3, [r3, #16]
 80062a8:	b29a      	uxth	r2, r3
 80062aa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062ae:	801a      	strh	r2, [r3, #0]
 80062b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80062be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	785b      	ldrb	r3, [r3, #1]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	f040 8091 	bne.w	80063f2 <USB_EPStartXfer+0x1786>
 80062d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	461a      	mov	r2, r3
 80062f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80062f4:	4413      	add	r3, r2
 80062f6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80062fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	011a      	lsls	r2, r3, #4
 8006308:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800630c:	4413      	add	r3, r2
 800630e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006312:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006316:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800631a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d116      	bne.n	8006354 <USB_EPStartXfer+0x16e8>
 8006326:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800632a:	881b      	ldrh	r3, [r3, #0]
 800632c:	b29b      	uxth	r3, r3
 800632e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006332:	b29a      	uxth	r2, r3
 8006334:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006338:	801a      	strh	r2, [r3, #0]
 800633a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800633e:	881b      	ldrh	r3, [r3, #0]
 8006340:	b29b      	uxth	r3, r3
 8006342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800634a:	b29a      	uxth	r2, r3
 800634c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006350:	801a      	strh	r2, [r3, #0]
 8006352:	e07c      	b.n	800644e <USB_EPStartXfer+0x17e2>
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	691b      	ldr	r3, [r3, #16]
 8006360:	2b3e      	cmp	r3, #62	; 0x3e
 8006362:	d820      	bhi.n	80063a6 <USB_EPStartXfer+0x173a>
 8006364:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006368:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	691b      	ldr	r3, [r3, #16]
 8006370:	085b      	lsrs	r3, r3, #1
 8006372:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800637a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	691b      	ldr	r3, [r3, #16]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	2b00      	cmp	r3, #0
 8006388:	d004      	beq.n	8006394 <USB_EPStartXfer+0x1728>
 800638a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800638e:	3301      	adds	r3, #1
 8006390:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006394:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006398:	b29b      	uxth	r3, r3
 800639a:	029b      	lsls	r3, r3, #10
 800639c:	b29a      	uxth	r2, r3
 800639e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063a2:	801a      	strh	r2, [r3, #0]
 80063a4:	e053      	b.n	800644e <USB_EPStartXfer+0x17e2>
 80063a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	691b      	ldr	r3, [r3, #16]
 80063b2:	095b      	lsrs	r3, r3, #5
 80063b4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	691b      	ldr	r3, [r3, #16]
 80063c4:	f003 031f 	and.w	r3, r3, #31
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d104      	bne.n	80063d6 <USB_EPStartXfer+0x176a>
 80063cc:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063d0:	3b01      	subs	r3, #1
 80063d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80063d6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80063da:	b29b      	uxth	r3, r3
 80063dc:	029b      	lsls	r3, r3, #10
 80063de:	b29b      	uxth	r3, r3
 80063e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80063e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80063e8:	b29a      	uxth	r2, r3
 80063ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80063ee:	801a      	strh	r2, [r3, #0]
 80063f0:	e02d      	b.n	800644e <USB_EPStartXfer+0x17e2>
 80063f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	785b      	ldrb	r3, [r3, #1]
 80063fe:	2b01      	cmp	r3, #1
 8006400:	d125      	bne.n	800644e <USB_EPStartXfer+0x17e2>
 8006402:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006406:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006410:	b29b      	uxth	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006418:	4413      	add	r3, r2
 800641a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800641e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	781b      	ldrb	r3, [r3, #0]
 800642a:	011a      	lsls	r2, r3, #4
 800642c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006430:	4413      	add	r3, r2
 8006432:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800643a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800643e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	b29a      	uxth	r2, r3
 8006448:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800644c:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800644e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	69db      	ldr	r3, [r3, #28]
 800645a:	2b00      	cmp	r3, #0
 800645c:	f000 81fe 	beq.w	800685c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006464:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006468:	681a      	ldr	r2, [r3, #0]
 800646a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800646e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	781b      	ldrb	r3, [r3, #0]
 8006476:	009b      	lsls	r3, r3, #2
 8006478:	4413      	add	r3, r2
 800647a:	881b      	ldrh	r3, [r3, #0]
 800647c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006480:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006484:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006488:	2b00      	cmp	r3, #0
 800648a:	d005      	beq.n	8006498 <USB_EPStartXfer+0x182c>
 800648c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006490:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006494:	2b00      	cmp	r3, #0
 8006496:	d10d      	bne.n	80064b4 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006498:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800649c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	f040 81db 	bne.w	800685c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 80064a6:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80064aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	f040 81d4 	bne.w	800685c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80064b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	781b      	ldrb	r3, [r3, #0]
 80064ca:	009b      	lsls	r3, r3, #2
 80064cc:	4413      	add	r3, r2
 80064ce:	881b      	ldrh	r3, [r3, #0]
 80064d0:	b29b      	uxth	r3, r3
 80064d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064da:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80064de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	781b      	ldrb	r3, [r3, #0]
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	441a      	add	r2, r3
 80064f8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80064fc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006500:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006504:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006508:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800650c:	b29b      	uxth	r3, r3
 800650e:	8013      	strh	r3, [r2, #0]
 8006510:	e1a4      	b.n	800685c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8006512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	78db      	ldrb	r3, [r3, #3]
 800651e:	2b01      	cmp	r3, #1
 8006520:	f040 819a 	bne.w	8006858 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8006524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	699a      	ldr	r2, [r3, #24]
 8006530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	429a      	cmp	r2, r3
 800653e:	d917      	bls.n	8006570 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 8006540:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006544:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006550:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006554:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699a      	ldr	r2, [r3, #24]
 800655c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006560:	1ad2      	subs	r2, r2, r3
 8006562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	619a      	str	r2, [r3, #24]
 800656e:	e00e      	b.n	800658e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006570:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006574:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	699b      	ldr	r3, [r3, #24]
 800657c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006580:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006584:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	2200      	movs	r2, #0
 800658c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800658e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006592:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	785b      	ldrb	r3, [r3, #1]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d178      	bne.n	8006690 <USB_EPStartXfer+0x1a24>
 800659e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065ba:	b29b      	uxth	r3, r3
 80065bc:	461a      	mov	r2, r3
 80065be:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065c2:	4413      	add	r3, r2
 80065c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80065c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	781b      	ldrb	r3, [r3, #0]
 80065d4:	011a      	lsls	r2, r3, #4
 80065d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80065da:	4413      	add	r3, r2
 80065dc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80065e0:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80065e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d116      	bne.n	800661a <USB_EPStartXfer+0x19ae>
 80065ec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065f0:	881b      	ldrh	r3, [r3, #0]
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065f8:	b29a      	uxth	r2, r3
 80065fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80065fe:	801a      	strh	r2, [r3, #0]
 8006600:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006604:	881b      	ldrh	r3, [r3, #0]
 8006606:	b29b      	uxth	r3, r3
 8006608:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800660c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006610:	b29a      	uxth	r2, r3
 8006612:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006616:	801a      	strh	r2, [r3, #0]
 8006618:	e06b      	b.n	80066f2 <USB_EPStartXfer+0x1a86>
 800661a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800661e:	2b3e      	cmp	r3, #62	; 0x3e
 8006620:	d818      	bhi.n	8006654 <USB_EPStartXfer+0x19e8>
 8006622:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800662c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d004      	beq.n	8006642 <USB_EPStartXfer+0x19d6>
 8006638:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800663c:	3301      	adds	r3, #1
 800663e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006642:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006646:	b29b      	uxth	r3, r3
 8006648:	029b      	lsls	r3, r3, #10
 800664a:	b29a      	uxth	r2, r3
 800664c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006650:	801a      	strh	r2, [r3, #0]
 8006652:	e04e      	b.n	80066f2 <USB_EPStartXfer+0x1a86>
 8006654:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006658:	095b      	lsrs	r3, r3, #5
 800665a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800665e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006662:	f003 031f 	and.w	r3, r3, #31
 8006666:	2b00      	cmp	r3, #0
 8006668:	d104      	bne.n	8006674 <USB_EPStartXfer+0x1a08>
 800666a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800666e:	3b01      	subs	r3, #1
 8006670:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006674:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006678:	b29b      	uxth	r3, r3
 800667a:	029b      	lsls	r3, r3, #10
 800667c:	b29b      	uxth	r3, r3
 800667e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006682:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006686:	b29a      	uxth	r2, r3
 8006688:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800668c:	801a      	strh	r2, [r3, #0]
 800668e:	e030      	b.n	80066f2 <USB_EPStartXfer+0x1a86>
 8006690:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006694:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	785b      	ldrb	r3, [r3, #1]
 800669c:	2b01      	cmp	r3, #1
 800669e:	d128      	bne.n	80066f2 <USB_EPStartXfer+0x1a86>
 80066a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066b2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066bc:	b29b      	uxth	r3, r3
 80066be:	461a      	mov	r2, r3
 80066c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066c4:	4413      	add	r3, r2
 80066c6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 80066ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	781b      	ldrb	r3, [r3, #0]
 80066d6:	011a      	lsls	r2, r3, #4
 80066d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066dc:	4413      	add	r3, r2
 80066de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80066e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80066e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80066ea:	b29a      	uxth	r2, r3
 80066ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80066f0:	801a      	strh	r2, [r3, #0]
 80066f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006700:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006704:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	785b      	ldrb	r3, [r3, #1]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d178      	bne.n	8006802 <USB_EPStartXfer+0x1b96>
 8006710:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006714:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800671e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006722:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800672c:	b29b      	uxth	r3, r3
 800672e:	461a      	mov	r2, r3
 8006730:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006734:	4413      	add	r3, r2
 8006736:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800673a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800673e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	011a      	lsls	r2, r3, #4
 8006748:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800674c:	4413      	add	r3, r2
 800674e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006756:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800675a:	2b00      	cmp	r3, #0
 800675c:	d116      	bne.n	800678c <USB_EPStartXfer+0x1b20>
 800675e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006762:	881b      	ldrh	r3, [r3, #0]
 8006764:	b29b      	uxth	r3, r3
 8006766:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800676a:	b29a      	uxth	r2, r3
 800676c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006770:	801a      	strh	r2, [r3, #0]
 8006772:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006776:	881b      	ldrh	r3, [r3, #0]
 8006778:	b29b      	uxth	r3, r3
 800677a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800677e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006782:	b29a      	uxth	r2, r3
 8006784:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006788:	801a      	strh	r2, [r3, #0]
 800678a:	e067      	b.n	800685c <USB_EPStartXfer+0x1bf0>
 800678c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006790:	2b3e      	cmp	r3, #62	; 0x3e
 8006792:	d818      	bhi.n	80067c6 <USB_EPStartXfer+0x1b5a>
 8006794:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006798:	085b      	lsrs	r3, r3, #1
 800679a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800679e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d004      	beq.n	80067b4 <USB_EPStartXfer+0x1b48>
 80067aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ae:	3301      	adds	r3, #1
 80067b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067b4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	029b      	lsls	r3, r3, #10
 80067bc:	b29a      	uxth	r2, r3
 80067be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067c2:	801a      	strh	r2, [r3, #0]
 80067c4:	e04a      	b.n	800685c <USB_EPStartXfer+0x1bf0>
 80067c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067ca:	095b      	lsrs	r3, r3, #5
 80067cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80067d4:	f003 031f 	and.w	r3, r3, #31
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d104      	bne.n	80067e6 <USB_EPStartXfer+0x1b7a>
 80067dc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067e0:	3b01      	subs	r3, #1
 80067e2:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80067e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80067ea:	b29b      	uxth	r3, r3
 80067ec:	029b      	lsls	r3, r3, #10
 80067ee:	b29b      	uxth	r3, r3
 80067f0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80067f4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80067f8:	b29a      	uxth	r2, r3
 80067fa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80067fe:	801a      	strh	r2, [r3, #0]
 8006800:	e02c      	b.n	800685c <USB_EPStartXfer+0x1bf0>
 8006802:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006806:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	785b      	ldrb	r3, [r3, #1]
 800680e:	2b01      	cmp	r3, #1
 8006810:	d124      	bne.n	800685c <USB_EPStartXfer+0x1bf0>
 8006812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006816:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006820:	b29b      	uxth	r3, r3
 8006822:	461a      	mov	r2, r3
 8006824:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006828:	4413      	add	r3, r2
 800682a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800682e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006832:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	781b      	ldrb	r3, [r3, #0]
 800683a:	011a      	lsls	r2, r3, #4
 800683c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006840:	4413      	add	r3, r2
 8006842:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006846:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800684a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800684e:	b29a      	uxth	r2, r3
 8006850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006854:	801a      	strh	r2, [r3, #0]
 8006856:	e001      	b.n	800685c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
 800685a:	e03a      	b.n	80068d2 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800685c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006860:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006864:	681a      	ldr	r2, [r3, #0]
 8006866:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800686a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	781b      	ldrb	r3, [r3, #0]
 8006872:	009b      	lsls	r3, r3, #2
 8006874:	4413      	add	r3, r2
 8006876:	881b      	ldrh	r3, [r3, #0]
 8006878:	b29b      	uxth	r3, r3
 800687a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800687e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006882:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006886:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800688a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800688e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006892:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006896:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800689a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800689e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	009b      	lsls	r3, r3, #2
 80068b6:	441a      	add	r2, r3
 80068b8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80068bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068c4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068cc:	b29b      	uxth	r3, r3
 80068ce:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80068d0:	2300      	movs	r3, #0
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80068dc:	b480      	push	{r7}
 80068de:	b085      	sub	sp, #20
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
 80068e4:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	785b      	ldrb	r3, [r3, #1]
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d020      	beq.n	8006930 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80068ee:	687a      	ldr	r2, [r7, #4]
 80068f0:	683b      	ldr	r3, [r7, #0]
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	881b      	ldrh	r3, [r3, #0]
 80068fa:	b29b      	uxth	r3, r3
 80068fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006900:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006904:	81bb      	strh	r3, [r7, #12]
 8006906:	89bb      	ldrh	r3, [r7, #12]
 8006908:	f083 0310 	eor.w	r3, r3, #16
 800690c:	81bb      	strh	r3, [r7, #12]
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	009b      	lsls	r3, r3, #2
 8006916:	441a      	add	r2, r3
 8006918:	89bb      	ldrh	r3, [r7, #12]
 800691a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800691e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006926:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800692a:	b29b      	uxth	r3, r3
 800692c:	8013      	strh	r3, [r2, #0]
 800692e:	e01f      	b.n	8006970 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	781b      	ldrb	r3, [r3, #0]
 8006936:	009b      	lsls	r3, r3, #2
 8006938:	4413      	add	r3, r2
 800693a:	881b      	ldrh	r3, [r3, #0]
 800693c:	b29b      	uxth	r3, r3
 800693e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006946:	81fb      	strh	r3, [r7, #14]
 8006948:	89fb      	ldrh	r3, [r7, #14]
 800694a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800694e:	81fb      	strh	r3, [r7, #14]
 8006950:	687a      	ldr	r2, [r7, #4]
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	781b      	ldrb	r3, [r3, #0]
 8006956:	009b      	lsls	r3, r3, #2
 8006958:	441a      	add	r2, r3
 800695a:	89fb      	ldrh	r3, [r7, #14]
 800695c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006960:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006964:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006968:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800696c:	b29b      	uxth	r3, r3
 800696e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	bc80      	pop	{r7}
 800697a:	4770      	bx	lr

0800697c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800697c:	b480      	push	{r7}
 800697e:	b087      	sub	sp, #28
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
 8006984:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	7b1b      	ldrb	r3, [r3, #12]
 800698a:	2b00      	cmp	r3, #0
 800698c:	f040 809d 	bne.w	8006aca <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	785b      	ldrb	r3, [r3, #1]
 8006994:	2b00      	cmp	r3, #0
 8006996:	d04c      	beq.n	8006a32 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006998:	687a      	ldr	r2, [r7, #4]
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	781b      	ldrb	r3, [r3, #0]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	4413      	add	r3, r2
 80069a2:	881b      	ldrh	r3, [r3, #0]
 80069a4:	823b      	strh	r3, [r7, #16]
 80069a6:	8a3b      	ldrh	r3, [r7, #16]
 80069a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d01b      	beq.n	80069e8 <USB_EPClearStall+0x6c>
 80069b0:	687a      	ldr	r2, [r7, #4]
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	781b      	ldrb	r3, [r3, #0]
 80069b6:	009b      	lsls	r3, r3, #2
 80069b8:	4413      	add	r3, r2
 80069ba:	881b      	ldrh	r3, [r3, #0]
 80069bc:	b29b      	uxth	r3, r3
 80069be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80069c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069c6:	81fb      	strh	r3, [r7, #14]
 80069c8:	687a      	ldr	r2, [r7, #4]
 80069ca:	683b      	ldr	r3, [r7, #0]
 80069cc:	781b      	ldrb	r3, [r3, #0]
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	441a      	add	r2, r3
 80069d2:	89fb      	ldrh	r3, [r7, #14]
 80069d4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80069d8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80069dc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80069e0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80069e4:	b29b      	uxth	r3, r3
 80069e6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	78db      	ldrb	r3, [r3, #3]
 80069ec:	2b01      	cmp	r3, #1
 80069ee:	d06c      	beq.n	8006aca <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80069f0:	687a      	ldr	r2, [r7, #4]
 80069f2:	683b      	ldr	r3, [r7, #0]
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	4413      	add	r3, r2
 80069fa:	881b      	ldrh	r3, [r3, #0]
 80069fc:	b29b      	uxth	r3, r3
 80069fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a06:	81bb      	strh	r3, [r7, #12]
 8006a08:	89bb      	ldrh	r3, [r7, #12]
 8006a0a:	f083 0320 	eor.w	r3, r3, #32
 8006a0e:	81bb      	strh	r3, [r7, #12]
 8006a10:	687a      	ldr	r2, [r7, #4]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	781b      	ldrb	r3, [r3, #0]
 8006a16:	009b      	lsls	r3, r3, #2
 8006a18:	441a      	add	r2, r3
 8006a1a:	89bb      	ldrh	r3, [r7, #12]
 8006a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a24:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	8013      	strh	r3, [r2, #0]
 8006a30:	e04b      	b.n	8006aca <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006a32:	687a      	ldr	r2, [r7, #4]
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	781b      	ldrb	r3, [r3, #0]
 8006a38:	009b      	lsls	r3, r3, #2
 8006a3a:	4413      	add	r3, r2
 8006a3c:	881b      	ldrh	r3, [r3, #0]
 8006a3e:	82fb      	strh	r3, [r7, #22]
 8006a40:	8afb      	ldrh	r3, [r7, #22]
 8006a42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d01b      	beq.n	8006a82 <USB_EPClearStall+0x106>
 8006a4a:	687a      	ldr	r2, [r7, #4]
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a60:	82bb      	strh	r3, [r7, #20]
 8006a62:	687a      	ldr	r2, [r7, #4]
 8006a64:	683b      	ldr	r3, [r7, #0]
 8006a66:	781b      	ldrb	r3, [r3, #0]
 8006a68:	009b      	lsls	r3, r3, #2
 8006a6a:	441a      	add	r2, r3
 8006a6c:	8abb      	ldrh	r3, [r7, #20]
 8006a6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006a7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a7e:	b29b      	uxth	r3, r3
 8006a80:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	781b      	ldrb	r3, [r3, #0]
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4413      	add	r3, r2
 8006a8c:	881b      	ldrh	r3, [r3, #0]
 8006a8e:	b29b      	uxth	r3, r3
 8006a90:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a94:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a98:	827b      	strh	r3, [r7, #18]
 8006a9a:	8a7b      	ldrh	r3, [r7, #18]
 8006a9c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006aa0:	827b      	strh	r3, [r7, #18]
 8006aa2:	8a7b      	ldrh	r3, [r7, #18]
 8006aa4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006aa8:	827b      	strh	r3, [r7, #18]
 8006aaa:	687a      	ldr	r2, [r7, #4]
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	009b      	lsls	r3, r3, #2
 8006ab2:	441a      	add	r2, r3
 8006ab4:	8a7b      	ldrh	r3, [r7, #18]
 8006ab6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006aba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006abe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ac6:	b29b      	uxth	r3, r3
 8006ac8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006aca:	2300      	movs	r3, #0
}
 8006acc:	4618      	mov	r0, r3
 8006ace:	371c      	adds	r7, #28
 8006ad0:	46bd      	mov	sp, r7
 8006ad2:	bc80      	pop	{r7}
 8006ad4:	4770      	bx	lr

08006ad6 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006ad6:	b480      	push	{r7}
 8006ad8:	b083      	sub	sp, #12
 8006ada:	af00      	add	r7, sp, #0
 8006adc:	6078      	str	r0, [r7, #4]
 8006ade:	460b      	mov	r3, r1
 8006ae0:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006ae2:	78fb      	ldrb	r3, [r7, #3]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d103      	bne.n	8006af0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2280      	movs	r2, #128	; 0x80
 8006aec:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006af0:	2300      	movs	r3, #0
}
 8006af2:	4618      	mov	r0, r3
 8006af4:	370c      	adds	r7, #12
 8006af6:	46bd      	mov	sp, r7
 8006af8:	bc80      	pop	{r7}
 8006afa:	4770      	bx	lr

08006afc <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b083      	sub	sp, #12
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b04:	2300      	movs	r3, #0
}
 8006b06:	4618      	mov	r0, r3
 8006b08:	370c      	adds	r7, #12
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	bc80      	pop	{r7}
 8006b0e:	4770      	bx	lr

08006b10 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b083      	sub	sp, #12
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006b18:	2300      	movs	r3, #0
}
 8006b1a:	4618      	mov	r0, r3
 8006b1c:	370c      	adds	r7, #12
 8006b1e:	46bd      	mov	sp, r7
 8006b20:	bc80      	pop	{r7}
 8006b22:	4770      	bx	lr

08006b24 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b085      	sub	sp, #20
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006b32:	b29b      	uxth	r3, r3
 8006b34:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006b36:	68fb      	ldr	r3, [r7, #12]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bc80      	pop	{r7}
 8006b40:	4770      	bx	lr

08006b42 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006b42:	b480      	push	{r7}
 8006b44:	b083      	sub	sp, #12
 8006b46:	af00      	add	r7, sp, #0
 8006b48:	6078      	str	r0, [r7, #4]
 8006b4a:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	370c      	adds	r7, #12
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bc80      	pop	{r7}
 8006b56:	4770      	bx	lr

08006b58 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b08d      	sub	sp, #52	; 0x34
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	4611      	mov	r1, r2
 8006b64:	461a      	mov	r2, r3
 8006b66:	460b      	mov	r3, r1
 8006b68:	80fb      	strh	r3, [r7, #6]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006b6e:	88bb      	ldrh	r3, [r7, #4]
 8006b70:	3301      	adds	r3, #1
 8006b72:	085b      	lsrs	r3, r3, #1
 8006b74:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006b7a:	68bb      	ldr	r3, [r7, #8]
 8006b7c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006b7e:	88fb      	ldrh	r3, [r7, #6]
 8006b80:	005a      	lsls	r2, r3, #1
 8006b82:	69fb      	ldr	r3, [r7, #28]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b8a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006b8c:	6a3b      	ldr	r3, [r7, #32]
 8006b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b90:	e01e      	b.n	8006bd0 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b94:	781b      	ldrb	r3, [r3, #0]
 8006b96:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	3301      	adds	r3, #1
 8006b9c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ba0:	781b      	ldrb	r3, [r3, #0]
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	021b      	lsls	r3, r3, #8
 8006ba6:	b29b      	uxth	r3, r3
 8006ba8:	461a      	mov	r2, r3
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb6:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006bb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bba:	3302      	adds	r3, #2
 8006bbc:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006bbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc0:	3302      	adds	r3, #2
 8006bc2:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006bd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d1dd      	bne.n	8006b92 <USB_WritePMA+0x3a>
  }
}
 8006bd6:	bf00      	nop
 8006bd8:	bf00      	nop
 8006bda:	3734      	adds	r7, #52	; 0x34
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bc80      	pop	{r7}
 8006be0:	4770      	bx	lr

08006be2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006be2:	b480      	push	{r7}
 8006be4:	b08b      	sub	sp, #44	; 0x2c
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	60f8      	str	r0, [r7, #12]
 8006bea:	60b9      	str	r1, [r7, #8]
 8006bec:	4611      	mov	r1, r2
 8006bee:	461a      	mov	r2, r3
 8006bf0:	460b      	mov	r3, r1
 8006bf2:	80fb      	strh	r3, [r7, #6]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006bf8:	88bb      	ldrh	r3, [r7, #4]
 8006bfa:	085b      	lsrs	r3, r3, #1
 8006bfc:	b29b      	uxth	r3, r3
 8006bfe:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	005a      	lsls	r2, r3, #1
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	4413      	add	r3, r2
 8006c10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c14:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006c16:	69bb      	ldr	r3, [r7, #24]
 8006c18:	627b      	str	r3, [r7, #36]	; 0x24
 8006c1a:	e01b      	b.n	8006c54 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006c1c:	6a3b      	ldr	r3, [r7, #32]
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006c24:	6a3b      	ldr	r3, [r7, #32]
 8006c26:	3302      	adds	r3, #2
 8006c28:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c2a:	693b      	ldr	r3, [r7, #16]
 8006c2c:	b2da      	uxtb	r2, r3
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c32:	69fb      	ldr	r3, [r7, #28]
 8006c34:	3301      	adds	r3, #1
 8006c36:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006c38:	693b      	ldr	r3, [r7, #16]
 8006c3a:	0a1b      	lsrs	r3, r3, #8
 8006c3c:	b2da      	uxtb	r2, r3
 8006c3e:	69fb      	ldr	r3, [r7, #28]
 8006c40:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006c42:	69fb      	ldr	r3, [r7, #28]
 8006c44:	3301      	adds	r3, #1
 8006c46:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006c48:	6a3b      	ldr	r3, [r7, #32]
 8006c4a:	3302      	adds	r3, #2
 8006c4c:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c50:	3b01      	subs	r3, #1
 8006c52:	627b      	str	r3, [r7, #36]	; 0x24
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e0      	bne.n	8006c1c <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006c5a:	88bb      	ldrh	r3, [r7, #4]
 8006c5c:	f003 0301 	and.w	r3, r3, #1
 8006c60:	b29b      	uxth	r3, r3
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006c66:	6a3b      	ldr	r3, [r7, #32]
 8006c68:	881b      	ldrh	r3, [r3, #0]
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	b2da      	uxtb	r2, r3
 8006c72:	69fb      	ldr	r3, [r7, #28]
 8006c74:	701a      	strb	r2, [r3, #0]
  }
}
 8006c76:	bf00      	nop
 8006c78:	372c      	adds	r7, #44	; 0x2c
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bc80      	pop	{r7}
 8006c7e:	4770      	bx	lr

08006c80 <USBD_MSC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
 8006c88:	460b      	mov	r3, r1
 8006c8a:	70fb      	strb	r3, [r7, #3]
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	7c1b      	ldrb	r3, [r3, #16]
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d115      	bne.n	8006cc0 <USBD_MSC_Init+0x40>
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006c94:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c98:	2202      	movs	r2, #2
 8006c9a:	2101      	movs	r1, #1
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f002 fdd4 	bl	800984a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_HS_PACKET);
 8006caa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006cae:	2202      	movs	r2, #2
 8006cb0:	2181      	movs	r1, #129	; 0x81
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f002 fdc9 	bl	800984a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	62da      	str	r2, [r3, #44]	; 0x2c
 8006cbe:	e012      	b.n	8006ce6 <USBD_MSC_Init+0x66>
  }
  else
  {
    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006cc0:	2340      	movs	r3, #64	; 0x40
 8006cc2:	2202      	movs	r2, #2
 8006cc4:	2101      	movs	r1, #1
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f002 fdbf 	bl	800984a <USBD_LL_OpenEP>
    pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	2201      	movs	r2, #1
 8006cd0:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

    /* Open EP IN */
    USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK, MSC_MAX_FS_PACKET);
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	2202      	movs	r2, #2
 8006cd8:	2181      	movs	r1, #129	; 0x81
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f002 fdb5 	bl	800984a <USBD_LL_OpenEP>
    pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	2201      	movs	r2, #1
 8006ce4:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  pdev->pClassData = USBD_malloc(sizeof(USBD_MSC_BOT_HandleTypeDef));
 8006ce6:	f240 406c 	movw	r0, #1132	; 0x46c
 8006cea:	f002 fef5 	bl	8009ad8 <USBD_static_malloc>
 8006cee:	4602      	mov	r2, r0
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d101      	bne.n	8006d04 <USBD_MSC_Init+0x84>
  {
    return USBD_FAIL;
 8006d00:	2302      	movs	r3, #2
 8006d02:	e003      	b.n	8006d0c <USBD_MSC_Init+0x8c>
  }

  /* Init the BOT  layer */
  MSC_BOT_Init(pdev);
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 f9d9 	bl	80070bc <MSC_BOT_Init>

  return USBD_OK;
 8006d0a:	2300      	movs	r3, #0
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	3708      	adds	r7, #8
 8006d10:	46bd      	mov	sp, r7
 8006d12:	bd80      	pop	{r7, pc}

08006d14 <USBD_MSC_DeInit>:
  * @param  cfgidx: configuration index
  * @retval status
  */
uint8_t USBD_MSC_DeInit(USBD_HandleTypeDef *pdev,
                         uint8_t cfgidx)
{
 8006d14:	b580      	push	{r7, lr}
 8006d16:	b082      	sub	sp, #8
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
 8006d1c:	460b      	mov	r3, r1
 8006d1e:	70fb      	strb	r3, [r7, #3]
  /* Close MSC EPs */
  USBD_LL_CloseEP(pdev, MSC_EPOUT_ADDR);
 8006d20:	2101      	movs	r1, #1
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f002 fdb7 	bl	8009896 <USBD_LL_CloseEP>
  pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 0U;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, MSC_EPIN_ADDR);
 8006d30:	2181      	movs	r1, #129	; 0x81
 8006d32:	6878      	ldr	r0, [r7, #4]
 8006d34:	f002 fdaf 	bl	8009896 <USBD_LL_CloseEP>
  pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 0U;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* De-Init the BOT layer */
  MSC_BOT_DeInit(pdev);
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	f000 fa06 	bl	8007150 <MSC_BOT_DeInit>

  /* Free MSC Class Resources */
  if (pdev->pClassData != NULL)
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d009      	beq.n	8006d62 <USBD_MSC_DeInit+0x4e>
  {
    USBD_free(pdev->pClassData);
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d54:	4618      	mov	r0, r3
 8006d56:	f002 fecb 	bl	8009af0 <USBD_static_free>
    pdev->pClassData  = NULL;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8006d62:	2300      	movs	r3, #0
}
 8006d64:	4618      	mov	r0, r3
 8006d66:	3708      	adds	r7, #8
 8006d68:	46bd      	mov	sp, r7
 8006d6a:	bd80      	pop	{r7, pc}

08006d6c <USBD_MSC_Setup>:
* @param  pdev: device instance
* @param  req: USB request
* @retval status
*/
uint8_t USBD_MSC_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b086      	sub	sp, #24
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	6078      	str	r0, [r7, #4]
 8006d74:	6039      	str	r1, [r7, #0]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d7c:	613b      	str	r3, [r7, #16]
  uint8_t ret = USBD_OK;
 8006d7e:	2300      	movs	r3, #0
 8006d80:	75fb      	strb	r3, [r7, #23]
  uint16_t status_info = 0U;
 8006d82:	2300      	movs	r3, #0
 8006d84:	81fb      	strh	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	781b      	ldrb	r3, [r3, #0]
 8006d8a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d04d      	beq.n	8006e2e <USBD_MSC_Setup+0xc2>
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	f040 8113 	bne.w	8006fbe <USBD_MSC_Setup+0x252>
  {
    /* Class request */
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	785b      	ldrb	r3, [r3, #1]
 8006d9c:	2bfe      	cmp	r3, #254	; 0xfe
 8006d9e:	d002      	beq.n	8006da6 <USBD_MSC_Setup+0x3a>
 8006da0:	2bff      	cmp	r3, #255	; 0xff
 8006da2:	d024      	beq.n	8006dee <USBD_MSC_Setup+0x82>
 8006da4:	e03b      	b.n	8006e1e <USBD_MSC_Setup+0xb2>
      {
        case BOT_GET_MAX_LUN:
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	885b      	ldrh	r3, [r3, #2]
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d118      	bne.n	8006de0 <USBD_MSC_Setup+0x74>
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	88db      	ldrh	r3, [r3, #6]
 8006db2:	2b01      	cmp	r3, #1
 8006db4:	d114      	bne.n	8006de0 <USBD_MSC_Setup+0x74>
              ((req->bmRequest & 0x80U) == 0x80U))
 8006db6:	683b      	ldr	r3, [r7, #0]
 8006db8:	781b      	ldrb	r3, [r3, #0]
 8006dba:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 1U) &&
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	da0f      	bge.n	8006de0 <USBD_MSC_Setup+0x74>
          {
            hmsc->max_lun = (uint32_t)((USBD_StorageTypeDef *)pdev->pUserData)->GetMaxLun();
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006dc6:	699b      	ldr	r3, [r3, #24]
 8006dc8:	4798      	blx	r3
 8006dca:	4603      	mov	r3, r0
 8006dcc:	461a      	mov	r2, r3
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	601a      	str	r2, [r3, #0]
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->max_lun, 1U);
 8006dd2:	693b      	ldr	r3, [r7, #16]
 8006dd4:	2201      	movs	r2, #1
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f002 f992 	bl	8009102 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006dde:	e025      	b.n	8006e2c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006de0:	6839      	ldr	r1, [r7, #0]
 8006de2:	6878      	ldr	r0, [r7, #4]
 8006de4:	f002 f923 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 8006de8:	2302      	movs	r3, #2
 8006dea:	75fb      	strb	r3, [r7, #23]
          break;
 8006dec:	e01e      	b.n	8006e2c <USBD_MSC_Setup+0xc0>

        case BOT_RESET :
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	885b      	ldrh	r3, [r3, #2]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d10c      	bne.n	8006e10 <USBD_MSC_Setup+0xa4>
 8006df6:	683b      	ldr	r3, [r7, #0]
 8006df8:	88db      	ldrh	r3, [r3, #6]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d108      	bne.n	8006e10 <USBD_MSC_Setup+0xa4>
              ((req->bmRequest & 0x80U) != 0x80U))
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	781b      	ldrb	r3, [r3, #0]
 8006e02:	b25b      	sxtb	r3, r3
          if ((req->wValue  == 0U) && (req->wLength == 0U) &&
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	db03      	blt.n	8006e10 <USBD_MSC_Setup+0xa4>
          {
            MSC_BOT_Reset(pdev);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f987 	bl	800711c <MSC_BOT_Reset>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e0e:	e00d      	b.n	8006e2c <USBD_MSC_Setup+0xc0>
            USBD_CtlError(pdev, req);
 8006e10:	6839      	ldr	r1, [r7, #0]
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f002 f90b 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 8006e18:	2302      	movs	r3, #2
 8006e1a:	75fb      	strb	r3, [r7, #23]
          break;
 8006e1c:	e006      	b.n	8006e2c <USBD_MSC_Setup+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006e1e:	6839      	ldr	r1, [r7, #0]
 8006e20:	6878      	ldr	r0, [r7, #4]
 8006e22:	f002 f904 	bl	800902e <USBD_CtlError>
          ret = USBD_FAIL;
 8006e26:	2302      	movs	r3, #2
 8006e28:	75fb      	strb	r3, [r7, #23]
          break;
 8006e2a:	bf00      	nop
      }
      break;
 8006e2c:	e0ce      	b.n	8006fcc <USBD_MSC_Setup+0x260>
    /* Interface & Endpoint request */
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	785b      	ldrb	r3, [r3, #1]
 8006e32:	2b0b      	cmp	r3, #11
 8006e34:	f200 80bb 	bhi.w	8006fae <USBD_MSC_Setup+0x242>
 8006e38:	a201      	add	r2, pc, #4	; (adr r2, 8006e40 <USBD_MSC_Setup+0xd4>)
 8006e3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e3e:	bf00      	nop
 8006e40:	08006e71 	.word	0x08006e71
 8006e44:	08006ee7 	.word	0x08006ee7
 8006e48:	08006faf 	.word	0x08006faf
 8006e4c:	08006faf 	.word	0x08006faf
 8006e50:	08006faf 	.word	0x08006faf
 8006e54:	08006faf 	.word	0x08006faf
 8006e58:	08006faf 	.word	0x08006faf
 8006e5c:	08006faf 	.word	0x08006faf
 8006e60:	08006faf 	.word	0x08006faf
 8006e64:	08006faf 	.word	0x08006faf
 8006e68:	08006e99 	.word	0x08006e99
 8006e6c:	08006ec1 	.word	0x08006ec1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e76:	2b03      	cmp	r3, #3
 8006e78:	d107      	bne.n	8006e8a <USBD_MSC_Setup+0x11e>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8006e7a:	f107 030e 	add.w	r3, r7, #14
 8006e7e:	2202      	movs	r2, #2
 8006e80:	4619      	mov	r1, r3
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f002 f93d 	bl	8009102 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006e88:	e098      	b.n	8006fbc <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f002 f8ce 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 8006e92:	2302      	movs	r3, #2
 8006e94:	75fb      	strb	r3, [r7, #23]
          break;
 8006e96:	e091      	b.n	8006fbc <USBD_MSC_Setup+0x250>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e9e:	2b03      	cmp	r3, #3
 8006ea0:	d107      	bne.n	8006eb2 <USBD_MSC_Setup+0x146>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hmsc->interface, 1U);
 8006ea2:	693b      	ldr	r3, [r7, #16]
 8006ea4:	3304      	adds	r3, #4
 8006ea6:	2201      	movs	r2, #1
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f002 f929 	bl	8009102 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006eb0:	e084      	b.n	8006fbc <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006eb2:	6839      	ldr	r1, [r7, #0]
 8006eb4:	6878      	ldr	r0, [r7, #4]
 8006eb6:	f002 f8ba 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 8006eba:	2302      	movs	r3, #2
 8006ebc:	75fb      	strb	r3, [r7, #23]
          break;
 8006ebe:	e07d      	b.n	8006fbc <USBD_MSC_Setup+0x250>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ec6:	2b03      	cmp	r3, #3
 8006ec8:	d106      	bne.n	8006ed8 <USBD_MSC_Setup+0x16c>
          {
            hmsc->interface = (uint8_t)(req->wValue);
 8006eca:	683b      	ldr	r3, [r7, #0]
 8006ecc:	885b      	ldrh	r3, [r3, #2]
 8006ece:	b2db      	uxtb	r3, r3
 8006ed0:	461a      	mov	r2, r3
 8006ed2:	693b      	ldr	r3, [r7, #16]
 8006ed4:	605a      	str	r2, [r3, #4]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006ed6:	e071      	b.n	8006fbc <USBD_MSC_Setup+0x250>
            USBD_CtlError(pdev, req);
 8006ed8:	6839      	ldr	r1, [r7, #0]
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f002 f8a7 	bl	800902e <USBD_CtlError>
            ret = USBD_FAIL;
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	75fb      	strb	r3, [r7, #23]
          break;
 8006ee4:	e06a      	b.n	8006fbc <USBD_MSC_Setup+0x250>

        case USB_REQ_CLEAR_FEATURE:

          /* Flush the FIFO and Clear the stall status */
          USBD_LL_FlushEP(pdev, (uint8_t)req->wIndex);
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	889b      	ldrh	r3, [r3, #4]
 8006eea:	b2db      	uxtb	r3, r3
 8006eec:	4619      	mov	r1, r3
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f002 fcf0 	bl	80098d4 <USBD_LL_FlushEP>

          /* Reactivate the EP */
          USBD_LL_CloseEP(pdev, (uint8_t)req->wIndex);
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	889b      	ldrh	r3, [r3, #4]
 8006ef8:	b2db      	uxtb	r3, r3
 8006efa:	4619      	mov	r1, r3
 8006efc:	6878      	ldr	r0, [r7, #4]
 8006efe:	f002 fcca 	bl	8009896 <USBD_LL_CloseEP>
          if ((((uint8_t)req->wIndex) & 0x80U) == 0x80U)
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	889b      	ldrh	r3, [r3, #4]
 8006f06:	b25b      	sxtb	r3, r3
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	da23      	bge.n	8006f54 <USBD_MSC_Setup+0x1e8>
          {
            pdev->ep_in[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	889b      	ldrh	r3, [r3, #4]
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	f003 020f 	and.w	r2, r3, #15
 8006f16:	6879      	ldr	r1, [r7, #4]
 8006f18:	4613      	mov	r3, r2
 8006f1a:	009b      	lsls	r3, r3, #2
 8006f1c:	4413      	add	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	440b      	add	r3, r1
 8006f22:	3318      	adds	r3, #24
 8006f24:	2200      	movs	r2, #0
 8006f26:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	7c1b      	ldrb	r3, [r3, #16]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d107      	bne.n	8006f40 <USBD_MSC_Setup+0x1d4>
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006f30:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f34:	2202      	movs	r2, #2
 8006f36:	2181      	movs	r1, #129	; 0x81
 8006f38:	6878      	ldr	r0, [r7, #4]
 8006f3a:	f002 fc86 	bl	800984a <USBD_LL_OpenEP>
 8006f3e:	e005      	b.n	8006f4c <USBD_MSC_Setup+0x1e0>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP IN */
              USBD_LL_OpenEP(pdev, MSC_EPIN_ADDR, USBD_EP_TYPE_BULK,
 8006f40:	2340      	movs	r3, #64	; 0x40
 8006f42:	2202      	movs	r2, #2
 8006f44:	2181      	movs	r1, #129	; 0x81
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f002 fc7f 	bl	800984a <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_in[MSC_EPIN_ADDR & 0xFU].is_used = 1U;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2201      	movs	r2, #1
 8006f50:	62da      	str	r2, [r3, #44]	; 0x2c
 8006f52:	e024      	b.n	8006f9e <USBD_MSC_Setup+0x232>
          }
          else
          {
            pdev->ep_out[(uint8_t)req->wIndex & 0xFU].is_used = 0U;
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	889b      	ldrh	r3, [r3, #4]
 8006f58:	b2db      	uxtb	r3, r3
 8006f5a:	f003 020f 	and.w	r2, r3, #15
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	4613      	mov	r3, r2
 8006f62:	009b      	lsls	r3, r3, #2
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8006f6e:	2200      	movs	r2, #0
 8006f70:	601a      	str	r2, [r3, #0]
            if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	7c1b      	ldrb	r3, [r3, #16]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d107      	bne.n	8006f8a <USBD_MSC_Setup+0x21e>
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006f7a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006f7e:	2202      	movs	r2, #2
 8006f80:	2101      	movs	r1, #1
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f002 fc61 	bl	800984a <USBD_LL_OpenEP>
 8006f88:	e005      	b.n	8006f96 <USBD_MSC_Setup+0x22a>
                             MSC_MAX_HS_PACKET);
            }
            else
            {
              /* Open EP OUT */
              USBD_LL_OpenEP(pdev, MSC_EPOUT_ADDR, USBD_EP_TYPE_BULK,
 8006f8a:	2340      	movs	r3, #64	; 0x40
 8006f8c:	2202      	movs	r2, #2
 8006f8e:	2101      	movs	r1, #1
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f002 fc5a 	bl	800984a <USBD_LL_OpenEP>
                             MSC_MAX_FS_PACKET);
            }
            pdev->ep_out[MSC_EPOUT_ADDR & 0xFU].is_used = 1U;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2201      	movs	r2, #1
 8006f9a:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
          }

          /* Handle BOT error */
          MSC_BOT_CplClrFeature(pdev, (uint8_t)req->wIndex);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	889b      	ldrh	r3, [r3, #4]
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	4619      	mov	r1, r3
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f000 fa52 	bl	8007450 <MSC_BOT_CplClrFeature>
          break;
 8006fac:	e006      	b.n	8006fbc <USBD_MSC_Setup+0x250>

        default:
          USBD_CtlError(pdev, req);
 8006fae:	6839      	ldr	r1, [r7, #0]
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f002 f83c 	bl	800902e <USBD_CtlError>
          ret = USBD_FAIL;
 8006fb6:	2302      	movs	r3, #2
 8006fb8:	75fb      	strb	r3, [r7, #23]
          break;
 8006fba:	bf00      	nop
      }
      break;
 8006fbc:	e006      	b.n	8006fcc <USBD_MSC_Setup+0x260>

    default:
      USBD_CtlError(pdev, req);
 8006fbe:	6839      	ldr	r1, [r7, #0]
 8006fc0:	6878      	ldr	r0, [r7, #4]
 8006fc2:	f002 f834 	bl	800902e <USBD_CtlError>
      ret = USBD_FAIL;
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	75fb      	strb	r3, [r7, #23]
      break;
 8006fca:	bf00      	nop
  }

  return ret;
 8006fcc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fce:	4618      	mov	r0, r3
 8006fd0:	3718      	adds	r7, #24
 8006fd2:	46bd      	mov	sp, r7
 8006fd4:	bd80      	pop	{r7, pc}
 8006fd6:	bf00      	nop

08006fd8 <USBD_MSC_DataIn>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
 8006fde:	6078      	str	r0, [r7, #4]
 8006fe0:	460b      	mov	r3, r1
 8006fe2:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataIn(pdev, epnum);
 8006fe4:	78fb      	ldrb	r3, [r7, #3]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 f8c1 	bl	8007170 <MSC_BOT_DataIn>

  return USBD_OK;
 8006fee:	2300      	movs	r3, #0
}
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	3708      	adds	r7, #8
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	bd80      	pop	{r7, pc}

08006ff8 <USBD_MSC_DataOut>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
uint8_t USBD_MSC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006ff8:	b580      	push	{r7, lr}
 8006ffa:	b082      	sub	sp, #8
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
 8007000:	460b      	mov	r3, r1
 8007002:	70fb      	strb	r3, [r7, #3]
  MSC_BOT_DataOut(pdev, epnum);
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 f8e3 	bl	80071d4 <MSC_BOT_DataOut>

  return USBD_OK;
 800700e:	2300      	movs	r3, #0
}
 8007010:	4618      	mov	r0, r3
 8007012:	3708      	adds	r7, #8
 8007014:	46bd      	mov	sp, r7
 8007016:	bd80      	pop	{r7, pc}

08007018 <USBD_MSC_GetHSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetHSCfgDesc(uint16_t *length)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgHSDesc);
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2220      	movs	r2, #32
 8007024:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgHSDesc;
 8007026:	4b03      	ldr	r3, [pc, #12]	; (8007034 <USBD_MSC_GetHSCfgDesc+0x1c>)
}
 8007028:	4618      	mov	r0, r3
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	bc80      	pop	{r7}
 8007030:	4770      	bx	lr
 8007032:	bf00      	nop
 8007034:	20000044 	.word	0x20000044

08007038 <USBD_MSC_GetFSCfgDesc>:
*         return configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetFSCfgDesc(uint16_t *length)
{
 8007038:	b480      	push	{r7}
 800703a:	b083      	sub	sp, #12
 800703c:	af00      	add	r7, sp, #0
 800703e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_CfgFSDesc);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2220      	movs	r2, #32
 8007044:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_CfgFSDesc;
 8007046:	4b03      	ldr	r3, [pc, #12]	; (8007054 <USBD_MSC_GetFSCfgDesc+0x1c>)
}
 8007048:	4618      	mov	r0, r3
 800704a:	370c      	adds	r7, #12
 800704c:	46bd      	mov	sp, r7
 800704e:	bc80      	pop	{r7}
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	20000064 	.word	0x20000064

08007058 <USBD_MSC_GetOtherSpeedCfgDesc>:
*         return other speed configuration descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007058:	b480      	push	{r7}
 800705a:	b083      	sub	sp, #12
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_OtherSpeedCfgDesc);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	2220      	movs	r2, #32
 8007064:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_OtherSpeedCfgDesc;
 8007066:	4b03      	ldr	r3, [pc, #12]	; (8007074 <USBD_MSC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007068:	4618      	mov	r0, r3
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	bc80      	pop	{r7}
 8007070:	4770      	bx	lr
 8007072:	bf00      	nop
 8007074:	20000084 	.word	0x20000084

08007078 <USBD_MSC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t *USBD_MSC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007078:	b480      	push	{r7}
 800707a:	b083      	sub	sp, #12
 800707c:	af00      	add	r7, sp, #0
 800707e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_MSC_DeviceQualifierDesc);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	220a      	movs	r2, #10
 8007084:	801a      	strh	r2, [r3, #0]

  return USBD_MSC_DeviceQualifierDesc;
 8007086:	4b03      	ldr	r3, [pc, #12]	; (8007094 <USBD_MSC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007088:	4618      	mov	r0, r3
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	bc80      	pop	{r7}
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	200000a4 	.word	0x200000a4

08007098 <USBD_MSC_RegisterStorage>:
* @param  fops: storage callback
* @retval status
*/
uint8_t USBD_MSC_RegisterStorage(USBD_HandleTypeDef *pdev,
                                 USBD_StorageTypeDef *fops)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
  if (fops != NULL)
 80070a2:	683b      	ldr	r3, [r7, #0]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d003      	beq.n	80070b0 <USBD_MSC_RegisterStorage+0x18>
  {
    pdev->pUserData = fops;
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	683a      	ldr	r2, [r7, #0]
 80070ac:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return USBD_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bc80      	pop	{r7}
 80070ba:	4770      	bx	lr

080070bc <MSC_BOT_Init>:
*         Initialize the BOT Process
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_Init(USBD_HandleTypeDef  *pdev)
{
 80070bc:	b580      	push	{r7, lr}
 80070be:	b084      	sub	sp, #16
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ca:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state = USBD_BOT_IDLE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	725a      	strb	r2, [r3, #9]

  hmsc->scsi_sense_tail = 0U;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2200      	movs	r2, #0
 80070dc:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
  hmsc->scsi_sense_head = 0U;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c

  ((USBD_StorageTypeDef *)pdev->pUserData)->Init(0U);
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	2000      	movs	r0, #0
 80070f2:	4798      	blx	r3

  USBD_LL_FlushEP(pdev, MSC_EPOUT_ADDR);
 80070f4:	2101      	movs	r1, #1
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f002 fbec 	bl	80098d4 <USBD_LL_FlushEP>
  USBD_LL_FlushEP(pdev, MSC_EPIN_ADDR);
 80070fc:	2181      	movs	r1, #129	; 0x81
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f002 fbe8 	bl	80098d4 <USBD_LL_FlushEP>

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800710a:	231f      	movs	r3, #31
 800710c:	2101      	movs	r1, #1
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f002 fcab 	bl	8009a6a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007114:	bf00      	nop
 8007116:	3710      	adds	r7, #16
 8007118:	46bd      	mov	sp, r7
 800711a:	bd80      	pop	{r7, pc}

0800711c <MSC_BOT_Reset>:
*         Reset the BOT Machine
* @param  pdev: device instance
* @retval  None
*/
void MSC_BOT_Reset(USBD_HandleTypeDef  *pdev)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b084      	sub	sp, #16
 8007120:	af00      	add	r7, sp, #0
 8007122:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800712a:	60fb      	str	r3, [r7, #12]

  hmsc->bot_state  = USBD_BOT_IDLE;
 800712c:	68fb      	ldr	r3, [r7, #12]
 800712e:	2200      	movs	r2, #0
 8007130:	721a      	strb	r2, [r3, #8]
  hmsc->bot_status = USBD_BOT_STATUS_RECOVERY;
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	2201      	movs	r2, #1
 8007136:	725a      	strb	r2, [r3, #9]

  /* Prapare EP to Receive First BOT Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800713e:	231f      	movs	r3, #31
 8007140:	2101      	movs	r1, #1
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f002 fc91 	bl	8009a6a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 8007148:	bf00      	nop
 800714a:	3710      	adds	r7, #16
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <MSC_BOT_DeInit>:
*         Deinitialize the BOT Machine
* @param  pdev: device instance
* @retval None
*/
void MSC_BOT_DeInit(USBD_HandleTypeDef  *pdev)
{
 8007150:	b480      	push	{r7}
 8007152:	b085      	sub	sp, #20
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800715e:	60fb      	str	r3, [r7, #12]
  hmsc->bot_state = USBD_BOT_IDLE;
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	2200      	movs	r2, #0
 8007164:	721a      	strb	r2, [r3, #8]
}
 8007166:	bf00      	nop
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr

08007170 <MSC_BOT_DataIn>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataIn(USBD_HandleTypeDef  *pdev,
                    uint8_t epnum)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b084      	sub	sp, #16
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	460b      	mov	r3, r1
 800717a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007182:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	7a1b      	ldrb	r3, [r3, #8]
 8007188:	2b02      	cmp	r3, #2
 800718a:	d005      	beq.n	8007198 <MSC_BOT_DataIn+0x28>
 800718c:	2b02      	cmp	r3, #2
 800718e:	db1a      	blt.n	80071c6 <MSC_BOT_DataIn+0x56>
 8007190:	3b03      	subs	r3, #3
 8007192:	2b01      	cmp	r3, #1
 8007194:	d817      	bhi.n	80071c6 <MSC_BOT_DataIn+0x56>
 8007196:	e011      	b.n	80071bc <MSC_BOT_DataIn+0x4c>
  {
    case USBD_BOT_DATA_IN:
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f203 431b 	addw	r3, r3, #1051	; 0x41b
 80071a4:	461a      	mov	r2, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f97a 	bl	80074a0 <SCSI_ProcessCmd>
 80071ac:	4603      	mov	r3, r0
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	da0b      	bge.n	80071ca <MSC_BOT_DataIn+0x5a>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80071b2:	2101      	movs	r1, #1
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f000 f8f1 	bl	800739c <MSC_BOT_SendCSW>
      }
      break;
 80071ba:	e006      	b.n	80071ca <MSC_BOT_DataIn+0x5a>

    case USBD_BOT_SEND_DATA:
    case USBD_BOT_LAST_DATA_IN:
      MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 80071bc:	2100      	movs	r1, #0
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	f000 f8ec 	bl	800739c <MSC_BOT_SendCSW>
      break;
 80071c4:	e002      	b.n	80071cc <MSC_BOT_DataIn+0x5c>

    default:
      break;
 80071c6:	bf00      	nop
 80071c8:	e000      	b.n	80071cc <MSC_BOT_DataIn+0x5c>
      break;
 80071ca:	bf00      	nop
  }
}
 80071cc:	bf00      	nop
 80071ce:	3710      	adds	r7, #16
 80071d0:	46bd      	mov	sp, r7
 80071d2:	bd80      	pop	{r7, pc}

080071d4 <MSC_BOT_DataOut>:
* @param  epnum: endpoint index
* @retval None
*/
void MSC_BOT_DataOut(USBD_HandleTypeDef  *pdev,
                     uint8_t epnum)
{
 80071d4:	b580      	push	{r7, lr}
 80071d6:	b084      	sub	sp, #16
 80071d8:	af00      	add	r7, sp, #0
 80071da:	6078      	str	r0, [r7, #4]
 80071dc:	460b      	mov	r3, r1
 80071de:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071e6:	60fb      	str	r3, [r7, #12]

  switch (hmsc->bot_state)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	7a1b      	ldrb	r3, [r3, #8]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <MSC_BOT_DataOut+0x22>
 80071f0:	2b01      	cmp	r3, #1
 80071f2:	d004      	beq.n	80071fe <MSC_BOT_DataOut+0x2a>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
      }
      break;

    default:
      break;
 80071f4:	e015      	b.n	8007222 <MSC_BOT_DataOut+0x4e>
      MSC_BOT_CBW_Decode(pdev);
 80071f6:	6878      	ldr	r0, [r7, #4]
 80071f8:	f000 f818 	bl	800722c <MSC_BOT_CBW_Decode>
      break;
 80071fc:	e011      	b.n	8007222 <MSC_BOT_DataOut+0x4e>
      if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	f203 431b 	addw	r3, r3, #1051	; 0x41b
 800720a:	461a      	mov	r2, r3
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f947 	bl	80074a0 <SCSI_ProcessCmd>
 8007212:	4603      	mov	r3, r0
 8007214:	2b00      	cmp	r3, #0
 8007216:	da03      	bge.n	8007220 <MSC_BOT_DataOut+0x4c>
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 8007218:	2101      	movs	r1, #1
 800721a:	6878      	ldr	r0, [r7, #4]
 800721c:	f000 f8be 	bl	800739c <MSC_BOT_SendCSW>
      break;
 8007220:	bf00      	nop
  }
}
 8007222:	bf00      	nop
 8007224:	3710      	adds	r7, #16
 8007226:	46bd      	mov	sp, r7
 8007228:	bd80      	pop	{r7, pc}
	...

0800722c <MSC_BOT_CBW_Decode>:
*         Decode the CBW command and set the BOT state machine accordingly
* @param  pdev: device instance
* @retval None
*/
static void  MSC_BOT_CBW_Decode(USBD_HandleTypeDef  *pdev)
{
 800722c:	b580      	push	{r7, lr}
 800722e:	b084      	sub	sp, #16
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800723a:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dTag = hmsc->cbw.dTag;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	f8c3 2430 	str.w	r2, [r3, #1072]	; 0x430
  hmsc->csw.dDataResidue = hmsc->cbw.dDataLength;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007254:	2101      	movs	r1, #1
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f002 fc2a 	bl	8009ab0 <USBD_LL_GetRxDataSize>
 800725c:	4603      	mov	r3, r0
 800725e:	2b1f      	cmp	r3, #31
 8007260:	d114      	bne.n	800728c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007262:	68fb      	ldr	r3, [r7, #12]
 8007264:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
  if ((USBD_LL_GetRxDataSize(pdev, MSC_EPOUT_ADDR) != USBD_BOT_CBW_LENGTH) ||
 8007268:	4a32      	ldr	r2, [pc, #200]	; (8007334 <MSC_BOT_CBW_Decode+0x108>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d10e      	bne.n	800728c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bLUN > 1U) ||
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	f893 3419 	ldrb.w	r3, [r3, #1049]	; 0x419
      (hmsc->cbw.dSignature != USBD_BOT_CBW_SIGNATURE) ||
 8007274:	2b01      	cmp	r3, #1
 8007276:	d809      	bhi.n	800728c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
      (hmsc->cbw.bLUN > 1U) ||
 800727e:	2b00      	cmp	r3, #0
 8007280:	d004      	beq.n	800728c <MSC_BOT_CBW_Decode+0x60>
      (hmsc->cbw.bCBLength < 1U) || (hmsc->cbw.bCBLength > 16U))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	f893 341a 	ldrb.w	r3, [r3, #1050]	; 0x41a
 8007288:	2b10      	cmp	r3, #16
 800728a:	d90e      	bls.n	80072aa <MSC_BOT_CBW_Decode+0x7e>
  {

    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8007292:	2320      	movs	r3, #32
 8007294:	2205      	movs	r2, #5
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 fc48 	bl	8007b2c <SCSI_SenseCode>

    hmsc->bot_status = USBD_BOT_STATUS_ERROR;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	2202      	movs	r2, #2
 80072a0:	725a      	strb	r2, [r3, #9]
    MSC_BOT_Abort(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f8a6 	bl	80073f4 <MSC_BOT_Abort>
 80072a8:	e041      	b.n	800732e <MSC_BOT_CBW_Decode+0x102>
  }
  else
  {
    if (SCSI_ProcessCmd(pdev, hmsc->cbw.bLUN, &hmsc->cbw.CB[0]) < 0)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f203 431b 	addw	r3, r3, #1051	; 0x41b
 80072b6:	461a      	mov	r2, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f8f1 	bl	80074a0 <SCSI_ProcessCmd>
 80072be:	4603      	mov	r3, r0
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	da0c      	bge.n	80072de <MSC_BOT_CBW_Decode+0xb2>
    {
      if (hmsc->bot_state == USBD_BOT_NO_DATA)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	7a1b      	ldrb	r3, [r3, #8]
 80072c8:	2b05      	cmp	r3, #5
 80072ca:	d104      	bne.n	80072d6 <MSC_BOT_CBW_Decode+0xaa>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 80072cc:	2101      	movs	r1, #1
 80072ce:	6878      	ldr	r0, [r7, #4]
 80072d0:	f000 f864 	bl	800739c <MSC_BOT_SendCSW>
 80072d4:	e02b      	b.n	800732e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 f88c 	bl	80073f4 <MSC_BOT_Abort>
 80072dc:	e027      	b.n	800732e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    /*Burst xfer handled internally*/
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	7a1b      	ldrb	r3, [r3, #8]
 80072e2:	2b02      	cmp	r3, #2
 80072e4:	d022      	beq.n	800732c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	7a1b      	ldrb	r3, [r3, #8]
    else if ((hmsc->bot_state != USBD_BOT_DATA_IN) &&
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d01e      	beq.n	800732c <MSC_BOT_CBW_Decode+0x100>
             (hmsc->bot_state != USBD_BOT_LAST_DATA_IN))
 80072ee:	68fb      	ldr	r3, [r7, #12]
 80072f0:	7a1b      	ldrb	r3, [r3, #8]
             (hmsc->bot_state != USBD_BOT_DATA_OUT) &&
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d01a      	beq.n	800732c <MSC_BOT_CBW_Decode+0x100>
    {
      if (hmsc->bot_data_length > 0U)
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	895b      	ldrh	r3, [r3, #10]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d009      	beq.n	8007312 <MSC_BOT_CBW_Decode+0xe6>
      {
        MSC_BOT_SendData(pdev, hmsc->bot_data, hmsc->bot_data_length);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f103 010c 	add.w	r1, r3, #12
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	895b      	ldrh	r3, [r3, #10]
 8007308:	461a      	mov	r2, r3
 800730a:	6878      	ldr	r0, [r7, #4]
 800730c:	f000 f814 	bl	8007338 <MSC_BOT_SendData>
      if (hmsc->bot_data_length > 0U)
 8007310:	e00d      	b.n	800732e <MSC_BOT_CBW_Decode+0x102>
      }
      else if (hmsc->bot_data_length == 0U)
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	895b      	ldrh	r3, [r3, #10]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d104      	bne.n	8007324 <MSC_BOT_CBW_Decode+0xf8>
      {
        MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 800731a:	2100      	movs	r1, #0
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 f83d 	bl	800739c <MSC_BOT_SendCSW>
      if (hmsc->bot_data_length > 0U)
 8007322:	e004      	b.n	800732e <MSC_BOT_CBW_Decode+0x102>
      }
      else
      {
        MSC_BOT_Abort(pdev);
 8007324:	6878      	ldr	r0, [r7, #4]
 8007326:	f000 f865 	bl	80073f4 <MSC_BOT_Abort>
      if (hmsc->bot_data_length > 0U)
 800732a:	e000      	b.n	800732e <MSC_BOT_CBW_Decode+0x102>
      }
    }
    else
    {
      return;
 800732c:	bf00      	nop
    }
  }
}
 800732e:	3710      	adds	r7, #16
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}
 8007334:	43425355 	.word	0x43425355

08007338 <MSC_BOT_SendData>:
* @param  len: Data Length
* @retval None
*/
static void  MSC_BOT_SendData(USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                              uint16_t len)
{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	4613      	mov	r3, r2
 8007344:	80fb      	strh	r3, [r7, #6]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800734c:	617b      	str	r3, [r7, #20]

  uint16_t length = (uint16_t)MIN(hmsc->cbw.dDataLength, len);
 800734e:	697b      	ldr	r3, [r7, #20]
 8007350:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8007354:	88fb      	ldrh	r3, [r7, #6]
 8007356:	429a      	cmp	r2, r3
 8007358:	d204      	bcs.n	8007364 <MSC_BOT_SendData+0x2c>
 800735a:	697b      	ldr	r3, [r7, #20]
 800735c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007360:	b29b      	uxth	r3, r3
 8007362:	e000      	b.n	8007366 <MSC_BOT_SendData+0x2e>
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	827b      	strh	r3, [r7, #18]

  hmsc->csw.dDataResidue -= len;
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 800736e:	88fb      	ldrh	r3, [r7, #6]
 8007370:	1ad2      	subs	r2, r2, r3
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434
  hmsc->csw.bStatus = USBD_CSW_CMD_PASSED;
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	2200      	movs	r2, #0
 800737c:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
  hmsc->bot_state = USBD_BOT_SEND_DATA;
 8007380:	697b      	ldr	r3, [r7, #20]
 8007382:	2204      	movs	r2, #4
 8007384:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, pbuf, length);
 8007386:	8a7b      	ldrh	r3, [r7, #18]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	2181      	movs	r1, #129	; 0x81
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f002 fb49 	bl	8009a24 <USBD_LL_Transmit>
}
 8007392:	bf00      	nop
 8007394:	3718      	adds	r7, #24
 8007396:	46bd      	mov	sp, r7
 8007398:	bd80      	pop	{r7, pc}
	...

0800739c <MSC_BOT_SendCSW>:
* @param  status : CSW status
* @retval None
*/
void  MSC_BOT_SendCSW(USBD_HandleTypeDef  *pdev,
                      uint8_t CSW_Status)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	460b      	mov	r3, r1
 80073a6:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073ae:	60fb      	str	r3, [r7, #12]

  hmsc->csw.dSignature = USBD_BOT_CSW_SIGNATURE;
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	4a0f      	ldr	r2, [pc, #60]	; (80073f0 <MSC_BOT_SendCSW+0x54>)
 80073b4:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
  hmsc->csw.bStatus = CSW_Status;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	f883 2438 	strb.w	r2, [r3, #1080]	; 0x438
  hmsc->bot_state = USBD_BOT_IDLE;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	2200      	movs	r2, #0
 80073c4:	721a      	strb	r2, [r3, #8]

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, (uint8_t *)(void *)&hmsc->csw,
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	f203 422c 	addw	r2, r3, #1068	; 0x42c
 80073cc:	230d      	movs	r3, #13
 80073ce:	2181      	movs	r1, #129	; 0x81
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f002 fb27 	bl	8009a24 <USBD_LL_Transmit>
                   USBD_BOT_CSW_LENGTH);

  /* Prepare EP to Receive next Cmd */
  USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80073dc:	231f      	movs	r3, #31
 80073de:	2101      	movs	r1, #1
 80073e0:	6878      	ldr	r0, [r7, #4]
 80073e2:	f002 fb42 	bl	8009a6a <USBD_LL_PrepareReceive>
                         USBD_BOT_CBW_LENGTH);
}
 80073e6:	bf00      	nop
 80073e8:	3710      	adds	r7, #16
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	53425355 	.word	0x53425355

080073f4 <MSC_BOT_Abort>:
* @param  pdev: device instance
* @retval status
*/

static void  MSC_BOT_Abort(USBD_HandleTypeDef  *pdev)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b084      	sub	sp, #16
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007402:	60fb      	str	r3, [r7, #12]

  if ((hmsc->cbw.bmFlags == 0U) &&
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10c      	bne.n	8007428 <MSC_BOT_Abort+0x34>
      (hmsc->cbw.dDataLength != 0U) &&
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
  if ((hmsc->cbw.bmFlags == 0U) &&
 8007414:	2b00      	cmp	r3, #0
 8007416:	d007      	beq.n	8007428 <MSC_BOT_Abort+0x34>
      (hmsc->bot_status == USBD_BOT_STATUS_NORMAL))
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	7a5b      	ldrb	r3, [r3, #9]
      (hmsc->cbw.dDataLength != 0U) &&
 800741c:	2b00      	cmp	r3, #0
 800741e:	d103      	bne.n	8007428 <MSC_BOT_Abort+0x34>
  {
    USBD_LL_StallEP(pdev, MSC_EPOUT_ADDR);
 8007420:	2101      	movs	r1, #1
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f002 fa75 	bl	8009912 <USBD_LL_StallEP>
  }

  USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 8007428:	2181      	movs	r1, #129	; 0x81
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	f002 fa71 	bl	8009912 <USBD_LL_StallEP>

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR)
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	7a5b      	ldrb	r3, [r3, #9]
 8007434:	2b02      	cmp	r3, #2
 8007436:	d107      	bne.n	8007448 <MSC_BOT_Abort+0x54>
  {
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, (uint8_t *)(void *)&hmsc->cbw,
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800743e:	231f      	movs	r3, #31
 8007440:	2101      	movs	r1, #1
 8007442:	6878      	ldr	r0, [r7, #4]
 8007444:	f002 fb11 	bl	8009a6a <USBD_LL_PrepareReceive>
                           USBD_BOT_CBW_LENGTH);
  }
}
 8007448:	bf00      	nop
 800744a:	3710      	adds	r7, #16
 800744c:	46bd      	mov	sp, r7
 800744e:	bd80      	pop	{r7, pc}

08007450 <MSC_BOT_CplClrFeature>:
* @param  epnum: endpoint index
* @retval None
*/

void  MSC_BOT_CplClrFeature(USBD_HandleTypeDef  *pdev, uint8_t epnum)
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]
 8007458:	460b      	mov	r3, r1
 800745a:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007462:	60fb      	str	r3, [r7, #12]

  if (hmsc->bot_status == USBD_BOT_STATUS_ERROR) /* Bad CBW Signature */
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	7a5b      	ldrb	r3, [r3, #9]
 8007468:	2b02      	cmp	r3, #2
 800746a:	d107      	bne.n	800747c <MSC_BOT_CplClrFeature+0x2c>
  {
    USBD_LL_StallEP(pdev, MSC_EPIN_ADDR);
 800746c:	2181      	movs	r1, #129	; 0x81
 800746e:	6878      	ldr	r0, [r7, #4]
 8007470:	f002 fa4f 	bl	8009912 <USBD_LL_StallEP>
    hmsc->bot_status = USBD_BOT_STATUS_NORMAL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2200      	movs	r2, #0
 8007478:	725a      	strb	r2, [r3, #9]
 800747a:	e00d      	b.n	8007498 <MSC_BOT_CplClrFeature+0x48>
  }
  else if (((epnum & 0x80U) == 0x80U) && (hmsc->bot_status != USBD_BOT_STATUS_RECOVERY))
 800747c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007480:	2b00      	cmp	r3, #0
 8007482:	da08      	bge.n	8007496 <MSC_BOT_CplClrFeature+0x46>
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	7a5b      	ldrb	r3, [r3, #9]
 8007488:	2b01      	cmp	r3, #1
 800748a:	d004      	beq.n	8007496 <MSC_BOT_CplClrFeature+0x46>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_FAILED);
 800748c:	2101      	movs	r1, #1
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff ff84 	bl	800739c <MSC_BOT_SendCSW>
 8007494:	e000      	b.n	8007498 <MSC_BOT_CplClrFeature+0x48>
  }
  else
  {
    return;
 8007496:	bf00      	nop
  }
}
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <SCSI_ProcessCmd>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
int8_t SCSI_ProcessCmd(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *cmd)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	60f8      	str	r0, [r7, #12]
 80074a8:	460b      	mov	r3, r1
 80074aa:	607a      	str	r2, [r7, #4]
 80074ac:	72fb      	strb	r3, [r7, #11]
  switch (cmd[0])
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	781b      	ldrb	r3, [r3, #0]
 80074b2:	2b5a      	cmp	r3, #90	; 0x5a
 80074b4:	f200 810e 	bhi.w	80076d4 <SCSI_ProcessCmd+0x234>
 80074b8:	a201      	add	r2, pc, #4	; (adr r2, 80074c0 <SCSI_ProcessCmd+0x20>)
 80074ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074be:	bf00      	nop
 80074c0:	0800762d 	.word	0x0800762d
 80074c4:	080076d5 	.word	0x080076d5
 80074c8:	080076d5 	.word	0x080076d5
 80074cc:	0800763b 	.word	0x0800763b
 80074d0:	080076d5 	.word	0x080076d5
 80074d4:	080076d5 	.word	0x080076d5
 80074d8:	080076d5 	.word	0x080076d5
 80074dc:	080076d5 	.word	0x080076d5
 80074e0:	080076d5 	.word	0x080076d5
 80074e4:	080076d5 	.word	0x080076d5
 80074e8:	080076d5 	.word	0x080076d5
 80074ec:	080076d5 	.word	0x080076d5
 80074f0:	080076d5 	.word	0x080076d5
 80074f4:	080076d5 	.word	0x080076d5
 80074f8:	080076d5 	.word	0x080076d5
 80074fc:	080076d5 	.word	0x080076d5
 8007500:	080076d5 	.word	0x080076d5
 8007504:	080076d5 	.word	0x080076d5
 8007508:	08007649 	.word	0x08007649
 800750c:	080076d5 	.word	0x080076d5
 8007510:	080076d5 	.word	0x080076d5
 8007514:	080076d5 	.word	0x080076d5
 8007518:	080076d5 	.word	0x080076d5
 800751c:	080076d5 	.word	0x080076d5
 8007520:	080076d5 	.word	0x080076d5
 8007524:	080076d5 	.word	0x080076d5
 8007528:	08007673 	.word	0x08007673
 800752c:	08007657 	.word	0x08007657
 8007530:	080076d5 	.word	0x080076d5
 8007534:	080076d5 	.word	0x080076d5
 8007538:	08007665 	.word	0x08007665
 800753c:	080076d5 	.word	0x080076d5
 8007540:	080076d5 	.word	0x080076d5
 8007544:	080076d5 	.word	0x080076d5
 8007548:	080076d5 	.word	0x080076d5
 800754c:	0800768f 	.word	0x0800768f
 8007550:	080076d5 	.word	0x080076d5
 8007554:	0800769d 	.word	0x0800769d
 8007558:	080076d5 	.word	0x080076d5
 800755c:	080076d5 	.word	0x080076d5
 8007560:	080076ab 	.word	0x080076ab
 8007564:	080076d5 	.word	0x080076d5
 8007568:	080076b9 	.word	0x080076b9
 800756c:	080076d5 	.word	0x080076d5
 8007570:	080076d5 	.word	0x080076d5
 8007574:	080076d5 	.word	0x080076d5
 8007578:	080076d5 	.word	0x080076d5
 800757c:	080076c7 	.word	0x080076c7
 8007580:	080076d5 	.word	0x080076d5
 8007584:	080076d5 	.word	0x080076d5
 8007588:	080076d5 	.word	0x080076d5
 800758c:	080076d5 	.word	0x080076d5
 8007590:	080076d5 	.word	0x080076d5
 8007594:	080076d5 	.word	0x080076d5
 8007598:	080076d5 	.word	0x080076d5
 800759c:	080076d5 	.word	0x080076d5
 80075a0:	080076d5 	.word	0x080076d5
 80075a4:	080076d5 	.word	0x080076d5
 80075a8:	080076d5 	.word	0x080076d5
 80075ac:	080076d5 	.word	0x080076d5
 80075b0:	080076d5 	.word	0x080076d5
 80075b4:	080076d5 	.word	0x080076d5
 80075b8:	080076d5 	.word	0x080076d5
 80075bc:	080076d5 	.word	0x080076d5
 80075c0:	080076d5 	.word	0x080076d5
 80075c4:	080076d5 	.word	0x080076d5
 80075c8:	080076d5 	.word	0x080076d5
 80075cc:	080076d5 	.word	0x080076d5
 80075d0:	080076d5 	.word	0x080076d5
 80075d4:	080076d5 	.word	0x080076d5
 80075d8:	080076d5 	.word	0x080076d5
 80075dc:	080076d5 	.word	0x080076d5
 80075e0:	080076d5 	.word	0x080076d5
 80075e4:	080076d5 	.word	0x080076d5
 80075e8:	080076d5 	.word	0x080076d5
 80075ec:	080076d5 	.word	0x080076d5
 80075f0:	080076d5 	.word	0x080076d5
 80075f4:	080076d5 	.word	0x080076d5
 80075f8:	080076d5 	.word	0x080076d5
 80075fc:	080076d5 	.word	0x080076d5
 8007600:	080076d5 	.word	0x080076d5
 8007604:	080076d5 	.word	0x080076d5
 8007608:	080076d5 	.word	0x080076d5
 800760c:	080076d5 	.word	0x080076d5
 8007610:	080076d5 	.word	0x080076d5
 8007614:	080076d5 	.word	0x080076d5
 8007618:	080076d5 	.word	0x080076d5
 800761c:	080076d5 	.word	0x080076d5
 8007620:	080076d5 	.word	0x080076d5
 8007624:	080076d5 	.word	0x080076d5
 8007628:	08007681 	.word	0x08007681
  {
    case SCSI_TEST_UNIT_READY:
      SCSI_TestUnitReady(pdev, lun, cmd);
 800762c:	7afb      	ldrb	r3, [r7, #11]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	4619      	mov	r1, r3
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f85c 	bl	80076f0 <SCSI_TestUnitReady>
      break;
 8007638:	e055      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_REQUEST_SENSE:
      SCSI_RequestSense(pdev, lun, cmd);
 800763a:	7afb      	ldrb	r3, [r7, #11]
 800763c:	687a      	ldr	r2, [r7, #4]
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f000 fa09 	bl	8007a58 <SCSI_RequestSense>
      break;
 8007646:	e04e      	b.n	80076e6 <SCSI_ProcessCmd+0x246>
    case SCSI_INQUIRY:
      SCSI_Inquiry(pdev, lun, cmd);
 8007648:	7afb      	ldrb	r3, [r7, #11]
 800764a:	687a      	ldr	r2, [r7, #4]
 800764c:	4619      	mov	r1, r3
 800764e:	68f8      	ldr	r0, [r7, #12]
 8007650:	f000 f888 	bl	8007764 <SCSI_Inquiry>
      break;
 8007654:	e047      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_START_STOP_UNIT:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	687a      	ldr	r2, [r7, #4]
 800765a:	4619      	mov	r1, r3
 800765c:	68f8      	ldr	r0, [r7, #12]
 800765e:	f000 fa9e 	bl	8007b9e <SCSI_StartStopUnit>
      break;
 8007662:	e040      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_ALLOW_MEDIUM_REMOVAL:
      SCSI_StartStopUnit(pdev, lun, cmd);
 8007664:	7afb      	ldrb	r3, [r7, #11]
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	4619      	mov	r1, r3
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f000 fa97 	bl	8007b9e <SCSI_StartStopUnit>
      break;
 8007670:	e039      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE6:
      SCSI_ModeSense6(pdev, lun, cmd);
 8007672:	7afb      	ldrb	r3, [r7, #11]
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	4619      	mov	r1, r3
 8007678:	68f8      	ldr	r0, [r7, #12]
 800767a:	f000 f99d 	bl	80079b8 <SCSI_ModeSense6>
      break;
 800767e:	e032      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_MODE_SENSE10:
      SCSI_ModeSense10(pdev, lun, cmd);
 8007680:	7afb      	ldrb	r3, [r7, #11]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	4619      	mov	r1, r3
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f000 f9be 	bl	8007a08 <SCSI_ModeSense10>
      break;
 800768c:	e02b      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_FORMAT_CAPACITIES:
      SCSI_ReadFormatCapacity(pdev, lun, cmd);
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	4619      	mov	r1, r3
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f000 f92a 	bl	80078ee <SCSI_ReadFormatCapacity>
      break;
 800769a:	e024      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ_CAPACITY10:
      SCSI_ReadCapacity10(pdev, lun, cmd);
 800769c:	7afb      	ldrb	r3, [r7, #11]
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	4619      	mov	r1, r3
 80076a2:	68f8      	ldr	r0, [r7, #12]
 80076a4:	f000 f8bc 	bl	8007820 <SCSI_ReadCapacity10>
      break;
 80076a8:	e01d      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_READ10:
      SCSI_Read10(pdev, lun, cmd);
 80076aa:	7afb      	ldrb	r3, [r7, #11]
 80076ac:	687a      	ldr	r2, [r7, #4]
 80076ae:	4619      	mov	r1, r3
 80076b0:	68f8      	ldr	r0, [r7, #12]
 80076b2:	f000 fa88 	bl	8007bc6 <SCSI_Read10>
      break;
 80076b6:	e016      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_WRITE10:
      SCSI_Write10(pdev, lun, cmd);
 80076b8:	7afb      	ldrb	r3, [r7, #11]
 80076ba:	687a      	ldr	r2, [r7, #4]
 80076bc:	4619      	mov	r1, r3
 80076be:	68f8      	ldr	r0, [r7, #12]
 80076c0:	f000 fb0d 	bl	8007cde <SCSI_Write10>
      break;
 80076c4:	e00f      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    case SCSI_VERIFY10:
      SCSI_Verify10(pdev, lun, cmd);
 80076c6:	7afb      	ldrb	r3, [r7, #11]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	4619      	mov	r1, r3
 80076cc:	68f8      	ldr	r0, [r7, #12]
 80076ce:	f000 fbb6 	bl	8007e3e <SCSI_Verify10>
      break;
 80076d2:	e008      	b.n	80076e6 <SCSI_ProcessCmd+0x246>

    default:
      SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_CDB);
 80076d4:	7af9      	ldrb	r1, [r7, #11]
 80076d6:	2320      	movs	r3, #32
 80076d8:	2205      	movs	r2, #5
 80076da:	68f8      	ldr	r0, [r7, #12]
 80076dc:	f000 fa26 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 80076e0:	f04f 33ff 	mov.w	r3, #4294967295
 80076e4:	e000      	b.n	80076e8 <SCSI_ProcessCmd+0x248>
  }

  return 0;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3710      	adds	r7, #16
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <SCSI_TestUnitReady>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_TestUnitReady(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	460b      	mov	r3, r1
 80076fa:	607a      	str	r2, [r7, #4]
 80076fc:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007704:	617b      	str	r3, [r7, #20]

  /* case 9 : Hi > D0 */
  if (hmsc->cbw.dDataLength != 0U)
 8007706:	697b      	ldr	r3, [r7, #20]
 8007708:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800770c:	2b00      	cmp	r3, #0
 800770e:	d00a      	beq.n	8007726 <SCSI_TestUnitReady+0x36>
  {
    SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007710:	697b      	ldr	r3, [r7, #20]
 8007712:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8007716:	2320      	movs	r3, #32
 8007718:	2205      	movs	r2, #5
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fa06 	bl	8007b2c <SCSI_SenseCode>

    return -1;
 8007720:	f04f 33ff 	mov.w	r3, #4294967295
 8007724:	e019      	b.n	800775a <SCSI_TestUnitReady+0x6a>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800772c:	689b      	ldr	r3, [r3, #8]
 800772e:	7afa      	ldrb	r2, [r7, #11]
 8007730:	4610      	mov	r0, r2
 8007732:	4798      	blx	r3
 8007734:	4603      	mov	r3, r0
 8007736:	2b00      	cmp	r3, #0
 8007738:	d00b      	beq.n	8007752 <SCSI_TestUnitReady+0x62>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800773a:	7af9      	ldrb	r1, [r7, #11]
 800773c:	233a      	movs	r3, #58	; 0x3a
 800773e:	2202      	movs	r2, #2
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f000 f9f3 	bl	8007b2c <SCSI_SenseCode>
    hmsc->bot_state = USBD_BOT_NO_DATA;
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	2205      	movs	r2, #5
 800774a:	721a      	strb	r2, [r3, #8]

    return -1;
 800774c:	f04f 33ff 	mov.w	r3, #4294967295
 8007750:	e003      	b.n	800775a <SCSI_TestUnitReady+0x6a>
  }
  hmsc->bot_data_length = 0U;
 8007752:	697b      	ldr	r3, [r7, #20]
 8007754:	2200      	movs	r2, #0
 8007756:	815a      	strh	r2, [r3, #10]

  return 0;
 8007758:	2300      	movs	r3, #0
}
 800775a:	4618      	mov	r0, r3
 800775c:	3718      	adds	r7, #24
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
	...

08007764 <SCSI_Inquiry>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t  SCSI_Inquiry(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007764:	b480      	push	{r7}
 8007766:	b089      	sub	sp, #36	; 0x24
 8007768:	af00      	add	r7, sp, #0
 800776a:	60f8      	str	r0, [r7, #12]
 800776c:	460b      	mov	r3, r1
 800776e:	607a      	str	r2, [r7, #4]
 8007770:	72fb      	strb	r3, [r7, #11]
  uint8_t *pPage;
  uint16_t len;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007778:	61bb      	str	r3, [r7, #24]

  if (params[1] & 0x01U)/*Evpd is set*/
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	3301      	adds	r3, #1
 800777e:	781b      	ldrb	r3, [r3, #0]
 8007780:	f003 0301 	and.w	r3, r3, #1
 8007784:	2b00      	cmp	r3, #0
 8007786:	d014      	beq.n	80077b2 <SCSI_Inquiry+0x4e>
  {
    len = LENGTH_INQUIRY_PAGE00;
 8007788:	2307      	movs	r3, #7
 800778a:	83fb      	strh	r3, [r7, #30]
    hmsc->bot_data_length = len;
 800778c:	69bb      	ldr	r3, [r7, #24]
 800778e:	8bfa      	ldrh	r2, [r7, #30]
 8007790:	815a      	strh	r2, [r3, #10]

    while (len)
 8007792:	e00a      	b.n	80077aa <SCSI_Inquiry+0x46>
    {
      len--;
 8007794:	8bfb      	ldrh	r3, [r7, #30]
 8007796:	3b01      	subs	r3, #1
 8007798:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = MSC_Page00_Inquiry_Data[len];
 800779a:	8bfa      	ldrh	r2, [r7, #30]
 800779c:	8bfb      	ldrh	r3, [r7, #30]
 800779e:	491f      	ldr	r1, [pc, #124]	; (800781c <SCSI_Inquiry+0xb8>)
 80077a0:	5c89      	ldrb	r1, [r1, r2]
 80077a2:	69ba      	ldr	r2, [r7, #24]
 80077a4:	4413      	add	r3, r2
 80077a6:	460a      	mov	r2, r1
 80077a8:	731a      	strb	r2, [r3, #12]
    while (len)
 80077aa:	8bfb      	ldrh	r3, [r7, #30]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d1f1      	bne.n	8007794 <SCSI_Inquiry+0x30>
 80077b0:	e02e      	b.n	8007810 <SCSI_Inquiry+0xac>
    }
  }
  else
  {
    pPage = (uint8_t *)(void *) & ((USBD_StorageTypeDef *)pdev->pUserData)->pInquiry[lun * STANDARD_INQUIRY_DATA_LEN];
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80077b8:	69d9      	ldr	r1, [r3, #28]
 80077ba:	7afa      	ldrb	r2, [r7, #11]
 80077bc:	4613      	mov	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	4413      	add	r3, r2
 80077c2:	009b      	lsls	r3, r3, #2
 80077c4:	440b      	add	r3, r1
 80077c6:	617b      	str	r3, [r7, #20]
    len = (uint16_t)pPage[4] + 5U;
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	3304      	adds	r3, #4
 80077cc:	781b      	ldrb	r3, [r3, #0]
 80077ce:	b29b      	uxth	r3, r3
 80077d0:	3305      	adds	r3, #5
 80077d2:	83fb      	strh	r3, [r7, #30]

    if (params[4] <= len)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	3304      	adds	r3, #4
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	b29b      	uxth	r3, r3
 80077dc:	8bfa      	ldrh	r2, [r7, #30]
 80077de:	429a      	cmp	r2, r3
 80077e0:	d303      	bcc.n	80077ea <SCSI_Inquiry+0x86>
    {
      len = params[4];
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3304      	adds	r3, #4
 80077e6:	781b      	ldrb	r3, [r3, #0]
 80077e8:	83fb      	strh	r3, [r7, #30]
    }
    hmsc->bot_data_length = len;
 80077ea:	69bb      	ldr	r3, [r7, #24]
 80077ec:	8bfa      	ldrh	r2, [r7, #30]
 80077ee:	815a      	strh	r2, [r3, #10]

    while (len)
 80077f0:	e00b      	b.n	800780a <SCSI_Inquiry+0xa6>
    {
      len--;
 80077f2:	8bfb      	ldrh	r3, [r7, #30]
 80077f4:	3b01      	subs	r3, #1
 80077f6:	83fb      	strh	r3, [r7, #30]
      hmsc->bot_data[len] = pPage[len];
 80077f8:	8bfb      	ldrh	r3, [r7, #30]
 80077fa:	697a      	ldr	r2, [r7, #20]
 80077fc:	441a      	add	r2, r3
 80077fe:	8bfb      	ldrh	r3, [r7, #30]
 8007800:	7811      	ldrb	r1, [r2, #0]
 8007802:	69ba      	ldr	r2, [r7, #24]
 8007804:	4413      	add	r3, r2
 8007806:	460a      	mov	r2, r1
 8007808:	731a      	strb	r2, [r3, #12]
    while (len)
 800780a:	8bfb      	ldrh	r3, [r7, #30]
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1f0      	bne.n	80077f2 <SCSI_Inquiry+0x8e>
    }
  }

  return 0;
 8007810:	2300      	movs	r3, #0
}
 8007812:	4618      	mov	r0, r3
 8007814:	3724      	adds	r7, #36	; 0x24
 8007816:	46bd      	mov	sp, r7
 8007818:	bc80      	pop	{r7}
 800781a:	4770      	bx	lr
 800781c:	0800acbc 	.word	0x0800acbc

08007820 <SCSI_ReadCapacity10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadCapacity10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b086      	sub	sp, #24
 8007824:	af00      	add	r7, sp, #0
 8007826:	60f8      	str	r0, [r7, #12]
 8007828:	460b      	mov	r3, r1
 800782a:	607a      	str	r2, [r7, #4]
 800782c:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 800782e:	68fb      	ldr	r3, [r7, #12]
 8007830:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007834:	617b      	str	r3, [r7, #20]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &hmsc->scsi_blk_nbr, &hmsc->scsi_blk_size) != 0)
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	697a      	ldr	r2, [r7, #20]
 8007840:	f502 618c 	add.w	r1, r2, #1120	; 0x460
 8007844:	697a      	ldr	r2, [r7, #20]
 8007846:	f202 425e 	addw	r2, r2, #1118	; 0x45e
 800784a:	7af8      	ldrb	r0, [r7, #11]
 800784c:	4798      	blx	r3
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d008      	beq.n	8007866 <SCSI_ReadCapacity10+0x46>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007854:	7af9      	ldrb	r1, [r7, #11]
 8007856:	233a      	movs	r3, #58	; 0x3a
 8007858:	2202      	movs	r2, #2
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f966 	bl	8007b2c <SCSI_SenseCode>
    return -1;
 8007860:	f04f 33ff 	mov.w	r3, #4294967295
 8007864:	e03f      	b.n	80078e6 <SCSI_ReadCapacity10+0xc6>
  }
  else
  {

    hmsc->bot_data[0] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 24);
 8007866:	697b      	ldr	r3, [r7, #20]
 8007868:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 800786c:	3b01      	subs	r3, #1
 800786e:	0e1b      	lsrs	r3, r3, #24
 8007870:	b2da      	uxtb	r2, r3
 8007872:	697b      	ldr	r3, [r7, #20]
 8007874:	731a      	strb	r2, [r3, #12]
    hmsc->bot_data[1] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >> 16);
 8007876:	697b      	ldr	r3, [r7, #20]
 8007878:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 800787c:	3b01      	subs	r3, #1
 800787e:	0c1b      	lsrs	r3, r3, #16
 8007880:	b2da      	uxtb	r2, r3
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	735a      	strb	r2, [r3, #13]
    hmsc->bot_data[2] = (uint8_t)((hmsc->scsi_blk_nbr - 1U) >>  8);
 8007886:	697b      	ldr	r3, [r7, #20]
 8007888:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 800788c:	3b01      	subs	r3, #1
 800788e:	0a1b      	lsrs	r3, r3, #8
 8007890:	b2da      	uxtb	r2, r3
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[3] = (uint8_t)(hmsc->scsi_blk_nbr - 1U);
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 800789c:	b2db      	uxtb	r3, r3
 800789e:	3b01      	subs	r3, #1
 80078a0:	b2da      	uxtb	r2, r3
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	73da      	strb	r2, [r3, #15]

    hmsc->bot_data[4] = (uint8_t)(hmsc->scsi_blk_size >>  24);
 80078a6:	697b      	ldr	r3, [r7, #20]
 80078a8:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 80078ac:	161b      	asrs	r3, r3, #24
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	697b      	ldr	r3, [r7, #20]
 80078b2:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)(hmsc->scsi_blk_size >>  16);
 80078b4:	697b      	ldr	r3, [r7, #20]
 80078b6:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 80078ba:	141b      	asrs	r3, r3, #16
 80078bc:	b2da      	uxtb	r2, r3
 80078be:	697b      	ldr	r3, [r7, #20]
 80078c0:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)(hmsc->scsi_blk_size >>  8);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 80078c8:	0a1b      	lsrs	r3, r3, #8
 80078ca:	b29b      	uxth	r3, r3
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(hmsc->scsi_blk_size);
 80078d2:	697b      	ldr	r3, [r7, #20]
 80078d4:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 80078d8:	b2da      	uxtb	r2, r3
 80078da:	697b      	ldr	r3, [r7, #20]
 80078dc:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data_length = 8U;
 80078de:	697b      	ldr	r3, [r7, #20]
 80078e0:	2208      	movs	r2, #8
 80078e2:	815a      	strh	r2, [r3, #10]
    return 0;
 80078e4:	2300      	movs	r3, #0
  }
}
 80078e6:	4618      	mov	r0, r3
 80078e8:	3718      	adds	r7, #24
 80078ea:	46bd      	mov	sp, r7
 80078ec:	bd80      	pop	{r7, pc}

080078ee <SCSI_ReadFormatCapacity>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ReadFormatCapacity(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80078ee:	b580      	push	{r7, lr}
 80078f0:	b088      	sub	sp, #32
 80078f2:	af00      	add	r7, sp, #0
 80078f4:	60f8      	str	r0, [r7, #12]
 80078f6:	460b      	mov	r3, r1
 80078f8:	607a      	str	r2, [r7, #4]
 80078fa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007902:	61bb      	str	r3, [r7, #24]

  uint16_t blk_size;
  uint32_t blk_nbr;
  uint16_t i;

  for (i = 0U; i < 12U ; i++)
 8007904:	2300      	movs	r3, #0
 8007906:	83fb      	strh	r3, [r7, #30]
 8007908:	e007      	b.n	800791a <SCSI_ReadFormatCapacity+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 800790a:	8bfb      	ldrh	r3, [r7, #30]
 800790c:	69ba      	ldr	r2, [r7, #24]
 800790e:	4413      	add	r3, r2
 8007910:	2200      	movs	r2, #0
 8007912:	731a      	strb	r2, [r3, #12]
  for (i = 0U; i < 12U ; i++)
 8007914:	8bfb      	ldrh	r3, [r7, #30]
 8007916:	3301      	adds	r3, #1
 8007918:	83fb      	strh	r3, [r7, #30]
 800791a:	8bfb      	ldrh	r3, [r7, #30]
 800791c:	2b0b      	cmp	r3, #11
 800791e:	d9f4      	bls.n	800790a <SCSI_ReadFormatCapacity+0x1c>
  }

  if (((USBD_StorageTypeDef *)pdev->pUserData)->GetCapacity(lun, &blk_nbr, &blk_size) != 0U)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007926:	685b      	ldr	r3, [r3, #4]
 8007928:	f107 0216 	add.w	r2, r7, #22
 800792c:	f107 0110 	add.w	r1, r7, #16
 8007930:	7af8      	ldrb	r0, [r7, #11]
 8007932:	4798      	blx	r3
 8007934:	4603      	mov	r3, r0
 8007936:	2b00      	cmp	r3, #0
 8007938:	d008      	beq.n	800794c <SCSI_ReadFormatCapacity+0x5e>
  {
    SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 800793a:	7af9      	ldrb	r1, [r7, #11]
 800793c:	233a      	movs	r3, #58	; 0x3a
 800793e:	2202      	movs	r2, #2
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 f8f3 	bl	8007b2c <SCSI_SenseCode>
    return -1;
 8007946:	f04f 33ff 	mov.w	r3, #4294967295
 800794a:	e030      	b.n	80079ae <SCSI_ReadFormatCapacity+0xc0>
  }
  else
  {
    hmsc->bot_data[3] = 0x08U;
 800794c:	69bb      	ldr	r3, [r7, #24]
 800794e:	2208      	movs	r2, #8
 8007950:	73da      	strb	r2, [r3, #15]
    hmsc->bot_data[4] = (uint8_t)((blk_nbr - 1U) >> 24);
 8007952:	693b      	ldr	r3, [r7, #16]
 8007954:	3b01      	subs	r3, #1
 8007956:	0e1b      	lsrs	r3, r3, #24
 8007958:	b2da      	uxtb	r2, r3
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	741a      	strb	r2, [r3, #16]
    hmsc->bot_data[5] = (uint8_t)((blk_nbr - 1U) >> 16);
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	3b01      	subs	r3, #1
 8007962:	0c1b      	lsrs	r3, r3, #16
 8007964:	b2da      	uxtb	r2, r3
 8007966:	69bb      	ldr	r3, [r7, #24]
 8007968:	745a      	strb	r2, [r3, #17]
    hmsc->bot_data[6] = (uint8_t)((blk_nbr - 1U) >>  8);
 800796a:	693b      	ldr	r3, [r7, #16]
 800796c:	3b01      	subs	r3, #1
 800796e:	0a1b      	lsrs	r3, r3, #8
 8007970:	b2da      	uxtb	r2, r3
 8007972:	69bb      	ldr	r3, [r7, #24]
 8007974:	749a      	strb	r2, [r3, #18]
    hmsc->bot_data[7] = (uint8_t)(blk_nbr - 1U);
 8007976:	693b      	ldr	r3, [r7, #16]
 8007978:	b2db      	uxtb	r3, r3
 800797a:	3b01      	subs	r3, #1
 800797c:	b2da      	uxtb	r2, r3
 800797e:	69bb      	ldr	r3, [r7, #24]
 8007980:	74da      	strb	r2, [r3, #19]

    hmsc->bot_data[8] = 0x02U;
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	2202      	movs	r2, #2
 8007986:	751a      	strb	r2, [r3, #20]
    hmsc->bot_data[9] = (uint8_t)(blk_size >>  16);
 8007988:	8afb      	ldrh	r3, [r7, #22]
 800798a:	141b      	asrs	r3, r3, #16
 800798c:	b2da      	uxtb	r2, r3
 800798e:	69bb      	ldr	r3, [r7, #24]
 8007990:	755a      	strb	r2, [r3, #21]
    hmsc->bot_data[10] = (uint8_t)(blk_size >>  8);
 8007992:	8afb      	ldrh	r3, [r7, #22]
 8007994:	0a1b      	lsrs	r3, r3, #8
 8007996:	b29b      	uxth	r3, r3
 8007998:	b2da      	uxtb	r2, r3
 800799a:	69bb      	ldr	r3, [r7, #24]
 800799c:	759a      	strb	r2, [r3, #22]
    hmsc->bot_data[11] = (uint8_t)(blk_size);
 800799e:	8afb      	ldrh	r3, [r7, #22]
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	69bb      	ldr	r3, [r7, #24]
 80079a4:	75da      	strb	r2, [r3, #23]

    hmsc->bot_data_length = 12U;
 80079a6:	69bb      	ldr	r3, [r7, #24]
 80079a8:	220c      	movs	r2, #12
 80079aa:	815a      	strh	r2, [r3, #10]
    return 0;
 80079ac:	2300      	movs	r3, #0
  }
}
 80079ae:	4618      	mov	r0, r3
 80079b0:	3720      	adds	r7, #32
 80079b2:	46bd      	mov	sp, r7
 80079b4:	bd80      	pop	{r7, pc}
	...

080079b8 <SCSI_ModeSense6>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense6(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 80079b8:	b480      	push	{r7}
 80079ba:	b087      	sub	sp, #28
 80079bc:	af00      	add	r7, sp, #0
 80079be:	60f8      	str	r0, [r7, #12]
 80079c0:	460b      	mov	r3, r1
 80079c2:	607a      	str	r2, [r7, #4]
 80079c4:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80079cc:	613b      	str	r3, [r7, #16]
  uint16_t len = 8U;
 80079ce:	2308      	movs	r3, #8
 80079d0:	82fb      	strh	r3, [r7, #22]
  hmsc->bot_data_length = len;
 80079d2:	693b      	ldr	r3, [r7, #16]
 80079d4:	8afa      	ldrh	r2, [r7, #22]
 80079d6:	815a      	strh	r2, [r3, #10]

  while (len)
 80079d8:	e00a      	b.n	80079f0 <SCSI_ModeSense6+0x38>
  {
    len--;
 80079da:	8afb      	ldrh	r3, [r7, #22]
 80079dc:	3b01      	subs	r3, #1
 80079de:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense6_data[len];
 80079e0:	8afa      	ldrh	r2, [r7, #22]
 80079e2:	8afb      	ldrh	r3, [r7, #22]
 80079e4:	4907      	ldr	r1, [pc, #28]	; (8007a04 <SCSI_ModeSense6+0x4c>)
 80079e6:	5c89      	ldrb	r1, [r1, r2]
 80079e8:	693a      	ldr	r2, [r7, #16]
 80079ea:	4413      	add	r3, r2
 80079ec:	460a      	mov	r2, r1
 80079ee:	731a      	strb	r2, [r3, #12]
  while (len)
 80079f0:	8afb      	ldrh	r3, [r7, #22]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d1f1      	bne.n	80079da <SCSI_ModeSense6+0x22>
  }
  return 0;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	371c      	adds	r7, #28
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bc80      	pop	{r7}
 8007a00:	4770      	bx	lr
 8007a02:	bf00      	nop
 8007a04:	0800acc4 	.word	0x0800acc4

08007a08 <SCSI_ModeSense10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_ModeSense10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007a08:	b480      	push	{r7}
 8007a0a:	b087      	sub	sp, #28
 8007a0c:	af00      	add	r7, sp, #0
 8007a0e:	60f8      	str	r0, [r7, #12]
 8007a10:	460b      	mov	r3, r1
 8007a12:	607a      	str	r2, [r7, #4]
 8007a14:	72fb      	strb	r3, [r7, #11]
  uint16_t len = 8U;
 8007a16:	2308      	movs	r3, #8
 8007a18:	82fb      	strh	r3, [r7, #22]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a20:	613b      	str	r3, [r7, #16]

  hmsc->bot_data_length = len;
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	8afa      	ldrh	r2, [r7, #22]
 8007a26:	815a      	strh	r2, [r3, #10]

  while (len)
 8007a28:	e00a      	b.n	8007a40 <SCSI_ModeSense10+0x38>
  {
    len--;
 8007a2a:	8afb      	ldrh	r3, [r7, #22]
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	82fb      	strh	r3, [r7, #22]
    hmsc->bot_data[len] = MSC_Mode_Sense10_data[len];
 8007a30:	8afa      	ldrh	r2, [r7, #22]
 8007a32:	8afb      	ldrh	r3, [r7, #22]
 8007a34:	4907      	ldr	r1, [pc, #28]	; (8007a54 <SCSI_ModeSense10+0x4c>)
 8007a36:	5c89      	ldrb	r1, [r1, r2]
 8007a38:	693a      	ldr	r2, [r7, #16]
 8007a3a:	4413      	add	r3, r2
 8007a3c:	460a      	mov	r2, r1
 8007a3e:	731a      	strb	r2, [r3, #12]
  while (len)
 8007a40:	8afb      	ldrh	r3, [r7, #22]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d1f1      	bne.n	8007a2a <SCSI_ModeSense10+0x22>
  }

  return 0;
 8007a46:	2300      	movs	r3, #0
}
 8007a48:	4618      	mov	r0, r3
 8007a4a:	371c      	adds	r7, #28
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bc80      	pop	{r7}
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	0800accc 	.word	0x0800accc

08007a58 <SCSI_RequestSense>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_RequestSense(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b087      	sub	sp, #28
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	60f8      	str	r0, [r7, #12]
 8007a60:	460b      	mov	r3, r1
 8007a62:	607a      	str	r2, [r7, #4]
 8007a64:	72fb      	strb	r3, [r7, #11]
  uint8_t i;
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a6c:	613b      	str	r3, [r7, #16]

  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007a6e:	2300      	movs	r3, #0
 8007a70:	75fb      	strb	r3, [r7, #23]
 8007a72:	e007      	b.n	8007a84 <SCSI_RequestSense+0x2c>
  {
    hmsc->bot_data[i] = 0U;
 8007a74:	7dfb      	ldrb	r3, [r7, #23]
 8007a76:	693a      	ldr	r2, [r7, #16]
 8007a78:	4413      	add	r3, r2
 8007a7a:	2200      	movs	r2, #0
 8007a7c:	731a      	strb	r2, [r3, #12]
  for (i = 0U ; i < REQUEST_SENSE_DATA_LEN; i++)
 8007a7e:	7dfb      	ldrb	r3, [r7, #23]
 8007a80:	3301      	adds	r3, #1
 8007a82:	75fb      	strb	r3, [r7, #23]
 8007a84:	7dfb      	ldrb	r3, [r7, #23]
 8007a86:	2b11      	cmp	r3, #17
 8007a88:	d9f4      	bls.n	8007a74 <SCSI_RequestSense+0x1c>
  }

  hmsc->bot_data[0] = 0x70U;
 8007a8a:	693b      	ldr	r3, [r7, #16]
 8007a8c:	2270      	movs	r2, #112	; 0x70
 8007a8e:	731a      	strb	r2, [r3, #12]
  hmsc->bot_data[7] = REQUEST_SENSE_DATA_LEN - 6U;
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	220c      	movs	r2, #12
 8007a94:	74da      	strb	r2, [r3, #19]

  if ((hmsc->scsi_sense_head != hmsc->scsi_sense_tail))
 8007a96:	693b      	ldr	r3, [r7, #16]
 8007a98:	f893 245c 	ldrb.w	r2, [r3, #1116]	; 0x45c
 8007a9c:	693b      	ldr	r3, [r7, #16]
 8007a9e:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
 8007aa2:	429a      	cmp	r2, r3
 8007aa4:	d02e      	beq.n	8007b04 <SCSI_RequestSense+0xac>
  {

    hmsc->bot_data[2]     = hmsc->scsi_sense[hmsc->scsi_sense_head].Skey;
 8007aa6:	693b      	ldr	r3, [r7, #16]
 8007aa8:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8007aac:	693a      	ldr	r2, [r7, #16]
 8007aae:	3387      	adds	r3, #135	; 0x87
 8007ab0:	00db      	lsls	r3, r3, #3
 8007ab2:	4413      	add	r3, r2
 8007ab4:	791a      	ldrb	r2, [r3, #4]
 8007ab6:	693b      	ldr	r3, [r7, #16]
 8007ab8:	739a      	strb	r2, [r3, #14]
    hmsc->bot_data[12]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASCQ;
 8007aba:	693b      	ldr	r3, [r7, #16]
 8007abc:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8007ac0:	693a      	ldr	r2, [r7, #16]
 8007ac2:	3387      	adds	r3, #135	; 0x87
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	7a5a      	ldrb	r2, [r3, #9]
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	761a      	strb	r2, [r3, #24]
    hmsc->bot_data[13]    = hmsc->scsi_sense[hmsc->scsi_sense_head].w.b.ASC;
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8007ad4:	693a      	ldr	r2, [r7, #16]
 8007ad6:	3387      	adds	r3, #135	; 0x87
 8007ad8:	00db      	lsls	r3, r3, #3
 8007ada:	4413      	add	r3, r2
 8007adc:	7a1a      	ldrb	r2, [r3, #8]
 8007ade:	693b      	ldr	r3, [r7, #16]
 8007ae0:	765a      	strb	r2, [r3, #25]
    hmsc->scsi_sense_head++;
 8007ae2:	693b      	ldr	r3, [r7, #16]
 8007ae4:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8007ae8:	3301      	adds	r3, #1
 8007aea:	b2da      	uxtb	r2, r3
 8007aec:	693b      	ldr	r3, [r7, #16]
 8007aee:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c

    if (hmsc->scsi_sense_head == SENSE_LIST_DEEPTH)
 8007af2:	693b      	ldr	r3, [r7, #16]
 8007af4:	f893 345c 	ldrb.w	r3, [r3, #1116]	; 0x45c
 8007af8:	2b04      	cmp	r3, #4
 8007afa:	d103      	bne.n	8007b04 <SCSI_RequestSense+0xac>
    {
      hmsc->scsi_sense_head = 0U;
 8007afc:	693b      	ldr	r3, [r7, #16]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 245c 	strb.w	r2, [r3, #1116]	; 0x45c
    }
  }
  hmsc->bot_data_length = REQUEST_SENSE_DATA_LEN;
 8007b04:	693b      	ldr	r3, [r7, #16]
 8007b06:	2212      	movs	r2, #18
 8007b08:	815a      	strh	r2, [r3, #10]

  if (params[4] <= REQUEST_SENSE_DATA_LEN)
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	3304      	adds	r3, #4
 8007b0e:	781b      	ldrb	r3, [r3, #0]
 8007b10:	2b12      	cmp	r3, #18
 8007b12:	d805      	bhi.n	8007b20 <SCSI_RequestSense+0xc8>
  {
    hmsc->bot_data_length = params[4];
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	3304      	adds	r3, #4
 8007b18:	781b      	ldrb	r3, [r3, #0]
 8007b1a:	b29a      	uxth	r2, r3
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	815a      	strh	r2, [r3, #10]
  }
  return 0;
 8007b20:	2300      	movs	r3, #0
}
 8007b22:	4618      	mov	r0, r3
 8007b24:	371c      	adds	r7, #28
 8007b26:	46bd      	mov	sp, r7
 8007b28:	bc80      	pop	{r7}
 8007b2a:	4770      	bx	lr

08007b2c <SCSI_SenseCode>:
* @param  ASC: Additional Sense Key
* @retval none

*/
void SCSI_SenseCode(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t sKey, uint8_t ASC)
{
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]
 8007b34:	4608      	mov	r0, r1
 8007b36:	4611      	mov	r1, r2
 8007b38:	461a      	mov	r2, r3
 8007b3a:	4603      	mov	r3, r0
 8007b3c:	70fb      	strb	r3, [r7, #3]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70bb      	strb	r3, [r7, #2]
 8007b42:	4613      	mov	r3, r2
 8007b44:	707b      	strb	r3, [r7, #1]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4c:	60fb      	str	r3, [r7, #12]

  hmsc->scsi_sense[hmsc->scsi_sense_tail].Skey  = sKey;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
 8007b54:	68fa      	ldr	r2, [r7, #12]
 8007b56:	3387      	adds	r3, #135	; 0x87
 8007b58:	00db      	lsls	r3, r3, #3
 8007b5a:	4413      	add	r3, r2
 8007b5c:	78ba      	ldrb	r2, [r7, #2]
 8007b5e:	711a      	strb	r2, [r3, #4]
  hmsc->scsi_sense[hmsc->scsi_sense_tail].w.ASC = ASC << 8;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
 8007b66:	68fa      	ldr	r2, [r7, #12]
 8007b68:	3387      	adds	r3, #135	; 0x87
 8007b6a:	00db      	lsls	r3, r3, #3
 8007b6c:	4413      	add	r3, r2
 8007b6e:	2200      	movs	r2, #0
 8007b70:	721a      	strb	r2, [r3, #8]
  hmsc->scsi_sense_tail++;
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
 8007b78:	3301      	adds	r3, #1
 8007b7a:	b2da      	uxtb	r2, r3
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
  if (hmsc->scsi_sense_tail == SENSE_LIST_DEEPTH)
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f893 345d 	ldrb.w	r3, [r3, #1117]	; 0x45d
 8007b88:	2b04      	cmp	r3, #4
 8007b8a:	d103      	bne.n	8007b94 <SCSI_SenseCode+0x68>
  {
    hmsc->scsi_sense_tail = 0U;
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	2200      	movs	r2, #0
 8007b90:	f883 245d 	strb.w	r2, [r3, #1117]	; 0x45d
  }
}
 8007b94:	bf00      	nop
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	bc80      	pop	{r7}
 8007b9c:	4770      	bx	lr

08007b9e <SCSI_StartStopUnit>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_StartStopUnit(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007b9e:	b480      	push	{r7}
 8007ba0:	b087      	sub	sp, #28
 8007ba2:	af00      	add	r7, sp, #0
 8007ba4:	60f8      	str	r0, [r7, #12]
 8007ba6:	460b      	mov	r3, r1
 8007ba8:	607a      	str	r2, [r7, #4]
 8007baa:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bb2:	617b      	str	r3, [r7, #20]
  hmsc->bot_data_length = 0U;
 8007bb4:	697b      	ldr	r3, [r7, #20]
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	815a      	strh	r2, [r3, #10]
  return 0;
 8007bba:	2300      	movs	r3, #0
}
 8007bbc:	4618      	mov	r0, r3
 8007bbe:	371c      	adds	r7, #28
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bc80      	pop	{r7}
 8007bc4:	4770      	bx	lr

08007bc6 <SCSI_Read10>:
* @param  lun: Logical unit number
* @param  params: Command parameters
* @retval status
*/
static int8_t SCSI_Read10(USBD_HandleTypeDef *pdev, uint8_t lun, uint8_t *params)
{
 8007bc6:	b580      	push	{r7, lr}
 8007bc8:	b086      	sub	sp, #24
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	60f8      	str	r0, [r7, #12]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	607a      	str	r2, [r7, #4]
 8007bd2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007bda:	617b      	str	r3, [r7, #20]

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007bdc:	697b      	ldr	r3, [r7, #20]
 8007bde:	7a1b      	ldrb	r3, [r3, #8]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d16e      	bne.n	8007cc2 <SCSI_Read10+0xfc>
  {
    /* case 10 : Ho <> Di */
    if ((hmsc->cbw.bmFlags & 0x80U) != 0x80U)
 8007be4:	697b      	ldr	r3, [r7, #20]
 8007be6:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007bea:	b25b      	sxtb	r3, r3
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	db0a      	blt.n	8007c06 <SCSI_Read10+0x40>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007bf0:	697b      	ldr	r3, [r7, #20]
 8007bf2:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8007bf6:	2320      	movs	r3, #32
 8007bf8:	2205      	movs	r2, #5
 8007bfa:	68f8      	ldr	r0, [r7, #12]
 8007bfc:	f7ff ff96 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 8007c00:	f04f 33ff 	mov.w	r3, #4294967295
 8007c04:	e067      	b.n	8007cd6 <SCSI_Read10+0x110>
    }

    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007c0c:	689b      	ldr	r3, [r3, #8]
 8007c0e:	7afa      	ldrb	r2, [r7, #11]
 8007c10:	4610      	mov	r0, r2
 8007c12:	4798      	blx	r3
 8007c14:	4603      	mov	r3, r0
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d008      	beq.n	8007c2c <SCSI_Read10+0x66>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007c1a:	7af9      	ldrb	r1, [r7, #11]
 8007c1c:	233a      	movs	r3, #58	; 0x3a
 8007c1e:	2202      	movs	r2, #2
 8007c20:	68f8      	ldr	r0, [r7, #12]
 8007c22:	f7ff ff83 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 8007c26:	f04f 33ff 	mov.w	r3, #4294967295
 8007c2a:	e054      	b.n	8007cd6 <SCSI_Read10+0x110>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	3302      	adds	r3, #2
 8007c30:	781b      	ldrb	r3, [r3, #0]
 8007c32:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	3303      	adds	r3, #3
 8007c38:	781b      	ldrb	r3, [r3, #0]
 8007c3a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c3c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] <<  8) |
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	3304      	adds	r3, #4
 8007c42:	781b      	ldrb	r3, [r3, #0]
 8007c44:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007c46:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007c48:	687a      	ldr	r2, [r7, #4]
 8007c4a:	3205      	adds	r2, #5
 8007c4c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] <<  8) |
 8007c4e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007c50:	697b      	ldr	r3, [r7, #20]
 8007c52:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464

    hmsc->scsi_blk_len = ((uint32_t)params[7] <<  8) | (uint32_t)params[8];
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	3307      	adds	r3, #7
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	021b      	lsls	r3, r3, #8
 8007c5e:	687a      	ldr	r2, [r7, #4]
 8007c60:	3208      	adds	r2, #8
 8007c62:	7812      	ldrb	r2, [r2, #0]
 8007c64:	431a      	orrs	r2, r3
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468

    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007c6c:	697b      	ldr	r3, [r7, #20]
 8007c6e:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 8007c72:	697b      	ldr	r3, [r7, #20]
 8007c74:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007c78:	7af9      	ldrb	r1, [r7, #11]
 8007c7a:	68f8      	ldr	r0, [r7, #12]
 8007c7c:	f000 f912 	bl	8007ea4 <SCSI_CheckAddressRange>
 8007c80:	4603      	mov	r3, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	da02      	bge.n	8007c8c <SCSI_Read10+0xc6>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007c86:	f04f 33ff 	mov.w	r3, #4294967295
 8007c8a:	e024      	b.n	8007cd6 <SCSI_Read10+0x110>
    }

    hmsc->bot_state = USBD_BOT_DATA_IN;
 8007c8c:	697b      	ldr	r3, [r7, #20]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	721a      	strb	r2, [r3, #8]

    /* cases 4,5 : Hi <> Dn */
    if (hmsc->cbw.dDataLength != (hmsc->scsi_blk_len * hmsc->scsi_blk_size))
 8007c92:	697b      	ldr	r3, [r7, #20]
 8007c94:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8007c98:	697b      	ldr	r3, [r7, #20]
 8007c9a:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007c9e:	6979      	ldr	r1, [r7, #20]
 8007ca0:	f8b1 145e 	ldrh.w	r1, [r1, #1118]	; 0x45e
 8007ca4:	fb01 f303 	mul.w	r3, r1, r3
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d00a      	beq.n	8007cc2 <SCSI_Read10+0xfc>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8007cb2:	2320      	movs	r3, #32
 8007cb4:	2205      	movs	r2, #5
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f7ff ff38 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 8007cbc:	f04f 33ff 	mov.w	r3, #4294967295
 8007cc0:	e009      	b.n	8007cd6 <SCSI_Read10+0x110>
    }
  }
  hmsc->bot_data_length = MSC_MEDIA_PACKET;
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007cc8:	815a      	strh	r2, [r3, #10]

  return SCSI_ProcessRead(pdev, lun);
 8007cca:	7afb      	ldrb	r3, [r7, #11]
 8007ccc:	4619      	mov	r1, r3
 8007cce:	68f8      	ldr	r0, [r7, #12]
 8007cd0:	f000 f90a 	bl	8007ee8 <SCSI_ProcessRead>
 8007cd4:	4603      	mov	r3, r0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3718      	adds	r7, #24
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <SCSI_Write10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Write10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b086      	sub	sp, #24
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	607a      	str	r2, [r7, #4]
 8007cea:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007cf2:	617b      	str	r3, [r7, #20]
  uint32_t len;

  if (hmsc->bot_state == USBD_BOT_IDLE) /* Idle */
 8007cf4:	697b      	ldr	r3, [r7, #20]
 8007cf6:	7a1b      	ldrb	r3, [r3, #8]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	f040 8096 	bne.w	8007e2a <SCSI_Write10+0x14c>
  {
    /* case 8 : Hi <> Do */
    if ((hmsc->cbw.bmFlags & 0x80U) == 0x80U)
 8007cfe:	697b      	ldr	r3, [r7, #20]
 8007d00:	f893 3418 	ldrb.w	r3, [r3, #1048]	; 0x418
 8007d04:	b25b      	sxtb	r3, r3
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	da0a      	bge.n	8007d20 <SCSI_Write10+0x42>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8007d10:	2320      	movs	r3, #32
 8007d12:	2205      	movs	r2, #5
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f7ff ff09 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 8007d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8007d1e:	e08a      	b.n	8007e36 <SCSI_Write10+0x158>
    }

    /* Check whether Media is ready */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsReady(lun) != 0)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	7afa      	ldrb	r2, [r7, #11]
 8007d2a:	4610      	mov	r0, r2
 8007d2c:	4798      	blx	r3
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d008      	beq.n	8007d46 <SCSI_Write10+0x68>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, MEDIUM_NOT_PRESENT);
 8007d34:	7af9      	ldrb	r1, [r7, #11]
 8007d36:	233a      	movs	r3, #58	; 0x3a
 8007d38:	2202      	movs	r2, #2
 8007d3a:	68f8      	ldr	r0, [r7, #12]
 8007d3c:	f7ff fef6 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 8007d40:	f04f 33ff 	mov.w	r3, #4294967295
 8007d44:	e077      	b.n	8007e36 <SCSI_Write10+0x158>
    }

    /* Check If media is write-protected */
    if (((USBD_StorageTypeDef *)pdev->pUserData)->IsWriteProtected(lun) != 0)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	7afa      	ldrb	r2, [r7, #11]
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	4603      	mov	r3, r0
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d008      	beq.n	8007d6c <SCSI_Write10+0x8e>
    {
      SCSI_SenseCode(pdev, lun, NOT_READY, WRITE_PROTECTED);
 8007d5a:	7af9      	ldrb	r1, [r7, #11]
 8007d5c:	2327      	movs	r3, #39	; 0x27
 8007d5e:	2202      	movs	r2, #2
 8007d60:	68f8      	ldr	r0, [r7, #12]
 8007d62:	f7ff fee3 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 8007d66:	f04f 33ff 	mov.w	r3, #4294967295
 8007d6a:	e064      	b.n	8007e36 <SCSI_Write10+0x158>
    }

    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	3302      	adds	r3, #2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	061a      	lsls	r2, r3, #24
                          ((uint32_t)params[3] << 16) |
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	3303      	adds	r3, #3
 8007d78:	781b      	ldrb	r3, [r3, #0]
 8007d7a:	041b      	lsls	r3, r3, #16
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007d7c:	431a      	orrs	r2, r3
                          ((uint32_t)params[4] << 8) |
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	3304      	adds	r3, #4
 8007d82:	781b      	ldrb	r3, [r3, #0]
 8007d84:	021b      	lsls	r3, r3, #8
                          ((uint32_t)params[3] << 16) |
 8007d86:	4313      	orrs	r3, r2
                          (uint32_t)params[5];
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	3205      	adds	r2, #5
 8007d8c:	7812      	ldrb	r2, [r2, #0]
                          ((uint32_t)params[4] << 8) |
 8007d8e:	431a      	orrs	r2, r3
    hmsc->scsi_blk_addr = ((uint32_t)params[2] << 24) |
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464

    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	3307      	adds	r3, #7
 8007d9a:	781b      	ldrb	r3, [r3, #0]
 8007d9c:	021b      	lsls	r3, r3, #8
                         (uint32_t)params[8];
 8007d9e:	687a      	ldr	r2, [r7, #4]
 8007da0:	3208      	adds	r2, #8
 8007da2:	7812      	ldrb	r2, [r2, #0]
    hmsc->scsi_blk_len = ((uint32_t)params[7] << 8) |
 8007da4:	431a      	orrs	r2, r3
 8007da6:	697b      	ldr	r3, [r7, #20]
 8007da8:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468

    /* check if LBA address is in the right range */
    if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007db8:	7af9      	ldrb	r1, [r7, #11]
 8007dba:	68f8      	ldr	r0, [r7, #12]
 8007dbc:	f000 f872 	bl	8007ea4 <SCSI_CheckAddressRange>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da02      	bge.n	8007dcc <SCSI_Write10+0xee>
                               hmsc->scsi_blk_len) < 0)
    {
      return -1; /* error */
 8007dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dca:	e034      	b.n	8007e36 <SCSI_Write10+0x158>
    }

    len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007dd2:	697a      	ldr	r2, [r7, #20]
 8007dd4:	f8b2 245e 	ldrh.w	r2, [r2, #1118]	; 0x45e
 8007dd8:	fb02 f303 	mul.w	r3, r2, r3
 8007ddc:	613b      	str	r3, [r7, #16]

    /* cases 3,11,13 : Hn,Ho <> D0 */
    if (hmsc->cbw.dDataLength != len)
 8007dde:	697b      	ldr	r3, [r7, #20]
 8007de0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8007de4:	693a      	ldr	r2, [r7, #16]
 8007de6:	429a      	cmp	r2, r3
 8007de8:	d00a      	beq.n	8007e00 <SCSI_Write10+0x122>
    {
      SCSI_SenseCode(pdev, hmsc->cbw.bLUN, ILLEGAL_REQUEST, INVALID_CDB);
 8007dea:	697b      	ldr	r3, [r7, #20]
 8007dec:	f893 1419 	ldrb.w	r1, [r3, #1049]	; 0x419
 8007df0:	2320      	movs	r3, #32
 8007df2:	2205      	movs	r2, #5
 8007df4:	68f8      	ldr	r0, [r7, #12]
 8007df6:	f7ff fe99 	bl	8007b2c <SCSI_SenseCode>
      return -1;
 8007dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8007dfe:	e01a      	b.n	8007e36 <SCSI_Write10+0x158>
    }

    len = MIN(len, MSC_MEDIA_PACKET);
 8007e00:	693b      	ldr	r3, [r7, #16]
 8007e02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007e06:	bf28      	it	cs
 8007e08:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8007e0c:	613b      	str	r3, [r7, #16]

    /* Prepare EP to receive first data packet */
    hmsc->bot_state = USBD_BOT_DATA_OUT;
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	2201      	movs	r2, #1
 8007e12:	721a      	strb	r2, [r3, #8]
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	f103 020c 	add.w	r2, r3, #12
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	2101      	movs	r1, #1
 8007e20:	68f8      	ldr	r0, [r7, #12]
 8007e22:	f001 fe22 	bl	8009a6a <USBD_LL_PrepareReceive>
  }
  else /* Write Process ongoing */
  {
    return SCSI_ProcessWrite(pdev, lun);
  }
  return 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	e005      	b.n	8007e36 <SCSI_Write10+0x158>
    return SCSI_ProcessWrite(pdev, lun);
 8007e2a:	7afb      	ldrb	r3, [r7, #11]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	68f8      	ldr	r0, [r7, #12]
 8007e30:	f000 f8ce 	bl	8007fd0 <SCSI_ProcessWrite>
 8007e34:	4603      	mov	r3, r0
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	3718      	adds	r7, #24
 8007e3a:	46bd      	mov	sp, r7
 8007e3c:	bd80      	pop	{r7, pc}

08007e3e <SCSI_Verify10>:
* @param  params: Command parameters
* @retval status
*/

static int8_t SCSI_Verify10(USBD_HandleTypeDef  *pdev, uint8_t lun, uint8_t *params)
{
 8007e3e:	b580      	push	{r7, lr}
 8007e40:	b086      	sub	sp, #24
 8007e42:	af00      	add	r7, sp, #0
 8007e44:	60f8      	str	r0, [r7, #12]
 8007e46:	460b      	mov	r3, r1
 8007e48:	607a      	str	r2, [r7, #4]
 8007e4a:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e52:	617b      	str	r3, [r7, #20]

  if ((params[1] & 0x02U) == 0x02U)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	3301      	adds	r3, #1
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f003 0302 	and.w	r3, r3, #2
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d008      	beq.n	8007e74 <SCSI_Verify10+0x36>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, INVALID_FIELED_IN_COMMAND);
 8007e62:	7af9      	ldrb	r1, [r7, #11]
 8007e64:	2324      	movs	r3, #36	; 0x24
 8007e66:	2205      	movs	r2, #5
 8007e68:	68f8      	ldr	r0, [r7, #12]
 8007e6a:	f7ff fe5f 	bl	8007b2c <SCSI_SenseCode>
    return -1; /* Error, Verify Mode Not supported*/
 8007e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e72:	e013      	b.n	8007e9c <SCSI_Verify10+0x5e>
  }

  if (SCSI_CheckAddressRange(pdev, lun, hmsc->scsi_blk_addr,
 8007e74:	697b      	ldr	r3, [r7, #20]
 8007e76:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 8007e7a:	697b      	ldr	r3, [r7, #20]
 8007e7c:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007e80:	7af9      	ldrb	r1, [r7, #11]
 8007e82:	68f8      	ldr	r0, [r7, #12]
 8007e84:	f000 f80e 	bl	8007ea4 <SCSI_CheckAddressRange>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	da02      	bge.n	8007e94 <SCSI_Verify10+0x56>
                             hmsc->scsi_blk_len) < 0)
  {
    return -1; /* error */
 8007e8e:	f04f 33ff 	mov.w	r3, #4294967295
 8007e92:	e003      	b.n	8007e9c <SCSI_Verify10+0x5e>
  }
  hmsc->bot_data_length = 0U;
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	2200      	movs	r2, #0
 8007e98:	815a      	strh	r2, [r3, #10]
  return 0;
 8007e9a:	2300      	movs	r3, #0
}
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	3718      	adds	r7, #24
 8007ea0:	46bd      	mov	sp, r7
 8007ea2:	bd80      	pop	{r7, pc}

08007ea4 <SCSI_CheckAddressRange>:
* @param  blk_nbr: number of block to be processed
* @retval status
*/
static int8_t SCSI_CheckAddressRange(USBD_HandleTypeDef *pdev, uint8_t lun,
                                     uint32_t blk_offset, uint32_t blk_nbr)
{
 8007ea4:	b580      	push	{r7, lr}
 8007ea6:	b086      	sub	sp, #24
 8007ea8:	af00      	add	r7, sp, #0
 8007eaa:	60f8      	str	r0, [r7, #12]
 8007eac:	607a      	str	r2, [r7, #4]
 8007eae:	603b      	str	r3, [r7, #0]
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	72fb      	strb	r3, [r7, #11]
  USBD_MSC_BOT_HandleTypeDef  *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007eba:	617b      	str	r3, [r7, #20]

  if ((blk_offset + blk_nbr) > hmsc->scsi_blk_nbr)
 8007ebc:	687a      	ldr	r2, [r7, #4]
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	441a      	add	r2, r3
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	f8d3 3460 	ldr.w	r3, [r3, #1120]	; 0x460
 8007ec8:	429a      	cmp	r2, r3
 8007eca:	d908      	bls.n	8007ede <SCSI_CheckAddressRange+0x3a>
  {
    SCSI_SenseCode(pdev, lun, ILLEGAL_REQUEST, ADDRESS_OUT_OF_RANGE);
 8007ecc:	7af9      	ldrb	r1, [r7, #11]
 8007ece:	2321      	movs	r3, #33	; 0x21
 8007ed0:	2205      	movs	r2, #5
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff fe2a 	bl	8007b2c <SCSI_SenseCode>
    return -1;
 8007ed8:	f04f 33ff 	mov.w	r3, #4294967295
 8007edc:	e000      	b.n	8007ee0 <SCSI_CheckAddressRange+0x3c>
  }
  return 0;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3718      	adds	r7, #24
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <SCSI_ProcessRead>:
*         Handle Read Process
* @param  lun: Logical unit number
* @retval status
*/
static int8_t SCSI_ProcessRead(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007ee8:	b590      	push	{r4, r7, lr}
 8007eea:	b085      	sub	sp, #20
 8007eec:	af00      	add	r7, sp, #0
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *)pdev->pClassData;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007efa:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007f02:	68fa      	ldr	r2, [r7, #12]
 8007f04:	f8b2 245e 	ldrh.w	r2, [r2, #1118]	; 0x45e
 8007f08:	fb02 f303 	mul.w	r3, r2, r3
 8007f0c:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007f0e:	68bb      	ldr	r3, [r7, #8]
 8007f10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f14:	bf28      	it	cs
 8007f16:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8007f1a:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007f22:	691c      	ldr	r4, [r3, #16]
                                                     hmsc->bot_data,
 8007f24:	68fb      	ldr	r3, [r7, #12]
 8007f26:	f103 010c 	add.w	r1, r3, #12
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
                                                     hmsc->scsi_blk_addr,
                                                     (len / hmsc->scsi_blk_size)) < 0)
 8007f30:	68fb      	ldr	r3, [r7, #12]
 8007f32:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8007f36:	4618      	mov	r0, r3
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Read(lun,
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	78f8      	ldrb	r0, [r7, #3]
 8007f42:	47a0      	blx	r4
 8007f44:	4603      	mov	r3, r0
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	da08      	bge.n	8007f5c <SCSI_ProcessRead+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, UNRECOVERED_READ_ERROR);
 8007f4a:	78f9      	ldrb	r1, [r7, #3]
 8007f4c:	2311      	movs	r3, #17
 8007f4e:	2204      	movs	r2, #4
 8007f50:	6878      	ldr	r0, [r7, #4]
 8007f52:	f7ff fdeb 	bl	8007b2c <SCSI_SenseCode>
    return -1;
 8007f56:	f04f 33ff 	mov.w	r3, #4294967295
 8007f5a:	e035      	b.n	8007fc8 <SCSI_ProcessRead+0xe0>
  }

  USBD_LL_Transmit(pdev, MSC_EPIN_ADDR, hmsc->bot_data, len);
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	f103 020c 	add.w	r2, r3, #12
 8007f62:	68bb      	ldr	r3, [r7, #8]
 8007f64:	b29b      	uxth	r3, r3
 8007f66:	2181      	movs	r1, #129	; 0x81
 8007f68:	6878      	ldr	r0, [r7, #4]
 8007f6a:	f001 fd5b 	bl	8009a24 <USBD_LL_Transmit>

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 8007f74:	68fb      	ldr	r3, [r7, #12]
 8007f76:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f82:	441a      	add	r2, r3
 8007f84:	68fb      	ldr	r3, [r7, #12]
 8007f86:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8007f96:	4619      	mov	r1, r3
 8007f98:	68bb      	ldr	r3, [r7, #8]
 8007f9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8007f9e:	1ad2      	subs	r2, r2, r3
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468

  /* case 6 : Hi = Di */
  hmsc->csw.dDataResidue -= len;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	1ad2      	subs	r2, r2, r3
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  if (hmsc->scsi_blk_len == 0U)
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d102      	bne.n	8007fc6 <SCSI_ProcessRead+0xde>
  {
    hmsc->bot_state = USBD_BOT_LAST_DATA_IN;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	2203      	movs	r2, #3
 8007fc4:	721a      	strb	r2, [r3, #8]
  }
  return 0;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3714      	adds	r7, #20
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd90      	pop	{r4, r7, pc}

08007fd0 <SCSI_ProcessWrite>:
* @param  lun: Logical unit number
* @retval status
*/

static int8_t SCSI_ProcessWrite(USBD_HandleTypeDef  *pdev, uint8_t lun)
{
 8007fd0:	b590      	push	{r4, r7, lr}
 8007fd2:	b085      	sub	sp, #20
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	6078      	str	r0, [r7, #4]
 8007fd8:	460b      	mov	r3, r1
 8007fda:	70fb      	strb	r3, [r7, #3]
  USBD_MSC_BOT_HandleTypeDef *hmsc = (USBD_MSC_BOT_HandleTypeDef *) pdev->pClassData;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007fe2:	60fb      	str	r3, [r7, #12]
  uint32_t len = hmsc->scsi_blk_len * hmsc->scsi_blk_size;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8007fea:	68fa      	ldr	r2, [r7, #12]
 8007fec:	f8b2 245e 	ldrh.w	r2, [r2, #1118]	; 0x45e
 8007ff0:	fb02 f303 	mul.w	r3, r2, r3
 8007ff4:	60bb      	str	r3, [r7, #8]

  len = MIN(len, MSC_MEDIA_PACKET);
 8007ff6:	68bb      	ldr	r3, [r7, #8]
 8007ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ffc:	bf28      	it	cs
 8007ffe:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 8008002:	60bb      	str	r3, [r7, #8]

  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800800a:	695c      	ldr	r4, [r3, #20]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f103 010c 	add.w	r1, r3, #12
 8008012:	68fb      	ldr	r3, [r7, #12]
 8008014:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
                                                      hmsc->scsi_blk_addr,
                                                      (len / hmsc->scsi_blk_size)) < 0)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 800801e:	4618      	mov	r0, r3
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	fbb3 f3f0 	udiv	r3, r3, r0
  if (((USBD_StorageTypeDef *)pdev->pUserData)->Write(lun, hmsc->bot_data,
 8008026:	b29b      	uxth	r3, r3
 8008028:	78f8      	ldrb	r0, [r7, #3]
 800802a:	47a0      	blx	r4
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	da08      	bge.n	8008044 <SCSI_ProcessWrite+0x74>
  {
    SCSI_SenseCode(pdev, lun, HARDWARE_ERROR, WRITE_FAULT);
 8008032:	78f9      	ldrb	r1, [r7, #3]
 8008034:	2303      	movs	r3, #3
 8008036:	2204      	movs	r2, #4
 8008038:	6878      	ldr	r0, [r7, #4]
 800803a:	f7ff fd77 	bl	8007b2c <SCSI_SenseCode>

    return -1;
 800803e:	f04f 33ff 	mov.w	r3, #4294967295
 8008042:	e045      	b.n	80080d0 <SCSI_ProcessWrite+0x100>
  }

  hmsc->scsi_blk_addr += (len / hmsc->scsi_blk_size);
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	f8d3 2464 	ldr.w	r2, [r3, #1124]	; 0x464
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 8008050:	4619      	mov	r1, r3
 8008052:	68bb      	ldr	r3, [r7, #8]
 8008054:	fbb3 f3f1 	udiv	r3, r3, r1
 8008058:	441a      	add	r2, r3
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	f8c3 2464 	str.w	r2, [r3, #1124]	; 0x464
  hmsc->scsi_blk_len -= (len / hmsc->scsi_blk_size);
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f8d3 2468 	ldr.w	r2, [r3, #1128]	; 0x468
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	f8b3 345e 	ldrh.w	r3, [r3, #1118]	; 0x45e
 800806c:	4619      	mov	r1, r3
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	fbb3 f3f1 	udiv	r3, r3, r1
 8008074:	1ad2      	subs	r2, r2, r3
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	f8c3 2468 	str.w	r2, [r3, #1128]	; 0x468

  /* case 12 : Ho = Do */
  hmsc->csw.dDataResidue -= len;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f8d3 2434 	ldr.w	r2, [r3, #1076]	; 0x434
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	1ad2      	subs	r2, r2, r3
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	f8c3 2434 	str.w	r2, [r3, #1076]	; 0x434

  if (hmsc->scsi_blk_len == 0U)
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 8008092:	2b00      	cmp	r3, #0
 8008094:	d104      	bne.n	80080a0 <SCSI_ProcessWrite+0xd0>
  {
    MSC_BOT_SendCSW(pdev, USBD_CSW_CMD_PASSED);
 8008096:	2100      	movs	r1, #0
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f7ff f97f 	bl	800739c <MSC_BOT_SendCSW>
 800809e:	e016      	b.n	80080ce <SCSI_ProcessWrite+0xfe>
  }
  else
  {
    len = MIN((hmsc->scsi_blk_len * hmsc->scsi_blk_size), MSC_MEDIA_PACKET);
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	f8d3 3468 	ldr.w	r3, [r3, #1128]	; 0x468
 80080a6:	68fa      	ldr	r2, [r7, #12]
 80080a8:	f8b2 245e 	ldrh.w	r2, [r2, #1118]	; 0x45e
 80080ac:	fb02 f303 	mul.w	r3, r2, r3
 80080b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80080b4:	bf28      	it	cs
 80080b6:	f44f 6380 	movcs.w	r3, #1024	; 0x400
 80080ba:	60bb      	str	r3, [r7, #8]
    /* Prepare EP to Receive next packet */
    USBD_LL_PrepareReceive(pdev, MSC_EPOUT_ADDR, hmsc->bot_data, len);
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	f103 020c 	add.w	r2, r3, #12
 80080c2:	68bb      	ldr	r3, [r7, #8]
 80080c4:	b29b      	uxth	r3, r3
 80080c6:	2101      	movs	r1, #1
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f001 fcce 	bl	8009a6a <USBD_LL_PrepareReceive>
  }

  return 0;
 80080ce:	2300      	movs	r3, #0
}
 80080d0:	4618      	mov	r0, r3
 80080d2:	3714      	adds	r7, #20
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd90      	pop	{r4, r7, pc}

080080d8 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b084      	sub	sp, #16
 80080dc:	af00      	add	r7, sp, #0
 80080de:	60f8      	str	r0, [r7, #12]
 80080e0:	60b9      	str	r1, [r7, #8]
 80080e2:	4613      	mov	r3, r2
 80080e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	2b00      	cmp	r3, #0
 80080ea:	d101      	bne.n	80080f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80080ec:	2302      	movs	r3, #2
 80080ee:	e01a      	b.n	8008126 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80080f6:	2b00      	cmp	r3, #0
 80080f8:	d003      	beq.n	8008102 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d003      	beq.n	8008110 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	68ba      	ldr	r2, [r7, #8]
 800810c:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	2201      	movs	r2, #1
 8008114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	79fa      	ldrb	r2, [r7, #7]
 800811c:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f001 fb28 	bl	8009774 <USBD_LL_Init>

  return USBD_OK;
 8008124:	2300      	movs	r3, #0
}
 8008126:	4618      	mov	r0, r3
 8008128:	3710      	adds	r7, #16
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}

0800812e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800812e:	b480      	push	{r7}
 8008130:	b085      	sub	sp, #20
 8008132:	af00      	add	r7, sp, #0
 8008134:	6078      	str	r0, [r7, #4]
 8008136:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8008138:	2300      	movs	r3, #0
 800813a:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2b00      	cmp	r3, #0
 8008140:	d006      	beq.n	8008150 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	683a      	ldr	r2, [r7, #0]
 8008146:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800814a:	2300      	movs	r3, #0
 800814c:	73fb      	strb	r3, [r7, #15]
 800814e:	e001      	b.n	8008154 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8008150:	2302      	movs	r3, #2
 8008152:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008154:	7bfb      	ldrb	r3, [r7, #15]
}
 8008156:	4618      	mov	r0, r3
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	bc80      	pop	{r7}
 800815e:	4770      	bx	lr

08008160 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8008168:	6878      	ldr	r0, [r7, #4]
 800816a:	f001 fb53 	bl	8009814 <USBD_LL_Start>

  return USBD_OK;
 800816e:	2300      	movs	r3, #0
}
 8008170:	4618      	mov	r0, r3
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008180:	2300      	movs	r3, #0
}
 8008182:	4618      	mov	r0, r3
 8008184:	370c      	adds	r7, #12
 8008186:	46bd      	mov	sp, r7
 8008188:	bc80      	pop	{r7}
 800818a:	4770      	bx	lr

0800818c <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b084      	sub	sp, #16
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	460b      	mov	r3, r1
 8008196:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8008198:	2302      	movs	r3, #2
 800819a:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00c      	beq.n	80081c0 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	78fa      	ldrb	r2, [r7, #3]
 80081b0:	4611      	mov	r1, r2
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	4798      	blx	r3
 80081b6:	4603      	mov	r3, r0
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	d101      	bne.n	80081c0 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80081bc:	2300      	movs	r3, #0
 80081be:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80081c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081c2:	4618      	mov	r0, r3
 80081c4:	3710      	adds	r7, #16
 80081c6:	46bd      	mov	sp, r7
 80081c8:	bd80      	pop	{r7, pc}

080081ca <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80081ca:	b580      	push	{r7, lr}
 80081cc:	b082      	sub	sp, #8
 80081ce:	af00      	add	r7, sp, #0
 80081d0:	6078      	str	r0, [r7, #4]
 80081d2:	460b      	mov	r3, r1
 80081d4:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80081dc:	685b      	ldr	r3, [r3, #4]
 80081de:	78fa      	ldrb	r2, [r7, #3]
 80081e0:	4611      	mov	r1, r2
 80081e2:	6878      	ldr	r0, [r7, #4]
 80081e4:	4798      	blx	r3

  return USBD_OK;
 80081e6:	2300      	movs	r3, #0
}
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008200:	6839      	ldr	r1, [r7, #0]
 8008202:	4618      	mov	r0, r3
 8008204:	f000 fed7 	bl	8008fb6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	2201      	movs	r2, #1
 800820c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008216:	461a      	mov	r2, r3
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008224:	f003 031f 	and.w	r3, r3, #31
 8008228:	2b02      	cmp	r3, #2
 800822a:	d016      	beq.n	800825a <USBD_LL_SetupStage+0x6a>
 800822c:	2b02      	cmp	r3, #2
 800822e:	d81c      	bhi.n	800826a <USBD_LL_SetupStage+0x7a>
 8008230:	2b00      	cmp	r3, #0
 8008232:	d002      	beq.n	800823a <USBD_LL_SetupStage+0x4a>
 8008234:	2b01      	cmp	r3, #1
 8008236:	d008      	beq.n	800824a <USBD_LL_SetupStage+0x5a>
 8008238:	e017      	b.n	800826a <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008240:	4619      	mov	r1, r3
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f000 f9ca 	bl	80085dc <USBD_StdDevReq>
      break;
 8008248:	e01a      	b.n	8008280 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008250:	4619      	mov	r1, r3
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 fa2c 	bl	80086b0 <USBD_StdItfReq>
      break;
 8008258:	e012      	b.n	8008280 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8008260:	4619      	mov	r1, r3
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f000 fa6c 	bl	8008740 <USBD_StdEPReq>
      break;
 8008268:	e00a      	b.n	8008280 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8008270:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008274:	b2db      	uxtb	r3, r3
 8008276:	4619      	mov	r1, r3
 8008278:	6878      	ldr	r0, [r7, #4]
 800827a:	f001 fb4a 	bl	8009912 <USBD_LL_StallEP>
      break;
 800827e:	bf00      	nop
  }

  return USBD_OK;
 8008280:	2300      	movs	r3, #0
}
 8008282:	4618      	mov	r0, r3
 8008284:	3708      	adds	r7, #8
 8008286:	46bd      	mov	sp, r7
 8008288:	bd80      	pop	{r7, pc}

0800828a <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800828a:	b580      	push	{r7, lr}
 800828c:	b086      	sub	sp, #24
 800828e:	af00      	add	r7, sp, #0
 8008290:	60f8      	str	r0, [r7, #12]
 8008292:	460b      	mov	r3, r1
 8008294:	607a      	str	r2, [r7, #4]
 8008296:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8008298:	7afb      	ldrb	r3, [r7, #11]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d14b      	bne.n	8008336 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80082a4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80082ac:	2b03      	cmp	r3, #3
 80082ae:	d134      	bne.n	800831a <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80082b0:	697b      	ldr	r3, [r7, #20]
 80082b2:	68da      	ldr	r2, [r3, #12]
 80082b4:	697b      	ldr	r3, [r7, #20]
 80082b6:	691b      	ldr	r3, [r3, #16]
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d919      	bls.n	80082f0 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80082bc:	697b      	ldr	r3, [r7, #20]
 80082be:	68da      	ldr	r2, [r3, #12]
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	691b      	ldr	r3, [r3, #16]
 80082c4:	1ad2      	subs	r2, r2, r3
 80082c6:	697b      	ldr	r3, [r7, #20]
 80082c8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082ca:	697b      	ldr	r3, [r7, #20]
 80082cc:	68da      	ldr	r2, [r3, #12]
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d203      	bcs.n	80082de <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80082da:	b29b      	uxth	r3, r3
 80082dc:	e002      	b.n	80082e4 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80082de:	697b      	ldr	r3, [r7, #20]
 80082e0:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80082e2:	b29b      	uxth	r3, r3
 80082e4:	461a      	mov	r2, r3
 80082e6:	6879      	ldr	r1, [r7, #4]
 80082e8:	68f8      	ldr	r0, [r7, #12]
 80082ea:	f000 ff38 	bl	800915e <USBD_CtlContinueRx>
 80082ee:	e038      	b.n	8008362 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082f6:	691b      	ldr	r3, [r3, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d00a      	beq.n	8008312 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8008302:	2b03      	cmp	r3, #3
 8008304:	d105      	bne.n	8008312 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800830c:	691b      	ldr	r3, [r3, #16]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 ff35 	bl	8009182 <USBD_CtlSendStatus>
 8008318:	e023      	b.n	8008362 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008320:	2b05      	cmp	r3, #5
 8008322:	d11e      	bne.n	8008362 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	2200      	movs	r2, #0
 8008328:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800832c:	2100      	movs	r1, #0
 800832e:	68f8      	ldr	r0, [r7, #12]
 8008330:	f001 faef 	bl	8009912 <USBD_LL_StallEP>
 8008334:	e015      	b.n	8008362 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800833c:	699b      	ldr	r3, [r3, #24]
 800833e:	2b00      	cmp	r3, #0
 8008340:	d00d      	beq.n	800835e <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8008348:	2b03      	cmp	r3, #3
 800834a:	d108      	bne.n	800835e <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008352:	699b      	ldr	r3, [r3, #24]
 8008354:	7afa      	ldrb	r2, [r7, #11]
 8008356:	4611      	mov	r1, r2
 8008358:	68f8      	ldr	r0, [r7, #12]
 800835a:	4798      	blx	r3
 800835c:	e001      	b.n	8008362 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800835e:	2302      	movs	r3, #2
 8008360:	e000      	b.n	8008364 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8008362:	2300      	movs	r3, #0
}
 8008364:	4618      	mov	r0, r3
 8008366:	3718      	adds	r7, #24
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b086      	sub	sp, #24
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	460b      	mov	r3, r1
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800837a:	7afb      	ldrb	r3, [r7, #11]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d17f      	bne.n	8008480 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	3314      	adds	r3, #20
 8008384:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800838c:	2b02      	cmp	r3, #2
 800838e:	d15c      	bne.n	800844a <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8008390:	697b      	ldr	r3, [r7, #20]
 8008392:	68da      	ldr	r2, [r3, #12]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	691b      	ldr	r3, [r3, #16]
 8008398:	429a      	cmp	r2, r3
 800839a:	d915      	bls.n	80083c8 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800839c:	697b      	ldr	r3, [r7, #20]
 800839e:	68da      	ldr	r2, [r3, #12]
 80083a0:	697b      	ldr	r3, [r7, #20]
 80083a2:	691b      	ldr	r3, [r3, #16]
 80083a4:	1ad2      	subs	r2, r2, r3
 80083a6:	697b      	ldr	r3, [r7, #20]
 80083a8:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	b29b      	uxth	r3, r3
 80083b0:	461a      	mov	r2, r3
 80083b2:	6879      	ldr	r1, [r7, #4]
 80083b4:	68f8      	ldr	r0, [r7, #12]
 80083b6:	f000 fec0 	bl	800913a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80083ba:	2300      	movs	r3, #0
 80083bc:	2200      	movs	r2, #0
 80083be:	2100      	movs	r1, #0
 80083c0:	68f8      	ldr	r0, [r7, #12]
 80083c2:	f001 fb52 	bl	8009a6a <USBD_LL_PrepareReceive>
 80083c6:	e04e      	b.n	8008466 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083c8:	697b      	ldr	r3, [r7, #20]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	697a      	ldr	r2, [r7, #20]
 80083ce:	6912      	ldr	r2, [r2, #16]
 80083d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80083d4:	fb01 f202 	mul.w	r2, r1, r2
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d11c      	bne.n	8008418 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	689a      	ldr	r2, [r3, #8]
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80083e6:	429a      	cmp	r2, r3
 80083e8:	d316      	bcc.n	8008418 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80083ea:	697b      	ldr	r3, [r7, #20]
 80083ec:	689a      	ldr	r2, [r3, #8]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d20f      	bcs.n	8008418 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80083f8:	2200      	movs	r2, #0
 80083fa:	2100      	movs	r1, #0
 80083fc:	68f8      	ldr	r0, [r7, #12]
 80083fe:	f000 fe9c 	bl	800913a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008402:	68fb      	ldr	r3, [r7, #12]
 8008404:	2200      	movs	r2, #0
 8008406:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800840a:	2300      	movs	r3, #0
 800840c:	2200      	movs	r2, #0
 800840e:	2100      	movs	r1, #0
 8008410:	68f8      	ldr	r0, [r7, #12]
 8008412:	f001 fb2a 	bl	8009a6a <USBD_LL_PrepareReceive>
 8008416:	e026      	b.n	8008466 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	2b00      	cmp	r3, #0
 8008422:	d00a      	beq.n	800843a <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800842a:	2b03      	cmp	r3, #3
 800842c:	d105      	bne.n	800843a <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008434:	68db      	ldr	r3, [r3, #12]
 8008436:	68f8      	ldr	r0, [r7, #12]
 8008438:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800843a:	2180      	movs	r1, #128	; 0x80
 800843c:	68f8      	ldr	r0, [r7, #12]
 800843e:	f001 fa68 	bl	8009912 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8008442:	68f8      	ldr	r0, [r7, #12]
 8008444:	f000 feb0 	bl	80091a8 <USBD_CtlReceiveStatus>
 8008448:	e00d      	b.n	8008466 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008450:	2b04      	cmp	r3, #4
 8008452:	d004      	beq.n	800845e <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800845a:	2b00      	cmp	r3, #0
 800845c:	d103      	bne.n	8008466 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800845e:	2180      	movs	r1, #128	; 0x80
 8008460:	68f8      	ldr	r0, [r7, #12]
 8008462:	f001 fa56 	bl	8009912 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800846c:	2b01      	cmp	r3, #1
 800846e:	d11d      	bne.n	80084ac <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f7ff fe81 	bl	8008178 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	2200      	movs	r2, #0
 800847a:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800847e:	e015      	b.n	80084ac <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008486:	695b      	ldr	r3, [r3, #20]
 8008488:	2b00      	cmp	r3, #0
 800848a:	d00d      	beq.n	80084a8 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8008492:	2b03      	cmp	r3, #3
 8008494:	d108      	bne.n	80084a8 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800849c:	695b      	ldr	r3, [r3, #20]
 800849e:	7afa      	ldrb	r2, [r7, #11]
 80084a0:	4611      	mov	r1, r2
 80084a2:	68f8      	ldr	r0, [r7, #12]
 80084a4:	4798      	blx	r3
 80084a6:	e001      	b.n	80084ac <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80084a8:	2302      	movs	r3, #2
 80084aa:	e000      	b.n	80084ae <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80084ac:	2300      	movs	r3, #0
}
 80084ae:	4618      	mov	r0, r3
 80084b0:	3718      	adds	r7, #24
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b082      	sub	sp, #8
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084be:	2340      	movs	r3, #64	; 0x40
 80084c0:	2200      	movs	r2, #0
 80084c2:	2100      	movs	r1, #0
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 f9c0 	bl	800984a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	2201      	movs	r2, #1
 80084ce:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2240      	movs	r2, #64	; 0x40
 80084d6:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80084da:	2340      	movs	r3, #64	; 0x40
 80084dc:	2200      	movs	r2, #0
 80084de:	2180      	movs	r1, #128	; 0x80
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f001 f9b2 	bl	800984a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2201      	movs	r2, #1
 80084ea:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2240      	movs	r2, #64	; 0x40
 80084f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2201      	movs	r2, #1
 80084f6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	2200      	movs	r2, #0
 80084fe:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2200      	movs	r2, #0
 8008506:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	2200      	movs	r2, #0
 800850c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008516:	2b00      	cmp	r3, #0
 8008518:	d009      	beq.n	800852e <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	687a      	ldr	r2, [r7, #4]
 8008524:	6852      	ldr	r2, [r2, #4]
 8008526:	b2d2      	uxtb	r2, r2
 8008528:	4611      	mov	r1, r2
 800852a:	6878      	ldr	r0, [r7, #4]
 800852c:	4798      	blx	r3
  }

  return USBD_OK;
 800852e:	2300      	movs	r3, #0
}
 8008530:	4618      	mov	r0, r3
 8008532:	3708      	adds	r7, #8
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	460b      	mov	r3, r1
 8008542:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	78fa      	ldrb	r2, [r7, #3]
 8008548:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800854a:	2300      	movs	r3, #0
}
 800854c:	4618      	mov	r0, r3
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	bc80      	pop	{r7}
 8008554:	4770      	bx	lr

08008556 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008556:	b480      	push	{r7}
 8008558:	b083      	sub	sp, #12
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	2204      	movs	r2, #4
 800856e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008572:	2300      	movs	r3, #0
}
 8008574:	4618      	mov	r0, r3
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	bc80      	pop	{r7}
 800857c:	4770      	bx	lr

0800857e <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800857e:	b480      	push	{r7}
 8008580:	b083      	sub	sp, #12
 8008582:	af00      	add	r7, sp, #0
 8008584:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800858c:	2b04      	cmp	r3, #4
 800858e:	d105      	bne.n	800859c <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800859c:	2300      	movs	r3, #0
}
 800859e:	4618      	mov	r0, r3
 80085a0:	370c      	adds	r7, #12
 80085a2:	46bd      	mov	sp, r7
 80085a4:	bc80      	pop	{r7}
 80085a6:	4770      	bx	lr

080085a8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b082      	sub	sp, #8
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80085b6:	2b03      	cmp	r3, #3
 80085b8:	d10b      	bne.n	80085d2 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d005      	beq.n	80085d2 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80085cc:	69db      	ldr	r3, [r3, #28]
 80085ce:	6878      	ldr	r0, [r7, #4]
 80085d0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80085d2:	2300      	movs	r3, #0
}
 80085d4:	4618      	mov	r0, r3
 80085d6:	3708      	adds	r7, #8
 80085d8:	46bd      	mov	sp, r7
 80085da:	bd80      	pop	{r7, pc}

080085dc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
 80085e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80085e6:	2300      	movs	r3, #0
 80085e8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	781b      	ldrb	r3, [r3, #0]
 80085ee:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80085f2:	2b40      	cmp	r3, #64	; 0x40
 80085f4:	d005      	beq.n	8008602 <USBD_StdDevReq+0x26>
 80085f6:	2b40      	cmp	r3, #64	; 0x40
 80085f8:	d84f      	bhi.n	800869a <USBD_StdDevReq+0xbe>
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	d009      	beq.n	8008612 <USBD_StdDevReq+0x36>
 80085fe:	2b20      	cmp	r3, #32
 8008600:	d14b      	bne.n	800869a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008608:	689b      	ldr	r3, [r3, #8]
 800860a:	6839      	ldr	r1, [r7, #0]
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	4798      	blx	r3
      break;
 8008610:	e048      	b.n	80086a4 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008612:	683b      	ldr	r3, [r7, #0]
 8008614:	785b      	ldrb	r3, [r3, #1]
 8008616:	2b09      	cmp	r3, #9
 8008618:	d839      	bhi.n	800868e <USBD_StdDevReq+0xb2>
 800861a:	a201      	add	r2, pc, #4	; (adr r2, 8008620 <USBD_StdDevReq+0x44>)
 800861c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008620:	08008671 	.word	0x08008671
 8008624:	08008685 	.word	0x08008685
 8008628:	0800868f 	.word	0x0800868f
 800862c:	0800867b 	.word	0x0800867b
 8008630:	0800868f 	.word	0x0800868f
 8008634:	08008653 	.word	0x08008653
 8008638:	08008649 	.word	0x08008649
 800863c:	0800868f 	.word	0x0800868f
 8008640:	08008667 	.word	0x08008667
 8008644:	0800865d 	.word	0x0800865d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008648:	6839      	ldr	r1, [r7, #0]
 800864a:	6878      	ldr	r0, [r7, #4]
 800864c:	f000 f9dc 	bl	8008a08 <USBD_GetDescriptor>
          break;
 8008650:	e022      	b.n	8008698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008652:	6839      	ldr	r1, [r7, #0]
 8008654:	6878      	ldr	r0, [r7, #4]
 8008656:	f000 fb3f 	bl	8008cd8 <USBD_SetAddress>
          break;
 800865a:	e01d      	b.n	8008698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800865c:	6839      	ldr	r1, [r7, #0]
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f000 fb7e 	bl	8008d60 <USBD_SetConfig>
          break;
 8008664:	e018      	b.n	8008698 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008666:	6839      	ldr	r1, [r7, #0]
 8008668:	6878      	ldr	r0, [r7, #4]
 800866a:	f000 fc07 	bl	8008e7c <USBD_GetConfig>
          break;
 800866e:	e013      	b.n	8008698 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008670:	6839      	ldr	r1, [r7, #0]
 8008672:	6878      	ldr	r0, [r7, #4]
 8008674:	f000 fc37 	bl	8008ee6 <USBD_GetStatus>
          break;
 8008678:	e00e      	b.n	8008698 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800867a:	6839      	ldr	r1, [r7, #0]
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fc65 	bl	8008f4c <USBD_SetFeature>
          break;
 8008682:	e009      	b.n	8008698 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008684:	6839      	ldr	r1, [r7, #0]
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 fc74 	bl	8008f74 <USBD_ClrFeature>
          break;
 800868c:	e004      	b.n	8008698 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800868e:	6839      	ldr	r1, [r7, #0]
 8008690:	6878      	ldr	r0, [r7, #4]
 8008692:	f000 fccc 	bl	800902e <USBD_CtlError>
          break;
 8008696:	bf00      	nop
      }
      break;
 8008698:	e004      	b.n	80086a4 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800869a:	6839      	ldr	r1, [r7, #0]
 800869c:	6878      	ldr	r0, [r7, #4]
 800869e:	f000 fcc6 	bl	800902e <USBD_CtlError>
      break;
 80086a2:	bf00      	nop
  }

  return ret;
 80086a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3710      	adds	r7, #16
 80086aa:	46bd      	mov	sp, r7
 80086ac:	bd80      	pop	{r7, pc}
 80086ae:	bf00      	nop

080086b0 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 80086b0:	b580      	push	{r7, lr}
 80086b2:	b084      	sub	sp, #16
 80086b4:	af00      	add	r7, sp, #0
 80086b6:	6078      	str	r0, [r7, #4]
 80086b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80086ba:	2300      	movs	r3, #0
 80086bc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80086be:	683b      	ldr	r3, [r7, #0]
 80086c0:	781b      	ldrb	r3, [r3, #0]
 80086c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80086c6:	2b40      	cmp	r3, #64	; 0x40
 80086c8:	d005      	beq.n	80086d6 <USBD_StdItfReq+0x26>
 80086ca:	2b40      	cmp	r3, #64	; 0x40
 80086cc:	d82e      	bhi.n	800872c <USBD_StdItfReq+0x7c>
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d001      	beq.n	80086d6 <USBD_StdItfReq+0x26>
 80086d2:	2b20      	cmp	r3, #32
 80086d4:	d12a      	bne.n	800872c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086dc:	3b01      	subs	r3, #1
 80086de:	2b02      	cmp	r3, #2
 80086e0:	d81d      	bhi.n	800871e <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80086e2:	683b      	ldr	r3, [r7, #0]
 80086e4:	889b      	ldrh	r3, [r3, #4]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d813      	bhi.n	8008714 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80086f2:	689b      	ldr	r3, [r3, #8]
 80086f4:	6839      	ldr	r1, [r7, #0]
 80086f6:	6878      	ldr	r0, [r7, #4]
 80086f8:	4798      	blx	r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80086fe:	683b      	ldr	r3, [r7, #0]
 8008700:	88db      	ldrh	r3, [r3, #6]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d110      	bne.n	8008728 <USBD_StdItfReq+0x78>
 8008706:	7bfb      	ldrb	r3, [r7, #15]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10d      	bne.n	8008728 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 800870c:	6878      	ldr	r0, [r7, #4]
 800870e:	f000 fd38 	bl	8009182 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008712:	e009      	b.n	8008728 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8008714:	6839      	ldr	r1, [r7, #0]
 8008716:	6878      	ldr	r0, [r7, #4]
 8008718:	f000 fc89 	bl	800902e <USBD_CtlError>
          break;
 800871c:	e004      	b.n	8008728 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 800871e:	6839      	ldr	r1, [r7, #0]
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f000 fc84 	bl	800902e <USBD_CtlError>
          break;
 8008726:	e000      	b.n	800872a <USBD_StdItfReq+0x7a>
          break;
 8008728:	bf00      	nop
      }
      break;
 800872a:	e004      	b.n	8008736 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800872c:	6839      	ldr	r1, [r7, #0]
 800872e:	6878      	ldr	r0, [r7, #4]
 8008730:	f000 fc7d 	bl	800902e <USBD_CtlError>
      break;
 8008734:	bf00      	nop
  }

  return USBD_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	3710      	adds	r7, #16
 800873c:	46bd      	mov	sp, r7
 800873e:	bd80      	pop	{r7, pc}

08008740 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b084      	sub	sp, #16
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
 8008748:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800874a:	2300      	movs	r3, #0
 800874c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	889b      	ldrh	r3, [r3, #4]
 8008752:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008754:	683b      	ldr	r3, [r7, #0]
 8008756:	781b      	ldrb	r3, [r3, #0]
 8008758:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800875c:	2b40      	cmp	r3, #64	; 0x40
 800875e:	d007      	beq.n	8008770 <USBD_StdEPReq+0x30>
 8008760:	2b40      	cmp	r3, #64	; 0x40
 8008762:	f200 8146 	bhi.w	80089f2 <USBD_StdEPReq+0x2b2>
 8008766:	2b00      	cmp	r3, #0
 8008768:	d00a      	beq.n	8008780 <USBD_StdEPReq+0x40>
 800876a:	2b20      	cmp	r3, #32
 800876c:	f040 8141 	bne.w	80089f2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008776:	689b      	ldr	r3, [r3, #8]
 8008778:	6839      	ldr	r1, [r7, #0]
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	4798      	blx	r3
      break;
 800877e:	e13d      	b.n	80089fc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8008780:	683b      	ldr	r3, [r7, #0]
 8008782:	781b      	ldrb	r3, [r3, #0]
 8008784:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008788:	2b20      	cmp	r3, #32
 800878a:	d10a      	bne.n	80087a2 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008792:	689b      	ldr	r3, [r3, #8]
 8008794:	6839      	ldr	r1, [r7, #0]
 8008796:	6878      	ldr	r0, [r7, #4]
 8008798:	4798      	blx	r3
 800879a:	4603      	mov	r3, r0
 800879c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800879e:	7bfb      	ldrb	r3, [r7, #15]
 80087a0:	e12d      	b.n	80089fe <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 80087a2:	683b      	ldr	r3, [r7, #0]
 80087a4:	785b      	ldrb	r3, [r3, #1]
 80087a6:	2b03      	cmp	r3, #3
 80087a8:	d007      	beq.n	80087ba <USBD_StdEPReq+0x7a>
 80087aa:	2b03      	cmp	r3, #3
 80087ac:	f300 811b 	bgt.w	80089e6 <USBD_StdEPReq+0x2a6>
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d072      	beq.n	800889a <USBD_StdEPReq+0x15a>
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	d03a      	beq.n	800882e <USBD_StdEPReq+0xee>
 80087b8:	e115      	b.n	80089e6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c0:	2b02      	cmp	r3, #2
 80087c2:	d002      	beq.n	80087ca <USBD_StdEPReq+0x8a>
 80087c4:	2b03      	cmp	r3, #3
 80087c6:	d015      	beq.n	80087f4 <USBD_StdEPReq+0xb4>
 80087c8:	e02b      	b.n	8008822 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80087ca:	7bbb      	ldrb	r3, [r7, #14]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00c      	beq.n	80087ea <USBD_StdEPReq+0xaa>
 80087d0:	7bbb      	ldrb	r3, [r7, #14]
 80087d2:	2b80      	cmp	r3, #128	; 0x80
 80087d4:	d009      	beq.n	80087ea <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80087d6:	7bbb      	ldrb	r3, [r7, #14]
 80087d8:	4619      	mov	r1, r3
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 f899 	bl	8009912 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80087e0:	2180      	movs	r1, #128	; 0x80
 80087e2:	6878      	ldr	r0, [r7, #4]
 80087e4:	f001 f895 	bl	8009912 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80087e8:	e020      	b.n	800882c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80087ea:	6839      	ldr	r1, [r7, #0]
 80087ec:	6878      	ldr	r0, [r7, #4]
 80087ee:	f000 fc1e 	bl	800902e <USBD_CtlError>
              break;
 80087f2:	e01b      	b.n	800882c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	885b      	ldrh	r3, [r3, #2]
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d10e      	bne.n	800881a <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80087fc:	7bbb      	ldrb	r3, [r7, #14]
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00b      	beq.n	800881a <USBD_StdEPReq+0xda>
 8008802:	7bbb      	ldrb	r3, [r7, #14]
 8008804:	2b80      	cmp	r3, #128	; 0x80
 8008806:	d008      	beq.n	800881a <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008808:	683b      	ldr	r3, [r7, #0]
 800880a:	88db      	ldrh	r3, [r3, #6]
 800880c:	2b00      	cmp	r3, #0
 800880e:	d104      	bne.n	800881a <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8008810:	7bbb      	ldrb	r3, [r7, #14]
 8008812:	4619      	mov	r1, r3
 8008814:	6878      	ldr	r0, [r7, #4]
 8008816:	f001 f87c 	bl	8009912 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fcb1 	bl	8009182 <USBD_CtlSendStatus>

              break;
 8008820:	e004      	b.n	800882c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	6878      	ldr	r0, [r7, #4]
 8008826:	f000 fc02 	bl	800902e <USBD_CtlError>
              break;
 800882a:	bf00      	nop
          }
          break;
 800882c:	e0e0      	b.n	80089f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008834:	2b02      	cmp	r3, #2
 8008836:	d002      	beq.n	800883e <USBD_StdEPReq+0xfe>
 8008838:	2b03      	cmp	r3, #3
 800883a:	d015      	beq.n	8008868 <USBD_StdEPReq+0x128>
 800883c:	e026      	b.n	800888c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800883e:	7bbb      	ldrb	r3, [r7, #14]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d00c      	beq.n	800885e <USBD_StdEPReq+0x11e>
 8008844:	7bbb      	ldrb	r3, [r7, #14]
 8008846:	2b80      	cmp	r3, #128	; 0x80
 8008848:	d009      	beq.n	800885e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800884a:	7bbb      	ldrb	r3, [r7, #14]
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 f85f 	bl	8009912 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8008854:	2180      	movs	r1, #128	; 0x80
 8008856:	6878      	ldr	r0, [r7, #4]
 8008858:	f001 f85b 	bl	8009912 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800885c:	e01c      	b.n	8008898 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800885e:	6839      	ldr	r1, [r7, #0]
 8008860:	6878      	ldr	r0, [r7, #4]
 8008862:	f000 fbe4 	bl	800902e <USBD_CtlError>
              break;
 8008866:	e017      	b.n	8008898 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008868:	683b      	ldr	r3, [r7, #0]
 800886a:	885b      	ldrh	r3, [r3, #2]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d112      	bne.n	8008896 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008870:	7bbb      	ldrb	r3, [r7, #14]
 8008872:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008876:	2b00      	cmp	r3, #0
 8008878:	d004      	beq.n	8008884 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800887a:	7bbb      	ldrb	r3, [r7, #14]
 800887c:	4619      	mov	r1, r3
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f001 f866 	bl	8009950 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8008884:	6878      	ldr	r0, [r7, #4]
 8008886:	f000 fc7c 	bl	8009182 <USBD_CtlSendStatus>
              }
              break;
 800888a:	e004      	b.n	8008896 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800888c:	6839      	ldr	r1, [r7, #0]
 800888e:	6878      	ldr	r0, [r7, #4]
 8008890:	f000 fbcd 	bl	800902e <USBD_CtlError>
              break;
 8008894:	e000      	b.n	8008898 <USBD_StdEPReq+0x158>
              break;
 8008896:	bf00      	nop
          }
          break;
 8008898:	e0aa      	b.n	80089f0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088a0:	2b02      	cmp	r3, #2
 80088a2:	d002      	beq.n	80088aa <USBD_StdEPReq+0x16a>
 80088a4:	2b03      	cmp	r3, #3
 80088a6:	d032      	beq.n	800890e <USBD_StdEPReq+0x1ce>
 80088a8:	e097      	b.n	80089da <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80088aa:	7bbb      	ldrb	r3, [r7, #14]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d007      	beq.n	80088c0 <USBD_StdEPReq+0x180>
 80088b0:	7bbb      	ldrb	r3, [r7, #14]
 80088b2:	2b80      	cmp	r3, #128	; 0x80
 80088b4:	d004      	beq.n	80088c0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 80088b6:	6839      	ldr	r1, [r7, #0]
 80088b8:	6878      	ldr	r0, [r7, #4]
 80088ba:	f000 fbb8 	bl	800902e <USBD_CtlError>
                break;
 80088be:	e091      	b.n	80089e4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	da0b      	bge.n	80088e0 <USBD_StdEPReq+0x1a0>
 80088c8:	7bbb      	ldrb	r3, [r7, #14]
 80088ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	3310      	adds	r3, #16
 80088d8:	687a      	ldr	r2, [r7, #4]
 80088da:	4413      	add	r3, r2
 80088dc:	3304      	adds	r3, #4
 80088de:	e00b      	b.n	80088f8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80088e0:	7bbb      	ldrb	r3, [r7, #14]
 80088e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80088e6:	4613      	mov	r3, r2
 80088e8:	009b      	lsls	r3, r3, #2
 80088ea:	4413      	add	r3, r2
 80088ec:	009b      	lsls	r3, r3, #2
 80088ee:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80088f2:	687a      	ldr	r2, [r7, #4]
 80088f4:	4413      	add	r3, r2
 80088f6:	3304      	adds	r3, #4
 80088f8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	2202      	movs	r2, #2
 8008904:	4619      	mov	r1, r3
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fbfb 	bl	8009102 <USBD_CtlSendData>
              break;
 800890c:	e06a      	b.n	80089e4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800890e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008912:	2b00      	cmp	r3, #0
 8008914:	da11      	bge.n	800893a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008916:	7bbb      	ldrb	r3, [r7, #14]
 8008918:	f003 020f 	and.w	r2, r3, #15
 800891c:	6879      	ldr	r1, [r7, #4]
 800891e:	4613      	mov	r3, r2
 8008920:	009b      	lsls	r3, r3, #2
 8008922:	4413      	add	r3, r2
 8008924:	009b      	lsls	r3, r3, #2
 8008926:	440b      	add	r3, r1
 8008928:	3318      	adds	r3, #24
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d117      	bne.n	8008960 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008930:	6839      	ldr	r1, [r7, #0]
 8008932:	6878      	ldr	r0, [r7, #4]
 8008934:	f000 fb7b 	bl	800902e <USBD_CtlError>
                  break;
 8008938:	e054      	b.n	80089e4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800893a:	7bbb      	ldrb	r3, [r7, #14]
 800893c:	f003 020f 	and.w	r2, r3, #15
 8008940:	6879      	ldr	r1, [r7, #4]
 8008942:	4613      	mov	r3, r2
 8008944:	009b      	lsls	r3, r3, #2
 8008946:	4413      	add	r3, r2
 8008948:	009b      	lsls	r3, r3, #2
 800894a:	440b      	add	r3, r1
 800894c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d104      	bne.n	8008960 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8008956:	6839      	ldr	r1, [r7, #0]
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 fb68 	bl	800902e <USBD_CtlError>
                  break;
 800895e:	e041      	b.n	80089e4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008960:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008964:	2b00      	cmp	r3, #0
 8008966:	da0b      	bge.n	8008980 <USBD_StdEPReq+0x240>
 8008968:	7bbb      	ldrb	r3, [r7, #14]
 800896a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800896e:	4613      	mov	r3, r2
 8008970:	009b      	lsls	r3, r3, #2
 8008972:	4413      	add	r3, r2
 8008974:	009b      	lsls	r3, r3, #2
 8008976:	3310      	adds	r3, #16
 8008978:	687a      	ldr	r2, [r7, #4]
 800897a:	4413      	add	r3, r2
 800897c:	3304      	adds	r3, #4
 800897e:	e00b      	b.n	8008998 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008980:	7bbb      	ldrb	r3, [r7, #14]
 8008982:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008986:	4613      	mov	r3, r2
 8008988:	009b      	lsls	r3, r3, #2
 800898a:	4413      	add	r3, r2
 800898c:	009b      	lsls	r3, r3, #2
 800898e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008992:	687a      	ldr	r2, [r7, #4]
 8008994:	4413      	add	r3, r2
 8008996:	3304      	adds	r3, #4
 8008998:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800899a:	7bbb      	ldrb	r3, [r7, #14]
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <USBD_StdEPReq+0x266>
 80089a0:	7bbb      	ldrb	r3, [r7, #14]
 80089a2:	2b80      	cmp	r3, #128	; 0x80
 80089a4:	d103      	bne.n	80089ae <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 80089a6:	68bb      	ldr	r3, [r7, #8]
 80089a8:	2200      	movs	r2, #0
 80089aa:	601a      	str	r2, [r3, #0]
 80089ac:	e00e      	b.n	80089cc <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 80089ae:	7bbb      	ldrb	r3, [r7, #14]
 80089b0:	4619      	mov	r1, r3
 80089b2:	6878      	ldr	r0, [r7, #4]
 80089b4:	f000 ffeb 	bl	800998e <USBD_LL_IsStallEP>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d003      	beq.n	80089c6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 80089be:	68bb      	ldr	r3, [r7, #8]
 80089c0:	2201      	movs	r2, #1
 80089c2:	601a      	str	r2, [r3, #0]
 80089c4:	e002      	b.n	80089cc <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80089c6:	68bb      	ldr	r3, [r7, #8]
 80089c8:	2200      	movs	r2, #0
 80089ca:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80089cc:	68bb      	ldr	r3, [r7, #8]
 80089ce:	2202      	movs	r2, #2
 80089d0:	4619      	mov	r1, r3
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fb95 	bl	8009102 <USBD_CtlSendData>
              break;
 80089d8:	e004      	b.n	80089e4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80089da:	6839      	ldr	r1, [r7, #0]
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fb26 	bl	800902e <USBD_CtlError>
              break;
 80089e2:	bf00      	nop
          }
          break;
 80089e4:	e004      	b.n	80089f0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80089e6:	6839      	ldr	r1, [r7, #0]
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fb20 	bl	800902e <USBD_CtlError>
          break;
 80089ee:	bf00      	nop
      }
      break;
 80089f0:	e004      	b.n	80089fc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80089f2:	6839      	ldr	r1, [r7, #0]
 80089f4:	6878      	ldr	r0, [r7, #4]
 80089f6:	f000 fb1a 	bl	800902e <USBD_CtlError>
      break;
 80089fa:	bf00      	nop
  }

  return ret;
 80089fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80089fe:	4618      	mov	r0, r3
 8008a00:	3710      	adds	r7, #16
 8008a02:	46bd      	mov	sp, r7
 8008a04:	bd80      	pop	{r7, pc}
	...

08008a08 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008a12:	2300      	movs	r3, #0
 8008a14:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008a16:	2300      	movs	r3, #0
 8008a18:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8008a1a:	2300      	movs	r3, #0
 8008a1c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	885b      	ldrh	r3, [r3, #2]
 8008a22:	0a1b      	lsrs	r3, r3, #8
 8008a24:	b29b      	uxth	r3, r3
 8008a26:	3b01      	subs	r3, #1
 8008a28:	2b06      	cmp	r3, #6
 8008a2a:	f200 8128 	bhi.w	8008c7e <USBD_GetDescriptor+0x276>
 8008a2e:	a201      	add	r2, pc, #4	; (adr r2, 8008a34 <USBD_GetDescriptor+0x2c>)
 8008a30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a34:	08008a51 	.word	0x08008a51
 8008a38:	08008a69 	.word	0x08008a69
 8008a3c:	08008aa9 	.word	0x08008aa9
 8008a40:	08008c7f 	.word	0x08008c7f
 8008a44:	08008c7f 	.word	0x08008c7f
 8008a48:	08008c1f 	.word	0x08008c1f
 8008a4c:	08008c4b 	.word	0x08008c4b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	7c12      	ldrb	r2, [r2, #16]
 8008a5c:	f107 0108 	add.w	r1, r7, #8
 8008a60:	4610      	mov	r0, r2
 8008a62:	4798      	blx	r3
 8008a64:	60f8      	str	r0, [r7, #12]
      break;
 8008a66:	e112      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	7c1b      	ldrb	r3, [r3, #16]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d10d      	bne.n	8008a8c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a78:	f107 0208 	add.w	r2, r7, #8
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	4798      	blx	r3
 8008a80:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	3301      	adds	r3, #1
 8008a86:	2202      	movs	r2, #2
 8008a88:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8008a8a:	e100      	b.n	8008c8e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a94:	f107 0208 	add.w	r2, r7, #8
 8008a98:	4610      	mov	r0, r2
 8008a9a:	4798      	blx	r3
 8008a9c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	3301      	adds	r3, #1
 8008aa2:	2202      	movs	r2, #2
 8008aa4:	701a      	strb	r2, [r3, #0]
      break;
 8008aa6:	e0f2      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008aa8:	683b      	ldr	r3, [r7, #0]
 8008aaa:	885b      	ldrh	r3, [r3, #2]
 8008aac:	b2db      	uxtb	r3, r3
 8008aae:	2b05      	cmp	r3, #5
 8008ab0:	f200 80ac 	bhi.w	8008c0c <USBD_GetDescriptor+0x204>
 8008ab4:	a201      	add	r2, pc, #4	; (adr r2, 8008abc <USBD_GetDescriptor+0xb4>)
 8008ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008aba:	bf00      	nop
 8008abc:	08008ad5 	.word	0x08008ad5
 8008ac0:	08008b09 	.word	0x08008b09
 8008ac4:	08008b3d 	.word	0x08008b3d
 8008ac8:	08008b71 	.word	0x08008b71
 8008acc:	08008ba5 	.word	0x08008ba5
 8008ad0:	08008bd9 	.word	0x08008bd9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	d00b      	beq.n	8008af8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008ae6:	685b      	ldr	r3, [r3, #4]
 8008ae8:	687a      	ldr	r2, [r7, #4]
 8008aea:	7c12      	ldrb	r2, [r2, #16]
 8008aec:	f107 0108 	add.w	r1, r7, #8
 8008af0:	4610      	mov	r0, r2
 8008af2:	4798      	blx	r3
 8008af4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008af6:	e091      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008af8:	6839      	ldr	r1, [r7, #0]
 8008afa:	6878      	ldr	r0, [r7, #4]
 8008afc:	f000 fa97 	bl	800902e <USBD_CtlError>
            err++;
 8008b00:	7afb      	ldrb	r3, [r7, #11]
 8008b02:	3301      	adds	r3, #1
 8008b04:	72fb      	strb	r3, [r7, #11]
          break;
 8008b06:	e089      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b0e:	689b      	ldr	r3, [r3, #8]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d00b      	beq.n	8008b2c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	687a      	ldr	r2, [r7, #4]
 8008b1e:	7c12      	ldrb	r2, [r2, #16]
 8008b20:	f107 0108 	add.w	r1, r7, #8
 8008b24:	4610      	mov	r0, r2
 8008b26:	4798      	blx	r3
 8008b28:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b2a:	e077      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b2c:	6839      	ldr	r1, [r7, #0]
 8008b2e:	6878      	ldr	r0, [r7, #4]
 8008b30:	f000 fa7d 	bl	800902e <USBD_CtlError>
            err++;
 8008b34:	7afb      	ldrb	r3, [r7, #11]
 8008b36:	3301      	adds	r3, #1
 8008b38:	72fb      	strb	r3, [r7, #11]
          break;
 8008b3a:	e06f      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b42:	68db      	ldr	r3, [r3, #12]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	d00b      	beq.n	8008b60 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b4e:	68db      	ldr	r3, [r3, #12]
 8008b50:	687a      	ldr	r2, [r7, #4]
 8008b52:	7c12      	ldrb	r2, [r2, #16]
 8008b54:	f107 0108 	add.w	r1, r7, #8
 8008b58:	4610      	mov	r0, r2
 8008b5a:	4798      	blx	r3
 8008b5c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b5e:	e05d      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b60:	6839      	ldr	r1, [r7, #0]
 8008b62:	6878      	ldr	r0, [r7, #4]
 8008b64:	f000 fa63 	bl	800902e <USBD_CtlError>
            err++;
 8008b68:	7afb      	ldrb	r3, [r7, #11]
 8008b6a:	3301      	adds	r3, #1
 8008b6c:	72fb      	strb	r3, [r7, #11]
          break;
 8008b6e:	e055      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b76:	691b      	ldr	r3, [r3, #16]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d00b      	beq.n	8008b94 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008b82:	691b      	ldr	r3, [r3, #16]
 8008b84:	687a      	ldr	r2, [r7, #4]
 8008b86:	7c12      	ldrb	r2, [r2, #16]
 8008b88:	f107 0108 	add.w	r1, r7, #8
 8008b8c:	4610      	mov	r0, r2
 8008b8e:	4798      	blx	r3
 8008b90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008b92:	e043      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008b94:	6839      	ldr	r1, [r7, #0]
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 fa49 	bl	800902e <USBD_CtlError>
            err++;
 8008b9c:	7afb      	ldrb	r3, [r7, #11]
 8008b9e:	3301      	adds	r3, #1
 8008ba0:	72fb      	strb	r3, [r7, #11]
          break;
 8008ba2:	e03b      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008baa:	695b      	ldr	r3, [r3, #20]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d00b      	beq.n	8008bc8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bb6:	695b      	ldr	r3, [r3, #20]
 8008bb8:	687a      	ldr	r2, [r7, #4]
 8008bba:	7c12      	ldrb	r2, [r2, #16]
 8008bbc:	f107 0108 	add.w	r1, r7, #8
 8008bc0:	4610      	mov	r0, r2
 8008bc2:	4798      	blx	r3
 8008bc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bc6:	e029      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bc8:	6839      	ldr	r1, [r7, #0]
 8008bca:	6878      	ldr	r0, [r7, #4]
 8008bcc:	f000 fa2f 	bl	800902e <USBD_CtlError>
            err++;
 8008bd0:	7afb      	ldrb	r3, [r7, #11]
 8008bd2:	3301      	adds	r3, #1
 8008bd4:	72fb      	strb	r3, [r7, #11]
          break;
 8008bd6:	e021      	b.n	8008c1c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bde:	699b      	ldr	r3, [r3, #24]
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d00b      	beq.n	8008bfc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008bea:	699b      	ldr	r3, [r3, #24]
 8008bec:	687a      	ldr	r2, [r7, #4]
 8008bee:	7c12      	ldrb	r2, [r2, #16]
 8008bf0:	f107 0108 	add.w	r1, r7, #8
 8008bf4:	4610      	mov	r0, r2
 8008bf6:	4798      	blx	r3
 8008bf8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008bfa:	e00f      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008bfc:	6839      	ldr	r1, [r7, #0]
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa15 	bl	800902e <USBD_CtlError>
            err++;
 8008c04:	7afb      	ldrb	r3, [r7, #11]
 8008c06:	3301      	adds	r3, #1
 8008c08:	72fb      	strb	r3, [r7, #11]
          break;
 8008c0a:	e007      	b.n	8008c1c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008c0c:	6839      	ldr	r1, [r7, #0]
 8008c0e:	6878      	ldr	r0, [r7, #4]
 8008c10:	f000 fa0d 	bl	800902e <USBD_CtlError>
          err++;
 8008c14:	7afb      	ldrb	r3, [r7, #11]
 8008c16:	3301      	adds	r3, #1
 8008c18:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 8008c1a:	e038      	b.n	8008c8e <USBD_GetDescriptor+0x286>
 8008c1c:	e037      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7c1b      	ldrb	r3, [r3, #16]
 8008c22:	2b00      	cmp	r3, #0
 8008c24:	d109      	bne.n	8008c3a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c2e:	f107 0208 	add.w	r2, r7, #8
 8008c32:	4610      	mov	r0, r2
 8008c34:	4798      	blx	r3
 8008c36:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c38:	e029      	b.n	8008c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f9f6 	bl	800902e <USBD_CtlError>
        err++;
 8008c42:	7afb      	ldrb	r3, [r7, #11]
 8008c44:	3301      	adds	r3, #1
 8008c46:	72fb      	strb	r3, [r7, #11]
      break;
 8008c48:	e021      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	7c1b      	ldrb	r3, [r3, #16]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d10d      	bne.n	8008c6e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008c5a:	f107 0208 	add.w	r2, r7, #8
 8008c5e:	4610      	mov	r0, r2
 8008c60:	4798      	blx	r3
 8008c62:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	3301      	adds	r3, #1
 8008c68:	2207      	movs	r2, #7
 8008c6a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008c6c:	e00f      	b.n	8008c8e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008c6e:	6839      	ldr	r1, [r7, #0]
 8008c70:	6878      	ldr	r0, [r7, #4]
 8008c72:	f000 f9dc 	bl	800902e <USBD_CtlError>
        err++;
 8008c76:	7afb      	ldrb	r3, [r7, #11]
 8008c78:	3301      	adds	r3, #1
 8008c7a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c7c:	e007      	b.n	8008c8e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008c7e:	6839      	ldr	r1, [r7, #0]
 8008c80:	6878      	ldr	r0, [r7, #4]
 8008c82:	f000 f9d4 	bl	800902e <USBD_CtlError>
      err++;
 8008c86:	7afb      	ldrb	r3, [r7, #11]
 8008c88:	3301      	adds	r3, #1
 8008c8a:	72fb      	strb	r3, [r7, #11]
      break;
 8008c8c:	bf00      	nop
  }

  if (err != 0U)
 8008c8e:	7afb      	ldrb	r3, [r7, #11]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d11c      	bne.n	8008cce <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008c94:	893b      	ldrh	r3, [r7, #8]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d011      	beq.n	8008cbe <USBD_GetDescriptor+0x2b6>
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	88db      	ldrh	r3, [r3, #6]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d00d      	beq.n	8008cbe <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8008ca2:	683b      	ldr	r3, [r7, #0]
 8008ca4:	88da      	ldrh	r2, [r3, #6]
 8008ca6:	893b      	ldrh	r3, [r7, #8]
 8008ca8:	4293      	cmp	r3, r2
 8008caa:	bf28      	it	cs
 8008cac:	4613      	movcs	r3, r2
 8008cae:	b29b      	uxth	r3, r3
 8008cb0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008cb2:	893b      	ldrh	r3, [r7, #8]
 8008cb4:	461a      	mov	r2, r3
 8008cb6:	68f9      	ldr	r1, [r7, #12]
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 fa22 	bl	8009102 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8008cbe:	683b      	ldr	r3, [r7, #0]
 8008cc0:	88db      	ldrh	r3, [r3, #6]
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d104      	bne.n	8008cd0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 8008cc6:	6878      	ldr	r0, [r7, #4]
 8008cc8:	f000 fa5b 	bl	8009182 <USBD_CtlSendStatus>
 8008ccc:	e000      	b.n	8008cd0 <USBD_GetDescriptor+0x2c8>
    return;
 8008cce:	bf00      	nop
    }
  }
}
 8008cd0:	3710      	adds	r7, #16
 8008cd2:	46bd      	mov	sp, r7
 8008cd4:	bd80      	pop	{r7, pc}
 8008cd6:	bf00      	nop

08008cd8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008cd8:	b580      	push	{r7, lr}
 8008cda:	b084      	sub	sp, #16
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
 8008ce0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008ce2:	683b      	ldr	r3, [r7, #0]
 8008ce4:	889b      	ldrh	r3, [r3, #4]
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d130      	bne.n	8008d4c <USBD_SetAddress+0x74>
 8008cea:	683b      	ldr	r3, [r7, #0]
 8008cec:	88db      	ldrh	r3, [r3, #6]
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d12c      	bne.n	8008d4c <USBD_SetAddress+0x74>
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	885b      	ldrh	r3, [r3, #2]
 8008cf6:	2b7f      	cmp	r3, #127	; 0x7f
 8008cf8:	d828      	bhi.n	8008d4c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008cfa:	683b      	ldr	r3, [r7, #0]
 8008cfc:	885b      	ldrh	r3, [r3, #2]
 8008cfe:	b2db      	uxtb	r3, r3
 8008d00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d04:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d0c:	2b03      	cmp	r3, #3
 8008d0e:	d104      	bne.n	8008d1a <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008d10:	6839      	ldr	r1, [r7, #0]
 8008d12:	6878      	ldr	r0, [r7, #4]
 8008d14:	f000 f98b 	bl	800902e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d18:	e01d      	b.n	8008d56 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	7bfa      	ldrb	r2, [r7, #15]
 8008d1e:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
 8008d24:	4619      	mov	r1, r3
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f000 fe5d 	bl	80099e6 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008d2c:	6878      	ldr	r0, [r7, #4]
 8008d2e:	f000 fa28 	bl	8009182 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008d32:	7bfb      	ldrb	r3, [r7, #15]
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d004      	beq.n	8008d42 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2202      	movs	r2, #2
 8008d3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d40:	e009      	b.n	8008d56 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2201      	movs	r2, #1
 8008d46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d4a:	e004      	b.n	8008d56 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008d4c:	6839      	ldr	r1, [r7, #0]
 8008d4e:	6878      	ldr	r0, [r7, #4]
 8008d50:	f000 f96d 	bl	800902e <USBD_CtlError>
  }
}
 8008d54:	bf00      	nop
 8008d56:	bf00      	nop
 8008d58:	3710      	adds	r7, #16
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	bd80      	pop	{r7, pc}
	...

08008d60 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
 8008d68:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	885b      	ldrh	r3, [r3, #2]
 8008d6e:	b2da      	uxtb	r2, r3
 8008d70:	4b41      	ldr	r3, [pc, #260]	; (8008e78 <USBD_SetConfig+0x118>)
 8008d72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008d74:	4b40      	ldr	r3, [pc, #256]	; (8008e78 <USBD_SetConfig+0x118>)
 8008d76:	781b      	ldrb	r3, [r3, #0]
 8008d78:	2b01      	cmp	r3, #1
 8008d7a:	d904      	bls.n	8008d86 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008d7c:	6839      	ldr	r1, [r7, #0]
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f955 	bl	800902e <USBD_CtlError>
 8008d84:	e075      	b.n	8008e72 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d8c:	2b02      	cmp	r3, #2
 8008d8e:	d002      	beq.n	8008d96 <USBD_SetConfig+0x36>
 8008d90:	2b03      	cmp	r3, #3
 8008d92:	d023      	beq.n	8008ddc <USBD_SetConfig+0x7c>
 8008d94:	e062      	b.n	8008e5c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8008d96:	4b38      	ldr	r3, [pc, #224]	; (8008e78 <USBD_SetConfig+0x118>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d01a      	beq.n	8008dd4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 8008d9e:	4b36      	ldr	r3, [pc, #216]	; (8008e78 <USBD_SetConfig+0x118>)
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	461a      	mov	r2, r3
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2203      	movs	r2, #3
 8008dac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008db0:	4b31      	ldr	r3, [pc, #196]	; (8008e78 <USBD_SetConfig+0x118>)
 8008db2:	781b      	ldrb	r3, [r3, #0]
 8008db4:	4619      	mov	r1, r3
 8008db6:	6878      	ldr	r0, [r7, #4]
 8008db8:	f7ff f9e8 	bl	800818c <USBD_SetClassConfig>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b02      	cmp	r3, #2
 8008dc0:	d104      	bne.n	8008dcc <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	f000 f932 	bl	800902e <USBD_CtlError>
            return;
 8008dca:	e052      	b.n	8008e72 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 8008dcc:	6878      	ldr	r0, [r7, #4]
 8008dce:	f000 f9d8 	bl	8009182 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008dd2:	e04e      	b.n	8008e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008dd4:	6878      	ldr	r0, [r7, #4]
 8008dd6:	f000 f9d4 	bl	8009182 <USBD_CtlSendStatus>
        break;
 8008dda:	e04a      	b.n	8008e72 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8008ddc:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <USBD_SetConfig+0x118>)
 8008dde:	781b      	ldrb	r3, [r3, #0]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d112      	bne.n	8008e0a <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2202      	movs	r2, #2
 8008de8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 8008dec:	4b22      	ldr	r3, [pc, #136]	; (8008e78 <USBD_SetConfig+0x118>)
 8008dee:	781b      	ldrb	r3, [r3, #0]
 8008df0:	461a      	mov	r2, r3
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8008df6:	4b20      	ldr	r3, [pc, #128]	; (8008e78 <USBD_SetConfig+0x118>)
 8008df8:	781b      	ldrb	r3, [r3, #0]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	6878      	ldr	r0, [r7, #4]
 8008dfe:	f7ff f9e4 	bl	80081ca <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008e02:	6878      	ldr	r0, [r7, #4]
 8008e04:	f000 f9bd 	bl	8009182 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8008e08:	e033      	b.n	8008e72 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 8008e0a:	4b1b      	ldr	r3, [pc, #108]	; (8008e78 <USBD_SetConfig+0x118>)
 8008e0c:	781b      	ldrb	r3, [r3, #0]
 8008e0e:	461a      	mov	r2, r3
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d01d      	beq.n	8008e54 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	685b      	ldr	r3, [r3, #4]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	4619      	mov	r1, r3
 8008e20:	6878      	ldr	r0, [r7, #4]
 8008e22:	f7ff f9d2 	bl	80081ca <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8008e26:	4b14      	ldr	r3, [pc, #80]	; (8008e78 <USBD_SetConfig+0x118>)
 8008e28:	781b      	ldrb	r3, [r3, #0]
 8008e2a:	461a      	mov	r2, r3
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008e30:	4b11      	ldr	r3, [pc, #68]	; (8008e78 <USBD_SetConfig+0x118>)
 8008e32:	781b      	ldrb	r3, [r3, #0]
 8008e34:	4619      	mov	r1, r3
 8008e36:	6878      	ldr	r0, [r7, #4]
 8008e38:	f7ff f9a8 	bl	800818c <USBD_SetClassConfig>
 8008e3c:	4603      	mov	r3, r0
 8008e3e:	2b02      	cmp	r3, #2
 8008e40:	d104      	bne.n	8008e4c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008e42:	6839      	ldr	r1, [r7, #0]
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f000 f8f2 	bl	800902e <USBD_CtlError>
            return;
 8008e4a:	e012      	b.n	8008e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e4c:	6878      	ldr	r0, [r7, #4]
 8008e4e:	f000 f998 	bl	8009182 <USBD_CtlSendStatus>
        break;
 8008e52:	e00e      	b.n	8008e72 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 f994 	bl	8009182 <USBD_CtlSendStatus>
        break;
 8008e5a:	e00a      	b.n	8008e72 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008e5c:	6839      	ldr	r1, [r7, #0]
 8008e5e:	6878      	ldr	r0, [r7, #4]
 8008e60:	f000 f8e5 	bl	800902e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008e64:	4b04      	ldr	r3, [pc, #16]	; (8008e78 <USBD_SetConfig+0x118>)
 8008e66:	781b      	ldrb	r3, [r3, #0]
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff f9ad 	bl	80081ca <USBD_ClrClassConfig>
        break;
 8008e70:	bf00      	nop
    }
  }
}
 8008e72:	3708      	adds	r7, #8
 8008e74:	46bd      	mov	sp, r7
 8008e76:	bd80      	pop	{r7, pc}
 8008e78:	20000280 	.word	0x20000280

08008e7c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b082      	sub	sp, #8
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008e86:	683b      	ldr	r3, [r7, #0]
 8008e88:	88db      	ldrh	r3, [r3, #6]
 8008e8a:	2b01      	cmp	r3, #1
 8008e8c:	d004      	beq.n	8008e98 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008e8e:	6839      	ldr	r1, [r7, #0]
 8008e90:	6878      	ldr	r0, [r7, #4]
 8008e92:	f000 f8cc 	bl	800902e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008e96:	e022      	b.n	8008ede <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e9e:	2b02      	cmp	r3, #2
 8008ea0:	dc02      	bgt.n	8008ea8 <USBD_GetConfig+0x2c>
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	dc03      	bgt.n	8008eae <USBD_GetConfig+0x32>
 8008ea6:	e015      	b.n	8008ed4 <USBD_GetConfig+0x58>
 8008ea8:	2b03      	cmp	r3, #3
 8008eaa:	d00b      	beq.n	8008ec4 <USBD_GetConfig+0x48>
 8008eac:	e012      	b.n	8008ed4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	3308      	adds	r3, #8
 8008eb8:	2201      	movs	r2, #1
 8008eba:	4619      	mov	r1, r3
 8008ebc:	6878      	ldr	r0, [r7, #4]
 8008ebe:	f000 f920 	bl	8009102 <USBD_CtlSendData>
        break;
 8008ec2:	e00c      	b.n	8008ede <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	3304      	adds	r3, #4
 8008ec8:	2201      	movs	r2, #1
 8008eca:	4619      	mov	r1, r3
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	f000 f918 	bl	8009102 <USBD_CtlSendData>
        break;
 8008ed2:	e004      	b.n	8008ede <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 8008ed4:	6839      	ldr	r1, [r7, #0]
 8008ed6:	6878      	ldr	r0, [r7, #4]
 8008ed8:	f000 f8a9 	bl	800902e <USBD_CtlError>
        break;
 8008edc:	bf00      	nop
}
 8008ede:	bf00      	nop
 8008ee0:	3708      	adds	r7, #8
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	bd80      	pop	{r7, pc}

08008ee6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ee6:	b580      	push	{r7, lr}
 8008ee8:	b082      	sub	sp, #8
 8008eea:	af00      	add	r7, sp, #0
 8008eec:	6078      	str	r0, [r7, #4]
 8008eee:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	2b02      	cmp	r3, #2
 8008efa:	d81e      	bhi.n	8008f3a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008efc:	683b      	ldr	r3, [r7, #0]
 8008efe:	88db      	ldrh	r3, [r3, #6]
 8008f00:	2b02      	cmp	r3, #2
 8008f02:	d004      	beq.n	8008f0e <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008f04:	6839      	ldr	r1, [r7, #0]
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f891 	bl	800902e <USBD_CtlError>
        break;
 8008f0c:	e01a      	b.n	8008f44 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	2201      	movs	r2, #1
 8008f12:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008f1a:	2b00      	cmp	r3, #0
 8008f1c:	d005      	beq.n	8008f2a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68db      	ldr	r3, [r3, #12]
 8008f22:	f043 0202 	orr.w	r2, r3, #2
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	330c      	adds	r3, #12
 8008f2e:	2202      	movs	r2, #2
 8008f30:	4619      	mov	r1, r3
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f000 f8e5 	bl	8009102 <USBD_CtlSendData>
      break;
 8008f38:	e004      	b.n	8008f44 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 8008f3a:	6839      	ldr	r1, [r7, #0]
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 f876 	bl	800902e <USBD_CtlError>
      break;
 8008f42:	bf00      	nop
  }
}
 8008f44:	bf00      	nop
 8008f46:	3708      	adds	r7, #8
 8008f48:	46bd      	mov	sp, r7
 8008f4a:	bd80      	pop	{r7, pc}

08008f4c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f4c:	b580      	push	{r7, lr}
 8008f4e:	b082      	sub	sp, #8
 8008f50:	af00      	add	r7, sp, #0
 8008f52:	6078      	str	r0, [r7, #4]
 8008f54:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f56:	683b      	ldr	r3, [r7, #0]
 8008f58:	885b      	ldrh	r3, [r3, #2]
 8008f5a:	2b01      	cmp	r3, #1
 8008f5c:	d106      	bne.n	8008f6c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2201      	movs	r2, #1
 8008f62:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8008f66:	6878      	ldr	r0, [r7, #4]
 8008f68:	f000 f90b 	bl	8009182 <USBD_CtlSendStatus>
  }
}
 8008f6c:	bf00      	nop
 8008f6e:	3708      	adds	r7, #8
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}

08008f74 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008f74:	b580      	push	{r7, lr}
 8008f76:	b082      	sub	sp, #8
 8008f78:	af00      	add	r7, sp, #0
 8008f7a:	6078      	str	r0, [r7, #4]
 8008f7c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f84:	3b01      	subs	r3, #1
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d80b      	bhi.n	8008fa2 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008f8a:	683b      	ldr	r3, [r7, #0]
 8008f8c:	885b      	ldrh	r3, [r3, #2]
 8008f8e:	2b01      	cmp	r3, #1
 8008f90:	d10c      	bne.n	8008fac <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	2200      	movs	r2, #0
 8008f96:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 8008f9a:	6878      	ldr	r0, [r7, #4]
 8008f9c:	f000 f8f1 	bl	8009182 <USBD_CtlSendStatus>
      }
      break;
 8008fa0:	e004      	b.n	8008fac <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8008fa2:	6839      	ldr	r1, [r7, #0]
 8008fa4:	6878      	ldr	r0, [r7, #4]
 8008fa6:	f000 f842 	bl	800902e <USBD_CtlError>
      break;
 8008faa:	e000      	b.n	8008fae <USBD_ClrFeature+0x3a>
      break;
 8008fac:	bf00      	nop
  }
}
 8008fae:	bf00      	nop
 8008fb0:	3708      	adds	r7, #8
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}

08008fb6 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008fb6:	b480      	push	{r7}
 8008fb8:	b083      	sub	sp, #12
 8008fba:	af00      	add	r7, sp, #0
 8008fbc:	6078      	str	r0, [r7, #4]
 8008fbe:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8008fc0:	683b      	ldr	r3, [r7, #0]
 8008fc2:	781a      	ldrb	r2, [r3, #0]
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8008fc8:	683b      	ldr	r3, [r7, #0]
 8008fca:	785a      	ldrb	r2, [r3, #1]
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	3302      	adds	r3, #2
 8008fd4:	781b      	ldrb	r3, [r3, #0]
 8008fd6:	b29a      	uxth	r2, r3
 8008fd8:	683b      	ldr	r3, [r7, #0]
 8008fda:	3303      	adds	r3, #3
 8008fdc:	781b      	ldrb	r3, [r3, #0]
 8008fde:	b29b      	uxth	r3, r3
 8008fe0:	021b      	lsls	r3, r3, #8
 8008fe2:	b29b      	uxth	r3, r3
 8008fe4:	4413      	add	r3, r2
 8008fe6:	b29a      	uxth	r2, r3
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	3304      	adds	r3, #4
 8008ff0:	781b      	ldrb	r3, [r3, #0]
 8008ff2:	b29a      	uxth	r2, r3
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	3305      	adds	r3, #5
 8008ff8:	781b      	ldrb	r3, [r3, #0]
 8008ffa:	b29b      	uxth	r3, r3
 8008ffc:	021b      	lsls	r3, r3, #8
 8008ffe:	b29b      	uxth	r3, r3
 8009000:	4413      	add	r3, r2
 8009002:	b29a      	uxth	r2, r3
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	3306      	adds	r3, #6
 800900c:	781b      	ldrb	r3, [r3, #0]
 800900e:	b29a      	uxth	r2, r3
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	3307      	adds	r3, #7
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	b29b      	uxth	r3, r3
 8009018:	021b      	lsls	r3, r3, #8
 800901a:	b29b      	uxth	r3, r3
 800901c:	4413      	add	r3, r2
 800901e:	b29a      	uxth	r2, r3
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	80da      	strh	r2, [r3, #6]

}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	bc80      	pop	{r7}
 800902c:	4770      	bx	lr

0800902e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b082      	sub	sp, #8
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8009038:	2180      	movs	r1, #128	; 0x80
 800903a:	6878      	ldr	r0, [r7, #4]
 800903c:	f000 fc69 	bl	8009912 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8009040:	2100      	movs	r1, #0
 8009042:	6878      	ldr	r0, [r7, #4]
 8009044:	f000 fc65 	bl	8009912 <USBD_LL_StallEP>
}
 8009048:	bf00      	nop
 800904a:	3708      	adds	r7, #8
 800904c:	46bd      	mov	sp, r7
 800904e:	bd80      	pop	{r7, pc}

08009050 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
 8009056:	60f8      	str	r0, [r7, #12]
 8009058:	60b9      	str	r1, [r7, #8]
 800905a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800905c:	2300      	movs	r3, #0
 800905e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	2b00      	cmp	r3, #0
 8009064:	d032      	beq.n	80090cc <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8009066:	68f8      	ldr	r0, [r7, #12]
 8009068:	f000 f834 	bl	80090d4 <USBD_GetLen>
 800906c:	4603      	mov	r3, r0
 800906e:	3301      	adds	r3, #1
 8009070:	b29b      	uxth	r3, r3
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	b29a      	uxth	r2, r3
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800907a:	7dfb      	ldrb	r3, [r7, #23]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	75fa      	strb	r2, [r7, #23]
 8009080:	461a      	mov	r2, r3
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	4413      	add	r3, r2
 8009086:	687a      	ldr	r2, [r7, #4]
 8009088:	7812      	ldrb	r2, [r2, #0]
 800908a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800908c:	7dfb      	ldrb	r3, [r7, #23]
 800908e:	1c5a      	adds	r2, r3, #1
 8009090:	75fa      	strb	r2, [r7, #23]
 8009092:	461a      	mov	r2, r3
 8009094:	68bb      	ldr	r3, [r7, #8]
 8009096:	4413      	add	r3, r2
 8009098:	2203      	movs	r2, #3
 800909a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800909c:	e012      	b.n	80090c4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	1c5a      	adds	r2, r3, #1
 80090a2:	60fa      	str	r2, [r7, #12]
 80090a4:	7dfa      	ldrb	r2, [r7, #23]
 80090a6:	1c51      	adds	r1, r2, #1
 80090a8:	75f9      	strb	r1, [r7, #23]
 80090aa:	4611      	mov	r1, r2
 80090ac:	68ba      	ldr	r2, [r7, #8]
 80090ae:	440a      	add	r2, r1
 80090b0:	781b      	ldrb	r3, [r3, #0]
 80090b2:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80090b4:	7dfb      	ldrb	r3, [r7, #23]
 80090b6:	1c5a      	adds	r2, r3, #1
 80090b8:	75fa      	strb	r2, [r7, #23]
 80090ba:	461a      	mov	r2, r3
 80090bc:	68bb      	ldr	r3, [r7, #8]
 80090be:	4413      	add	r3, r2
 80090c0:	2200      	movs	r2, #0
 80090c2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	781b      	ldrb	r3, [r3, #0]
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d1e8      	bne.n	800909e <USBD_GetString+0x4e>
    }
  }
}
 80090cc:	bf00      	nop
 80090ce:	3718      	adds	r7, #24
 80090d0:	46bd      	mov	sp, r7
 80090d2:	bd80      	pop	{r7, pc}

080090d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80090d4:	b480      	push	{r7}
 80090d6:	b085      	sub	sp, #20
 80090d8:	af00      	add	r7, sp, #0
 80090da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80090dc:	2300      	movs	r3, #0
 80090de:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80090e0:	e005      	b.n	80090ee <USBD_GetLen+0x1a>
  {
    len++;
 80090e2:	7bfb      	ldrb	r3, [r7, #15]
 80090e4:	3301      	adds	r3, #1
 80090e6:	73fb      	strb	r3, [r7, #15]
    buf++;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	3301      	adds	r3, #1
 80090ec:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d1f5      	bne.n	80090e2 <USBD_GetLen+0xe>
  }

  return len;
 80090f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3714      	adds	r7, #20
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bc80      	pop	{r7}
 8009100:	4770      	bx	lr

08009102 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8009102:	b580      	push	{r7, lr}
 8009104:	b084      	sub	sp, #16
 8009106:	af00      	add	r7, sp, #0
 8009108:	60f8      	str	r0, [r7, #12]
 800910a:	60b9      	str	r1, [r7, #8]
 800910c:	4613      	mov	r3, r2
 800910e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	2202      	movs	r2, #2
 8009114:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009118:	88fa      	ldrh	r2, [r7, #6]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800911e:	88fa      	ldrh	r2, [r7, #6]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009124:	88fb      	ldrh	r3, [r7, #6]
 8009126:	68ba      	ldr	r2, [r7, #8]
 8009128:	2100      	movs	r1, #0
 800912a:	68f8      	ldr	r0, [r7, #12]
 800912c:	f000 fc7a 	bl	8009a24 <USBD_LL_Transmit>

  return USBD_OK;
 8009130:	2300      	movs	r3, #0
}
 8009132:	4618      	mov	r0, r3
 8009134:	3710      	adds	r7, #16
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800913a:	b580      	push	{r7, lr}
 800913c:	b084      	sub	sp, #16
 800913e:	af00      	add	r7, sp, #0
 8009140:	60f8      	str	r0, [r7, #12]
 8009142:	60b9      	str	r1, [r7, #8]
 8009144:	4613      	mov	r3, r2
 8009146:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	68ba      	ldr	r2, [r7, #8]
 800914c:	2100      	movs	r1, #0
 800914e:	68f8      	ldr	r0, [r7, #12]
 8009150:	f000 fc68 	bl	8009a24 <USBD_LL_Transmit>

  return USBD_OK;
 8009154:	2300      	movs	r3, #0
}
 8009156:	4618      	mov	r0, r3
 8009158:	3710      	adds	r7, #16
 800915a:	46bd      	mov	sp, r7
 800915c:	bd80      	pop	{r7, pc}

0800915e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800915e:	b580      	push	{r7, lr}
 8009160:	b084      	sub	sp, #16
 8009162:	af00      	add	r7, sp, #0
 8009164:	60f8      	str	r0, [r7, #12]
 8009166:	60b9      	str	r1, [r7, #8]
 8009168:	4613      	mov	r3, r2
 800916a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800916c:	88fb      	ldrh	r3, [r7, #6]
 800916e:	68ba      	ldr	r2, [r7, #8]
 8009170:	2100      	movs	r1, #0
 8009172:	68f8      	ldr	r0, [r7, #12]
 8009174:	f000 fc79 	bl	8009a6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3710      	adds	r7, #16
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b082      	sub	sp, #8
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	2204      	movs	r2, #4
 800918e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8009192:	2300      	movs	r3, #0
 8009194:	2200      	movs	r2, #0
 8009196:	2100      	movs	r1, #0
 8009198:	6878      	ldr	r0, [r7, #4]
 800919a:	f000 fc43 	bl	8009a24 <USBD_LL_Transmit>

  return USBD_OK;
 800919e:	2300      	movs	r3, #0
}
 80091a0:	4618      	mov	r0, r3
 80091a2:	3708      	adds	r7, #8
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b082      	sub	sp, #8
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2205      	movs	r2, #5
 80091b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80091b8:	2300      	movs	r3, #0
 80091ba:	2200      	movs	r2, #0
 80091bc:	2100      	movs	r1, #0
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 fc53 	bl	8009a6a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80091c4:	2300      	movs	r3, #0
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3708      	adds	r7, #8
 80091ca:	46bd      	mov	sp, r7
 80091cc:	bd80      	pop	{r7, pc}
	...

080091d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80091d4:	2200      	movs	r2, #0
 80091d6:	4912      	ldr	r1, [pc, #72]	; (8009220 <MX_USB_DEVICE_Init+0x50>)
 80091d8:	4812      	ldr	r0, [pc, #72]	; (8009224 <MX_USB_DEVICE_Init+0x54>)
 80091da:	f7fe ff7d 	bl	80080d8 <USBD_Init>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d001      	beq.n	80091e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80091e4:	f7f7 fa6a 	bl	80006bc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_MSC) != USBD_OK)
 80091e8:	490f      	ldr	r1, [pc, #60]	; (8009228 <MX_USB_DEVICE_Init+0x58>)
 80091ea:	480e      	ldr	r0, [pc, #56]	; (8009224 <MX_USB_DEVICE_Init+0x54>)
 80091ec:	f7fe ff9f 	bl	800812e <USBD_RegisterClass>
 80091f0:	4603      	mov	r3, r0
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d001      	beq.n	80091fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80091f6:	f7f7 fa61 	bl	80006bc <Error_Handler>
  }
  if (USBD_MSC_RegisterStorage(&hUsbDeviceFS, &USBD_Storage_Interface_fops_FS) != USBD_OK)
 80091fa:	490c      	ldr	r1, [pc, #48]	; (800922c <MX_USB_DEVICE_Init+0x5c>)
 80091fc:	4809      	ldr	r0, [pc, #36]	; (8009224 <MX_USB_DEVICE_Init+0x54>)
 80091fe:	f7fd ff4b 	bl	8007098 <USBD_MSC_RegisterStorage>
 8009202:	4603      	mov	r3, r0
 8009204:	2b00      	cmp	r3, #0
 8009206:	d001      	beq.n	800920c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009208:	f7f7 fa58 	bl	80006bc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800920c:	4805      	ldr	r0, [pc, #20]	; (8009224 <MX_USB_DEVICE_Init+0x54>)
 800920e:	f7fe ffa7 	bl	8008160 <USBD_Start>
 8009212:	4603      	mov	r3, r0
 8009214:	2b00      	cmp	r3, #0
 8009216:	d001      	beq.n	800921c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009218:	f7f7 fa50 	bl	80006bc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800921c:	bf00      	nop
 800921e:	bd80      	pop	{r7, pc}
 8009220:	200000b0 	.word	0x200000b0
 8009224:	20000284 	.word	0x20000284
 8009228:	2000000c 	.word	0x2000000c
 800922c:	20000100 	.word	0x20000100

08009230 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009230:	b480      	push	{r7}
 8009232:	b083      	sub	sp, #12
 8009234:	af00      	add	r7, sp, #0
 8009236:	4603      	mov	r3, r0
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	2212      	movs	r2, #18
 8009240:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009242:	4b03      	ldr	r3, [pc, #12]	; (8009250 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009244:	4618      	mov	r0, r3
 8009246:	370c      	adds	r7, #12
 8009248:	46bd      	mov	sp, r7
 800924a:	bc80      	pop	{r7}
 800924c:	4770      	bx	lr
 800924e:	bf00      	nop
 8009250:	200000cc 	.word	0x200000cc

08009254 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009254:	b480      	push	{r7}
 8009256:	b083      	sub	sp, #12
 8009258:	af00      	add	r7, sp, #0
 800925a:	4603      	mov	r3, r0
 800925c:	6039      	str	r1, [r7, #0]
 800925e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009260:	683b      	ldr	r3, [r7, #0]
 8009262:	2204      	movs	r2, #4
 8009264:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009266:	4b03      	ldr	r3, [pc, #12]	; (8009274 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009268:	4618      	mov	r0, r3
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	bc80      	pop	{r7}
 8009270:	4770      	bx	lr
 8009272:	bf00      	nop
 8009274:	200000e0 	.word	0x200000e0

08009278 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009278:	b580      	push	{r7, lr}
 800927a:	b082      	sub	sp, #8
 800927c:	af00      	add	r7, sp, #0
 800927e:	4603      	mov	r3, r0
 8009280:	6039      	str	r1, [r7, #0]
 8009282:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009284:	79fb      	ldrb	r3, [r7, #7]
 8009286:	2b00      	cmp	r3, #0
 8009288:	d105      	bne.n	8009296 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800928a:	683a      	ldr	r2, [r7, #0]
 800928c:	4907      	ldr	r1, [pc, #28]	; (80092ac <USBD_FS_ProductStrDescriptor+0x34>)
 800928e:	4808      	ldr	r0, [pc, #32]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8009290:	f7ff fede 	bl	8009050 <USBD_GetString>
 8009294:	e004      	b.n	80092a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009296:	683a      	ldr	r2, [r7, #0]
 8009298:	4904      	ldr	r1, [pc, #16]	; (80092ac <USBD_FS_ProductStrDescriptor+0x34>)
 800929a:	4805      	ldr	r0, [pc, #20]	; (80092b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800929c:	f7ff fed8 	bl	8009050 <USBD_GetString>
  }
  return USBD_StrDesc;
 80092a0:	4b02      	ldr	r3, [pc, #8]	; (80092ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80092a2:	4618      	mov	r0, r3
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}
 80092aa:	bf00      	nop
 80092ac:	20000548 	.word	0x20000548
 80092b0:	0800ac60 	.word	0x0800ac60

080092b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092b4:	b580      	push	{r7, lr}
 80092b6:	b082      	sub	sp, #8
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	4603      	mov	r3, r0
 80092bc:	6039      	str	r1, [r7, #0]
 80092be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092c0:	683a      	ldr	r2, [r7, #0]
 80092c2:	4904      	ldr	r1, [pc, #16]	; (80092d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092c4:	4804      	ldr	r0, [pc, #16]	; (80092d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092c6:	f7ff fec3 	bl	8009050 <USBD_GetString>
  return USBD_StrDesc;
 80092ca:	4b02      	ldr	r3, [pc, #8]	; (80092d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3708      	adds	r7, #8
 80092d0:	46bd      	mov	sp, r7
 80092d2:	bd80      	pop	{r7, pc}
 80092d4:	20000548 	.word	0x20000548
 80092d8:	0800ac74 	.word	0x0800ac74

080092dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092dc:	b580      	push	{r7, lr}
 80092de:	b082      	sub	sp, #8
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	6039      	str	r1, [r7, #0]
 80092e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092e8:	683b      	ldr	r3, [r7, #0]
 80092ea:	221a      	movs	r2, #26
 80092ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092ee:	f000 f843 	bl	8009378 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092f2:	4b02      	ldr	r3, [pc, #8]	; (80092fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3708      	adds	r7, #8
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}
 80092fc:	200000e4 	.word	0x200000e4

08009300 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009300:	b580      	push	{r7, lr}
 8009302:	b082      	sub	sp, #8
 8009304:	af00      	add	r7, sp, #0
 8009306:	4603      	mov	r3, r0
 8009308:	6039      	str	r1, [r7, #0]
 800930a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800930c:	79fb      	ldrb	r3, [r7, #7]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d105      	bne.n	800931e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8009312:	683a      	ldr	r2, [r7, #0]
 8009314:	4907      	ldr	r1, [pc, #28]	; (8009334 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009316:	4808      	ldr	r0, [pc, #32]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009318:	f7ff fe9a 	bl	8009050 <USBD_GetString>
 800931c:	e004      	b.n	8009328 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	4904      	ldr	r1, [pc, #16]	; (8009334 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009322:	4805      	ldr	r0, [pc, #20]	; (8009338 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009324:	f7ff fe94 	bl	8009050 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009328:	4b02      	ldr	r3, [pc, #8]	; (8009334 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800932a:	4618      	mov	r0, r3
 800932c:	3708      	adds	r7, #8
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20000548 	.word	0x20000548
 8009338:	0800ac88 	.word	0x0800ac88

0800933c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b082      	sub	sp, #8
 8009340:	af00      	add	r7, sp, #0
 8009342:	4603      	mov	r3, r0
 8009344:	6039      	str	r1, [r7, #0]
 8009346:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009348:	79fb      	ldrb	r3, [r7, #7]
 800934a:	2b00      	cmp	r3, #0
 800934c:	d105      	bne.n	800935a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800934e:	683a      	ldr	r2, [r7, #0]
 8009350:	4907      	ldr	r1, [pc, #28]	; (8009370 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009352:	4808      	ldr	r0, [pc, #32]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009354:	f7ff fe7c 	bl	8009050 <USBD_GetString>
 8009358:	e004      	b.n	8009364 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800935a:	683a      	ldr	r2, [r7, #0]
 800935c:	4904      	ldr	r1, [pc, #16]	; (8009370 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800935e:	4805      	ldr	r0, [pc, #20]	; (8009374 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009360:	f7ff fe76 	bl	8009050 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009364:	4b02      	ldr	r3, [pc, #8]	; (8009370 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009366:	4618      	mov	r0, r3
 8009368:	3708      	adds	r7, #8
 800936a:	46bd      	mov	sp, r7
 800936c:	bd80      	pop	{r7, pc}
 800936e:	bf00      	nop
 8009370:	20000548 	.word	0x20000548
 8009374:	0800ac94 	.word	0x0800ac94

08009378 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800937e:	4b0f      	ldr	r3, [pc, #60]	; (80093bc <Get_SerialNum+0x44>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009384:	4b0e      	ldr	r3, [pc, #56]	; (80093c0 <Get_SerialNum+0x48>)
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800938a:	4b0e      	ldr	r3, [pc, #56]	; (80093c4 <Get_SerialNum+0x4c>)
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009390:	68fa      	ldr	r2, [r7, #12]
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	4413      	add	r3, r2
 8009396:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	2b00      	cmp	r3, #0
 800939c:	d009      	beq.n	80093b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800939e:	2208      	movs	r2, #8
 80093a0:	4909      	ldr	r1, [pc, #36]	; (80093c8 <Get_SerialNum+0x50>)
 80093a2:	68f8      	ldr	r0, [r7, #12]
 80093a4:	f000 f814 	bl	80093d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80093a8:	2204      	movs	r2, #4
 80093aa:	4908      	ldr	r1, [pc, #32]	; (80093cc <Get_SerialNum+0x54>)
 80093ac:	68b8      	ldr	r0, [r7, #8]
 80093ae:	f000 f80f 	bl	80093d0 <IntToUnicode>
  }
}
 80093b2:	bf00      	nop
 80093b4:	3710      	adds	r7, #16
 80093b6:	46bd      	mov	sp, r7
 80093b8:	bd80      	pop	{r7, pc}
 80093ba:	bf00      	nop
 80093bc:	1ffff7e8 	.word	0x1ffff7e8
 80093c0:	1ffff7ec 	.word	0x1ffff7ec
 80093c4:	1ffff7f0 	.word	0x1ffff7f0
 80093c8:	200000e6 	.word	0x200000e6
 80093cc:	200000f6 	.word	0x200000f6

080093d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093d0:	b480      	push	{r7}
 80093d2:	b087      	sub	sp, #28
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	60f8      	str	r0, [r7, #12]
 80093d8:	60b9      	str	r1, [r7, #8]
 80093da:	4613      	mov	r3, r2
 80093dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093de:	2300      	movs	r3, #0
 80093e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093e2:	2300      	movs	r3, #0
 80093e4:	75fb      	strb	r3, [r7, #23]
 80093e6:	e027      	b.n	8009438 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	0f1b      	lsrs	r3, r3, #28
 80093ec:	2b09      	cmp	r3, #9
 80093ee:	d80b      	bhi.n	8009408 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	0f1b      	lsrs	r3, r3, #28
 80093f4:	b2da      	uxtb	r2, r3
 80093f6:	7dfb      	ldrb	r3, [r7, #23]
 80093f8:	005b      	lsls	r3, r3, #1
 80093fa:	4619      	mov	r1, r3
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	440b      	add	r3, r1
 8009400:	3230      	adds	r2, #48	; 0x30
 8009402:	b2d2      	uxtb	r2, r2
 8009404:	701a      	strb	r2, [r3, #0]
 8009406:	e00a      	b.n	800941e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	0f1b      	lsrs	r3, r3, #28
 800940c:	b2da      	uxtb	r2, r3
 800940e:	7dfb      	ldrb	r3, [r7, #23]
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	4619      	mov	r1, r3
 8009414:	68bb      	ldr	r3, [r7, #8]
 8009416:	440b      	add	r3, r1
 8009418:	3237      	adds	r2, #55	; 0x37
 800941a:	b2d2      	uxtb	r2, r2
 800941c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	011b      	lsls	r3, r3, #4
 8009422:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009424:	7dfb      	ldrb	r3, [r7, #23]
 8009426:	005b      	lsls	r3, r3, #1
 8009428:	3301      	adds	r3, #1
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	4413      	add	r3, r2
 800942e:	2200      	movs	r2, #0
 8009430:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009432:	7dfb      	ldrb	r3, [r7, #23]
 8009434:	3301      	adds	r3, #1
 8009436:	75fb      	strb	r3, [r7, #23]
 8009438:	7dfa      	ldrb	r2, [r7, #23]
 800943a:	79fb      	ldrb	r3, [r7, #7]
 800943c:	429a      	cmp	r2, r3
 800943e:	d3d3      	bcc.n	80093e8 <IntToUnicode+0x18>
  }
}
 8009440:	bf00      	nop
 8009442:	bf00      	nop
 8009444:	371c      	adds	r7, #28
 8009446:	46bd      	mov	sp, r7
 8009448:	bc80      	pop	{r7}
 800944a:	4770      	bx	lr

0800944c <STORAGE_Init_FS>:
  * @brief  Initializes over USB FS IP
  * @param  lun:
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Init_FS(uint8_t lun)
{
 800944c:	b580      	push	{r7, lr}
 800944e:	b082      	sub	sp, #8
 8009450:	af00      	add	r7, sp, #0
 8009452:	4603      	mov	r3, r0
 8009454:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 2 */
	HAL_FLASH_Unlock();
 8009456:	f7f7 fcff 	bl	8000e58 <HAL_FLASH_Unlock>
  return (USBD_OK);
 800945a:	2300      	movs	r3, #0
  /* USER CODE END 2 */
}
 800945c:	4618      	mov	r0, r3
 800945e:	3708      	adds	r7, #8
 8009460:	46bd      	mov	sp, r7
 8009462:	bd80      	pop	{r7, pc}

08009464 <STORAGE_GetCapacity_FS>:
  * @param  block_num: .
  * @param  block_size: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_GetCapacity_FS(uint8_t lun, uint32_t *block_num, uint16_t *block_size)
{
 8009464:	b480      	push	{r7}
 8009466:	b085      	sub	sp, #20
 8009468:	af00      	add	r7, sp, #0
 800946a:	4603      	mov	r3, r0
 800946c:	60b9      	str	r1, [r7, #8]
 800946e:	607a      	str	r2, [r7, #4]
 8009470:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 3 */
  *block_num  = STORAGE_BLK_NBR;
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	2280      	movs	r2, #128	; 0x80
 8009476:	601a      	str	r2, [r3, #0]
  *block_size = STORAGE_BLK_SIZ;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800947e:	801a      	strh	r2, [r3, #0]
  return (USBD_OK);
 8009480:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009482:	4618      	mov	r0, r3
 8009484:	3714      	adds	r7, #20
 8009486:	46bd      	mov	sp, r7
 8009488:	bc80      	pop	{r7}
 800948a:	4770      	bx	lr

0800948c <STORAGE_IsReady_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsReady_FS(uint8_t lun)
{
 800948c:	b480      	push	{r7}
 800948e:	b083      	sub	sp, #12
 8009490:	af00      	add	r7, sp, #0
 8009492:	4603      	mov	r3, r0
 8009494:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009496:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009498:	4618      	mov	r0, r3
 800949a:	370c      	adds	r7, #12
 800949c:	46bd      	mov	sp, r7
 800949e:	bc80      	pop	{r7}
 80094a0:	4770      	bx	lr

080094a2 <STORAGE_IsWriteProtected_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_IsWriteProtected_FS(uint8_t lun)
{
 80094a2:	b480      	push	{r7}
 80094a4:	b083      	sub	sp, #12
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	4603      	mov	r3, r0
 80094aa:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80094ac:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	370c      	adds	r7, #12
 80094b2:	46bd      	mov	sp, r7
 80094b4:	bc80      	pop	{r7}
 80094b6:	4770      	bx	lr

080094b8 <STORAGE_Read_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Read_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80094b8:	b580      	push	{r7, lr}
 80094ba:	b086      	sub	sp, #24
 80094bc:	af00      	add	r7, sp, #0
 80094be:	60b9      	str	r1, [r7, #8]
 80094c0:	607a      	str	r2, [r7, #4]
 80094c2:	461a      	mov	r2, r3
 80094c4:	4603      	mov	r3, r0
 80094c6:	73fb      	strb	r3, [r7, #15]
 80094c8:	4613      	mov	r3, r2
 80094ca:	81bb      	strh	r3, [r7, #12]
  /* USER CODE BEGIN 6 */
	// convert block address (block number) into absolute address
#ifdef SMALL_FS
	uint32_t inbuf_addr = blk_addr << 9;// 1 sector has 512 bytes in size. 1 << 9 = 1*512.
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	025b      	lsls	r3, r3, #9
 80094d0:	617b      	str	r3, [r7, #20]
#else
	uint32_t inbuf_addr = blk_addr << 10; // 1 sector has 1024 bytes in size. 1 << 10 = 1*1024.
#endif

	memcpy(buf, (uint8_t *)(FLASH_MEM_BASE_ADDR + inbuf_addr),  STORAGE_BLK_SIZ);
 80094d2:	697b      	ldr	r3, [r7, #20]
 80094d4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80094d8:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 80094dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80094e0:	4619      	mov	r1, r3
 80094e2:	68b8      	ldr	r0, [r7, #8]
 80094e4:	f000 fb6e 	bl	8009bc4 <memcpy>
	return (USBD_OK);
 80094e8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80094ea:	4618      	mov	r0, r3
 80094ec:	3718      	adds	r7, #24
 80094ee:	46bd      	mov	sp, r7
 80094f0:	bd80      	pop	{r7, pc}
	...

080094f4 <STORAGE_Write_FS>:
  * @brief  .
  * @param  lun: .
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
int8_t STORAGE_Write_FS(uint8_t lun, uint8_t *buf, uint32_t blk_addr, uint16_t blk_len)
{
 80094f4:	b5b0      	push	{r4, r5, r7, lr}
 80094f6:	b088      	sub	sp, #32
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	60b9      	str	r1, [r7, #8]
 80094fc:	607a      	str	r2, [r7, #4]
 80094fe:	461a      	mov	r2, r3
 8009500:	4603      	mov	r3, r0
 8009502:	73fb      	strb	r3, [r7, #15]
 8009504:	4613      	mov	r3, r2
 8009506:	81bb      	strh	r3, [r7, #12]
#ifdef SMALL_FS
	static uint8_t mod_space[FLASH_PAGE_SIZE]; // space to copy data from flash for modifying data before page erase and re-flash
	// convert sector number into physical address of the flash.
	// 1 sector has 512 bytes in size.

	uint32_t temp_buf = 0; // temp buffer to merge four bytes into 4 byte 32 bit (word).
 8009508:	2300      	movs	r3, #0
 800950a:	61bb      	str	r3, [r7, #24]
	uint32_t cpy_addr = 0;
 800950c:	2300      	movs	r3, #0
 800950e:	617b      	str	r3, [r7, #20]

	// Unlock flash for writing
	HAL_FLASH_Unlock();
 8009510:	f7f7 fca2 	bl	8000e58 <HAL_FLASH_Unlock>
	// and Odd sector number will we written to upper half of flash page [512-1023].

	// read back from flash.
	// use sector number to calculate the physical page offset of flash of that sector number.
	// (sector/2)*FLASH_PAGE_SIZE always return page-aligned number a.k.a page starting address.
	cpy_addr = (FLASH_MEM_BASE_ADDR	+ ((blk_addr >> 1) << 10));
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	085b      	lsrs	r3, r3, #1
 8009518:	029b      	lsls	r3, r3, #10
 800951a:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 800951e:	f503 437c 	add.w	r3, r3, #64512	; 0xfc00
 8009522:	617b      	str	r3, [r7, #20]
	memcpy(mod_space, (uint8_t*) cpy_addr,	FLASH_PAGE_SIZE);
 8009524:	697b      	ldr	r3, [r7, #20]
 8009526:	4a2b      	ldr	r2, [pc, #172]	; (80095d4 <STORAGE_Write_FS+0xe0>)
 8009528:	4610      	mov	r0, r2
 800952a:	4619      	mov	r1, r3
 800952c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009530:	461a      	mov	r2, r3
 8009532:	f000 fb47 	bl	8009bc4 <memcpy>

	// modify data in buffer.
	// Even sector number reads from [0-511]. Odd sector number reads from [512-1023].
	memcpy(mod_space + ((blk_addr % 2) << 9), buf, 512);
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	025b      	lsls	r3, r3, #9
 800953a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800953e:	4a25      	ldr	r2, [pc, #148]	; (80095d4 <STORAGE_Write_FS+0xe0>)
 8009540:	4413      	add	r3, r2
 8009542:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009546:	68b9      	ldr	r1, [r7, #8]
 8009548:	4618      	mov	r0, r3
 800954a:	f000 fb3b 	bl	8009bc4 <memcpy>
	//buff+=512;

	// Page erase
	USB_EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // erase 1024 KBytes (which is the size of 1 page).
 800954e:	4b22      	ldr	r3, [pc, #136]	; (80095d8 <STORAGE_Write_FS+0xe4>)
 8009550:	2200      	movs	r2, #0
 8009552:	601a      	str	r2, [r3, #0]
	USB_EraseInitStruct.PageAddress = cpy_addr; // We start erase from the beginning of sector.
 8009554:	4a20      	ldr	r2, [pc, #128]	; (80095d8 <STORAGE_Write_FS+0xe4>)
 8009556:	697b      	ldr	r3, [r7, #20]
 8009558:	6093      	str	r3, [r2, #8]
	USB_EraseInitStruct.NbPages = 1; // this tells eraser for how many page we want to erase. Which is 1 page.
 800955a:	4b1f      	ldr	r3, [pc, #124]	; (80095d8 <STORAGE_Write_FS+0xe4>)
 800955c:	2201      	movs	r2, #1
 800955e:	60da      	str	r2, [r3, #12]

	HAL_FLASHEx_Erase(&USB_EraseInitStruct, &USB_PAGEError);
 8009560:	491e      	ldr	r1, [pc, #120]	; (80095dc <STORAGE_Write_FS+0xe8>)
 8009562:	481d      	ldr	r0, [pc, #116]	; (80095d8 <STORAGE_Write_FS+0xe4>)
 8009564:	f7f7 fd50 	bl	8001008 <HAL_FLASHEx_Erase>

	// flash the modified data back to Flash memory.
	for (uint32_t i = 0; i < FLASH_PAGE_SIZE; i+=4) {
 8009568:	2300      	movs	r3, #0
 800956a:	61fb      	str	r3, [r7, #28]
 800956c:	e028      	b.n	80095c0 <STORAGE_Write_FS+0xcc>
		temp_buf = mod_space[i] | mod_space[i+1] << 8 | mod_space[i+2] << 16
 800956e:	4a19      	ldr	r2, [pc, #100]	; (80095d4 <STORAGE_Write_FS+0xe0>)
 8009570:	69fb      	ldr	r3, [r7, #28]
 8009572:	4413      	add	r3, r2
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	4619      	mov	r1, r3
 8009578:	69fb      	ldr	r3, [r7, #28]
 800957a:	3301      	adds	r3, #1
 800957c:	4a15      	ldr	r2, [pc, #84]	; (80095d4 <STORAGE_Write_FS+0xe0>)
 800957e:	5cd3      	ldrb	r3, [r2, r3]
 8009580:	021b      	lsls	r3, r3, #8
 8009582:	ea41 0203 	orr.w	r2, r1, r3
 8009586:	69fb      	ldr	r3, [r7, #28]
 8009588:	3302      	adds	r3, #2
 800958a:	4912      	ldr	r1, [pc, #72]	; (80095d4 <STORAGE_Write_FS+0xe0>)
 800958c:	5ccb      	ldrb	r3, [r1, r3]
 800958e:	041b      	lsls	r3, r3, #16
 8009590:	431a      	orrs	r2, r3
				| mod_space[i+3] << 24; // parse byte n n+1 n+2 and n+3
 8009592:	69fb      	ldr	r3, [r7, #28]
 8009594:	3303      	adds	r3, #3
 8009596:	490f      	ldr	r1, [pc, #60]	; (80095d4 <STORAGE_Write_FS+0xe0>)
 8009598:	5ccb      	ldrb	r3, [r1, r3]
 800959a:	061b      	lsls	r3, r3, #24
 800959c:	4313      	orrs	r3, r2
		temp_buf = mod_space[i] | mod_space[i+1] << 8 | mod_space[i+2] << 16
 800959e:	61bb      	str	r3, [r7, #24]
		//memcpy(&temp_buf, mod_space+(i*4), 4);// Copy 4 byte into one DWORD (unt32_t byte).
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
				USB_EraseInitStruct.PageAddress + i, temp_buf); // flash modified data onto Flash memory.
 80095a0:	4b0d      	ldr	r3, [pc, #52]	; (80095d8 <STORAGE_Write_FS+0xe4>)
 80095a2:	689a      	ldr	r2, [r3, #8]
		HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
 80095a4:	69fb      	ldr	r3, [r7, #28]
 80095a6:	18d1      	adds	r1, r2, r3
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	2200      	movs	r2, #0
 80095ac:	461c      	mov	r4, r3
 80095ae:	4615      	mov	r5, r2
 80095b0:	4622      	mov	r2, r4
 80095b2:	462b      	mov	r3, r5
 80095b4:	2002      	movs	r0, #2
 80095b6:	f7f7 fbdf 	bl	8000d78 <HAL_FLASH_Program>
	for (uint32_t i = 0; i < FLASH_PAGE_SIZE; i+=4) {
 80095ba:	69fb      	ldr	r3, [r7, #28]
 80095bc:	3304      	adds	r3, #4
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	69fb      	ldr	r3, [r7, #28]
 80095c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80095c6:	d3d2      	bcc.n	800956e <STORAGE_Write_FS+0x7a>
			USB_EraseInitStruct.PageAddress + i, temp_buf); // flash data onto Flash memory.

	buf += 4;
	}
#endif
  return (USBD_OK);
 80095c8:	2300      	movs	r3, #0
  /* USER CODE END 7 */
}
 80095ca:	4618      	mov	r0, r3
 80095cc:	3720      	adds	r7, #32
 80095ce:	46bd      	mov	sp, r7
 80095d0:	bdb0      	pop	{r4, r5, r7, pc}
 80095d2:	bf00      	nop
 80095d4:	2000075c 	.word	0x2000075c
 80095d8:	20000748 	.word	0x20000748
 80095dc:	20000758 	.word	0x20000758

080095e0 <STORAGE_GetMaxLun_FS>:
  * @brief  .
  * @param  None
  * @retval .
  */
int8_t STORAGE_GetMaxLun_FS(void)
{
 80095e0:	b480      	push	{r7}
 80095e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  return (STORAGE_LUN_NBR - 1);
 80095e4:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 80095e6:	4618      	mov	r0, r3
 80095e8:	46bd      	mov	sp, r7
 80095ea:	bc80      	pop	{r7}
 80095ec:	4770      	bx	lr
	...

080095f0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	4a0d      	ldr	r2, [pc, #52]	; (8009634 <HAL_PCD_MspInit+0x44>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d113      	bne.n	800962a <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009602:	4b0d      	ldr	r3, [pc, #52]	; (8009638 <HAL_PCD_MspInit+0x48>)
 8009604:	69db      	ldr	r3, [r3, #28]
 8009606:	4a0c      	ldr	r2, [pc, #48]	; (8009638 <HAL_PCD_MspInit+0x48>)
 8009608:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800960c:	61d3      	str	r3, [r2, #28]
 800960e:	4b0a      	ldr	r3, [pc, #40]	; (8009638 <HAL_PCD_MspInit+0x48>)
 8009610:	69db      	ldr	r3, [r3, #28]
 8009612:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009616:	60fb      	str	r3, [r7, #12]
 8009618:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 800961a:	2200      	movs	r2, #0
 800961c:	2100      	movs	r1, #0
 800961e:	2014      	movs	r0, #20
 8009620:	f7f7 fb73 	bl	8000d0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8009624:	2014      	movs	r0, #20
 8009626:	f7f7 fb8c 	bl	8000d42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 800962a:	bf00      	nop
 800962c:	3710      	adds	r7, #16
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	40005c00 	.word	0x40005c00
 8009638:	40021000 	.word	0x40021000

0800963c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009650:	4619      	mov	r1, r3
 8009652:	4610      	mov	r0, r2
 8009654:	f7fe fdcc 	bl	80081f0 <USBD_LL_SetupStage>
}
 8009658:	bf00      	nop
 800965a:	3708      	adds	r7, #8
 800965c:	46bd      	mov	sp, r7
 800965e:	bd80      	pop	{r7, pc}

08009660 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009660:	b580      	push	{r7, lr}
 8009662:	b082      	sub	sp, #8
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
 8009668:	460b      	mov	r3, r1
 800966a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8009672:	78fa      	ldrb	r2, [r7, #3]
 8009674:	6879      	ldr	r1, [r7, #4]
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	00db      	lsls	r3, r3, #3
 800967e:	440b      	add	r3, r1
 8009680:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009684:	681a      	ldr	r2, [r3, #0]
 8009686:	78fb      	ldrb	r3, [r7, #3]
 8009688:	4619      	mov	r1, r3
 800968a:	f7fe fdfe 	bl	800828a <USBD_LL_DataOutStage>
}
 800968e:	bf00      	nop
 8009690:	3708      	adds	r7, #8
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
 800969e:	460b      	mov	r3, r1
 80096a0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80096a8:	78fa      	ldrb	r2, [r7, #3]
 80096aa:	6879      	ldr	r1, [r7, #4]
 80096ac:	4613      	mov	r3, r2
 80096ae:	009b      	lsls	r3, r3, #2
 80096b0:	4413      	add	r3, r2
 80096b2:	00db      	lsls	r3, r3, #3
 80096b4:	440b      	add	r3, r1
 80096b6:	333c      	adds	r3, #60	; 0x3c
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	78fb      	ldrb	r3, [r7, #3]
 80096bc:	4619      	mov	r1, r3
 80096be:	f7fe fe55 	bl	800836c <USBD_LL_DataInStage>
}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b082      	sub	sp, #8
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80096d8:	4618      	mov	r0, r3
 80096da:	f7fe ff65 	bl	80085a8 <USBD_LL_SOF>
}
 80096de:	bf00      	nop
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096e6:	b580      	push	{r7, lr}
 80096e8:	b084      	sub	sp, #16
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80096ee:	2301      	movs	r3, #1
 80096f0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	689b      	ldr	r3, [r3, #8]
 80096f6:	2b02      	cmp	r3, #2
 80096f8:	d001      	beq.n	80096fe <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80096fa:	f7f6 ffdf 	bl	80006bc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009704:	7bfa      	ldrb	r2, [r7, #15]
 8009706:	4611      	mov	r1, r2
 8009708:	4618      	mov	r0, r3
 800970a:	f7fe ff15 	bl	8008538 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009714:	4618      	mov	r0, r3
 8009716:	f7fe fece 	bl	80084b6 <USBD_LL_Reset>
}
 800971a:	bf00      	nop
 800971c:	3710      	adds	r7, #16
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}
	...

08009724 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009732:	4618      	mov	r0, r3
 8009734:	f7fe ff0f 	bl	8008556 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	699b      	ldr	r3, [r3, #24]
 800973c:	2b00      	cmp	r3, #0
 800973e:	d005      	beq.n	800974c <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009740:	4b04      	ldr	r3, [pc, #16]	; (8009754 <HAL_PCD_SuspendCallback+0x30>)
 8009742:	691b      	ldr	r3, [r3, #16]
 8009744:	4a03      	ldr	r2, [pc, #12]	; (8009754 <HAL_PCD_SuspendCallback+0x30>)
 8009746:	f043 0306 	orr.w	r3, r3, #6
 800974a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800974c:	bf00      	nop
 800974e:	3708      	adds	r7, #8
 8009750:	46bd      	mov	sp, r7
 8009752:	bd80      	pop	{r7, pc}
 8009754:	e000ed00 	.word	0xe000ed00

08009758 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009758:	b580      	push	{r7, lr}
 800975a:	b082      	sub	sp, #8
 800975c:	af00      	add	r7, sp, #0
 800975e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8009766:	4618      	mov	r0, r3
 8009768:	f7fe ff09 	bl	800857e <USBD_LL_Resume>
}
 800976c:	bf00      	nop
 800976e:	3708      	adds	r7, #8
 8009770:	46bd      	mov	sp, r7
 8009772:	bd80      	pop	{r7, pc}

08009774 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009774:	b580      	push	{r7, lr}
 8009776:	b082      	sub	sp, #8
 8009778:	af00      	add	r7, sp, #0
 800977a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 800977c:	4a23      	ldr	r2, [pc, #140]	; (800980c <USBD_LL_Init+0x98>)
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	4a21      	ldr	r2, [pc, #132]	; (800980c <USBD_LL_Init+0x98>)
 8009788:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 800978c:	4b1f      	ldr	r3, [pc, #124]	; (800980c <USBD_LL_Init+0x98>)
 800978e:	4a20      	ldr	r2, [pc, #128]	; (8009810 <USBD_LL_Init+0x9c>)
 8009790:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009792:	4b1e      	ldr	r3, [pc, #120]	; (800980c <USBD_LL_Init+0x98>)
 8009794:	2208      	movs	r2, #8
 8009796:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009798:	4b1c      	ldr	r3, [pc, #112]	; (800980c <USBD_LL_Init+0x98>)
 800979a:	2202      	movs	r2, #2
 800979c:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 800979e:	4b1b      	ldr	r3, [pc, #108]	; (800980c <USBD_LL_Init+0x98>)
 80097a0:	2200      	movs	r2, #0
 80097a2:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80097a4:	4b19      	ldr	r3, [pc, #100]	; (800980c <USBD_LL_Init+0x98>)
 80097a6:	2200      	movs	r2, #0
 80097a8:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80097aa:	4b18      	ldr	r3, [pc, #96]	; (800980c <USBD_LL_Init+0x98>)
 80097ac:	2200      	movs	r2, #0
 80097ae:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80097b0:	4816      	ldr	r0, [pc, #88]	; (800980c <USBD_LL_Init+0x98>)
 80097b2:	f7f7 fe6d 	bl	8001490 <HAL_PCD_Init>
 80097b6:	4603      	mov	r3, r0
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d001      	beq.n	80097c0 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80097bc:	f7f6 ff7e 	bl	80006bc <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097c6:	2318      	movs	r3, #24
 80097c8:	2200      	movs	r2, #0
 80097ca:	2100      	movs	r1, #0
 80097cc:	f7f9 fb0e 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097d6:	2358      	movs	r3, #88	; 0x58
 80097d8:	2200      	movs	r2, #0
 80097da:	2180      	movs	r1, #128	; 0x80
 80097dc:	f7f9 fb06 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_MSC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x98);
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097e6:	2398      	movs	r3, #152	; 0x98
 80097e8:	2200      	movs	r2, #0
 80097ea:	2181      	movs	r1, #129	; 0x81
 80097ec:	f7f9 fafe 	bl	8002dec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0xD8);
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80097f6:	23d8      	movs	r3, #216	; 0xd8
 80097f8:	2200      	movs	r2, #0
 80097fa:	2101      	movs	r1, #1
 80097fc:	f7f9 faf6 	bl	8002dec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_MSC */
  return USBD_OK;
 8009800:	2300      	movs	r3, #0
}
 8009802:	4618      	mov	r0, r3
 8009804:	3708      	adds	r7, #8
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
 800980a:	bf00      	nop
 800980c:	20000b5c 	.word	0x20000b5c
 8009810:	40005c00 	.word	0x40005c00

08009814 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009814:	b580      	push	{r7, lr}
 8009816:	b084      	sub	sp, #16
 8009818:	af00      	add	r7, sp, #0
 800981a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800981c:	2300      	movs	r3, #0
 800981e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009820:	2300      	movs	r3, #0
 8009822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800982a:	4618      	mov	r0, r3
 800982c:	f7f7 ff3b 	bl	80016a6 <HAL_PCD_Start>
 8009830:	4603      	mov	r3, r0
 8009832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009834:	7bfb      	ldrb	r3, [r7, #15]
 8009836:	4618      	mov	r0, r3
 8009838:	f000 f96e 	bl	8009b18 <USBD_Get_USB_Status>
 800983c:	4603      	mov	r3, r0
 800983e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009840:	7bbb      	ldrb	r3, [r7, #14]
}
 8009842:	4618      	mov	r0, r3
 8009844:	3710      	adds	r7, #16
 8009846:	46bd      	mov	sp, r7
 8009848:	bd80      	pop	{r7, pc}

0800984a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800984a:	b580      	push	{r7, lr}
 800984c:	b084      	sub	sp, #16
 800984e:	af00      	add	r7, sp, #0
 8009850:	6078      	str	r0, [r7, #4]
 8009852:	4608      	mov	r0, r1
 8009854:	4611      	mov	r1, r2
 8009856:	461a      	mov	r2, r3
 8009858:	4603      	mov	r3, r0
 800985a:	70fb      	strb	r3, [r7, #3]
 800985c:	460b      	mov	r3, r1
 800985e:	70bb      	strb	r3, [r7, #2]
 8009860:	4613      	mov	r3, r2
 8009862:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009864:	2300      	movs	r3, #0
 8009866:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009872:	78bb      	ldrb	r3, [r7, #2]
 8009874:	883a      	ldrh	r2, [r7, #0]
 8009876:	78f9      	ldrb	r1, [r7, #3]
 8009878:	f7f8 f8b3 	bl	80019e2 <HAL_PCD_EP_Open>
 800987c:	4603      	mov	r3, r0
 800987e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009880:	7bfb      	ldrb	r3, [r7, #15]
 8009882:	4618      	mov	r0, r3
 8009884:	f000 f948 	bl	8009b18 <USBD_Get_USB_Status>
 8009888:	4603      	mov	r3, r0
 800988a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800988c:	7bbb      	ldrb	r3, [r7, #14]
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	460b      	mov	r3, r1
 80098a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098a2:	2300      	movs	r3, #0
 80098a4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098a6:	2300      	movs	r3, #0
 80098a8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098b0:	78fa      	ldrb	r2, [r7, #3]
 80098b2:	4611      	mov	r1, r2
 80098b4:	4618      	mov	r0, r3
 80098b6:	f7f8 f8fa 	bl	8001aae <HAL_PCD_EP_Close>
 80098ba:	4603      	mov	r3, r0
 80098bc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098be:	7bfb      	ldrb	r3, [r7, #15]
 80098c0:	4618      	mov	r0, r3
 80098c2:	f000 f929 	bl	8009b18 <USBD_Get_USB_Status>
 80098c6:	4603      	mov	r3, r0
 80098c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098ca:	7bbb      	ldrb	r3, [r7, #14]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3710      	adds	r7, #16
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}

080098d4 <USBD_LL_FlushEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_FlushEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	460b      	mov	r3, r1
 80098de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80098e0:	2300      	movs	r3, #0
 80098e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80098e4:	2300      	movs	r3, #0
 80098e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Flush(pdev->pData, ep_addr);
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80098ee:	78fa      	ldrb	r2, [r7, #3]
 80098f0:	4611      	mov	r1, r2
 80098f2:	4618      	mov	r0, r3
 80098f4:	f7f8 fa6e 	bl	8001dd4 <HAL_PCD_EP_Flush>
 80098f8:	4603      	mov	r3, r0
 80098fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80098fc:	7bfb      	ldrb	r3, [r7, #15]
 80098fe:	4618      	mov	r0, r3
 8009900:	f000 f90a 	bl	8009b18 <USBD_Get_USB_Status>
 8009904:	4603      	mov	r3, r0
 8009906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009908:	7bbb      	ldrb	r3, [r7, #14]
}
 800990a:	4618      	mov	r0, r3
 800990c:	3710      	adds	r7, #16
 800990e:	46bd      	mov	sp, r7
 8009910:	bd80      	pop	{r7, pc}

08009912 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b084      	sub	sp, #16
 8009916:	af00      	add	r7, sp, #0
 8009918:	6078      	str	r0, [r7, #4]
 800991a:	460b      	mov	r3, r1
 800991c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800991e:	2300      	movs	r3, #0
 8009920:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009922:	2300      	movs	r3, #0
 8009924:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009926:	687b      	ldr	r3, [r7, #4]
 8009928:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800992c:	78fa      	ldrb	r2, [r7, #3]
 800992e:	4611      	mov	r1, r2
 8009930:	4618      	mov	r0, r3
 8009932:	f7f8 f99b 	bl	8001c6c <HAL_PCD_EP_SetStall>
 8009936:	4603      	mov	r3, r0
 8009938:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800993a:	7bfb      	ldrb	r3, [r7, #15]
 800993c:	4618      	mov	r0, r3
 800993e:	f000 f8eb 	bl	8009b18 <USBD_Get_USB_Status>
 8009942:	4603      	mov	r3, r0
 8009944:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009946:	7bbb      	ldrb	r3, [r7, #14]
}
 8009948:	4618      	mov	r0, r3
 800994a:	3710      	adds	r7, #16
 800994c:	46bd      	mov	sp, r7
 800994e:	bd80      	pop	{r7, pc}

08009950 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009950:	b580      	push	{r7, lr}
 8009952:	b084      	sub	sp, #16
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
 8009958:	460b      	mov	r3, r1
 800995a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800995c:	2300      	movs	r3, #0
 800995e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009960:	2300      	movs	r3, #0
 8009962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800996a:	78fa      	ldrb	r2, [r7, #3]
 800996c:	4611      	mov	r1, r2
 800996e:	4618      	mov	r0, r3
 8009970:	f7f8 f9dc 	bl	8001d2c <HAL_PCD_EP_ClrStall>
 8009974:	4603      	mov	r3, r0
 8009976:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009978:	7bfb      	ldrb	r3, [r7, #15]
 800997a:	4618      	mov	r0, r3
 800997c:	f000 f8cc 	bl	8009b18 <USBD_Get_USB_Status>
 8009980:	4603      	mov	r3, r0
 8009982:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009984:	7bbb      	ldrb	r3, [r7, #14]
}
 8009986:	4618      	mov	r0, r3
 8009988:	3710      	adds	r7, #16
 800998a:	46bd      	mov	sp, r7
 800998c:	bd80      	pop	{r7, pc}

0800998e <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800998e:	b480      	push	{r7}
 8009990:	b085      	sub	sp, #20
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
 8009996:	460b      	mov	r3, r1
 8009998:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80099a0:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80099a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	da0c      	bge.n	80099c4 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80099aa:	78fb      	ldrb	r3, [r7, #3]
 80099ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80099b0:	68f9      	ldr	r1, [r7, #12]
 80099b2:	1c5a      	adds	r2, r3, #1
 80099b4:	4613      	mov	r3, r2
 80099b6:	009b      	lsls	r3, r3, #2
 80099b8:	4413      	add	r3, r2
 80099ba:	00db      	lsls	r3, r3, #3
 80099bc:	440b      	add	r3, r1
 80099be:	3302      	adds	r3, #2
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	e00b      	b.n	80099dc <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80099c4:	78fb      	ldrb	r3, [r7, #3]
 80099c6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80099ca:	68f9      	ldr	r1, [r7, #12]
 80099cc:	4613      	mov	r3, r2
 80099ce:	009b      	lsls	r3, r3, #2
 80099d0:	4413      	add	r3, r2
 80099d2:	00db      	lsls	r3, r3, #3
 80099d4:	440b      	add	r3, r1
 80099d6:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80099da:	781b      	ldrb	r3, [r3, #0]
  }
}
 80099dc:	4618      	mov	r0, r3
 80099de:	3714      	adds	r7, #20
 80099e0:	46bd      	mov	sp, r7
 80099e2:	bc80      	pop	{r7}
 80099e4:	4770      	bx	lr

080099e6 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80099e6:	b580      	push	{r7, lr}
 80099e8:	b084      	sub	sp, #16
 80099ea:	af00      	add	r7, sp, #0
 80099ec:	6078      	str	r0, [r7, #4]
 80099ee:	460b      	mov	r3, r1
 80099f0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80099f2:	2300      	movs	r3, #0
 80099f4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80099f6:	2300      	movs	r3, #0
 80099f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009a00:	78fa      	ldrb	r2, [r7, #3]
 8009a02:	4611      	mov	r1, r2
 8009a04:	4618      	mov	r0, r3
 8009a06:	f7f7 ffc7 	bl	8001998 <HAL_PCD_SetAddress>
 8009a0a:	4603      	mov	r3, r0
 8009a0c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a0e:	7bfb      	ldrb	r3, [r7, #15]
 8009a10:	4618      	mov	r0, r3
 8009a12:	f000 f881 	bl	8009b18 <USBD_Get_USB_Status>
 8009a16:	4603      	mov	r3, r0
 8009a18:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009a1a:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	3710      	adds	r7, #16
 8009a20:	46bd      	mov	sp, r7
 8009a22:	bd80      	pop	{r7, pc}

08009a24 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b086      	sub	sp, #24
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	60f8      	str	r0, [r7, #12]
 8009a2c:	607a      	str	r2, [r7, #4]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	460b      	mov	r3, r1
 8009a32:	72fb      	strb	r3, [r7, #11]
 8009a34:	4613      	mov	r3, r2
 8009a36:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a46:	893b      	ldrh	r3, [r7, #8]
 8009a48:	7af9      	ldrb	r1, [r7, #11]
 8009a4a:	687a      	ldr	r2, [r7, #4]
 8009a4c:	f7f8 f8cb 	bl	8001be6 <HAL_PCD_EP_Transmit>
 8009a50:	4603      	mov	r3, r0
 8009a52:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a54:	7dfb      	ldrb	r3, [r7, #23]
 8009a56:	4618      	mov	r0, r3
 8009a58:	f000 f85e 	bl	8009b18 <USBD_Get_USB_Status>
 8009a5c:	4603      	mov	r3, r0
 8009a5e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009a60:	7dbb      	ldrb	r3, [r7, #22]
}
 8009a62:	4618      	mov	r0, r3
 8009a64:	3718      	adds	r7, #24
 8009a66:	46bd      	mov	sp, r7
 8009a68:	bd80      	pop	{r7, pc}

08009a6a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8009a6a:	b580      	push	{r7, lr}
 8009a6c:	b086      	sub	sp, #24
 8009a6e:	af00      	add	r7, sp, #0
 8009a70:	60f8      	str	r0, [r7, #12]
 8009a72:	607a      	str	r2, [r7, #4]
 8009a74:	461a      	mov	r2, r3
 8009a76:	460b      	mov	r3, r1
 8009a78:	72fb      	strb	r3, [r7, #11]
 8009a7a:	4613      	mov	r3, r2
 8009a7c:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009a7e:	2300      	movs	r3, #0
 8009a80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a82:	2300      	movs	r3, #0
 8009a84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8009a8c:	893b      	ldrh	r3, [r7, #8]
 8009a8e:	7af9      	ldrb	r1, [r7, #11]
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	f7f8 f854 	bl	8001b3e <HAL_PCD_EP_Receive>
 8009a96:	4603      	mov	r3, r0
 8009a98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009a9a:	7dfb      	ldrb	r3, [r7, #23]
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	f000 f83b 	bl	8009b18 <USBD_Get_USB_Status>
 8009aa2:	4603      	mov	r3, r0
 8009aa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8009aa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3718      	adds	r7, #24
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b082      	sub	sp, #8
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	6078      	str	r0, [r7, #4]
 8009ab8:	460b      	mov	r3, r1
 8009aba:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8009ac2:	78fa      	ldrb	r2, [r7, #3]
 8009ac4:	4611      	mov	r1, r2
 8009ac6:	4618      	mov	r0, r3
 8009ac8:	f7f8 f876 	bl	8001bb8 <HAL_PCD_EP_GetRxCount>
 8009acc:	4603      	mov	r3, r0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3708      	adds	r7, #8
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	bd80      	pop	{r7, pc}
	...

08009ad8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_MSC_BOT_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8009ae0:	4b02      	ldr	r3, [pc, #8]	; (8009aec <USBD_static_malloc+0x14>)
}
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	370c      	adds	r7, #12
 8009ae6:	46bd      	mov	sp, r7
 8009ae8:	bc80      	pop	{r7}
 8009aea:	4770      	bx	lr
 8009aec:	20000e48 	.word	0x20000e48

08009af0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009af0:	b480      	push	{r7}
 8009af2:	b083      	sub	sp, #12
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	6078      	str	r0, [r7, #4]

}
 8009af8:	bf00      	nop
 8009afa:	370c      	adds	r7, #12
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bc80      	pop	{r7}
 8009b00:	4770      	bx	lr

08009b02 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009b02:	b480      	push	{r7}
 8009b04:	b083      	sub	sp, #12
 8009b06:	af00      	add	r7, sp, #0
 8009b08:	6078      	str	r0, [r7, #4]
 8009b0a:	460b      	mov	r3, r1
 8009b0c:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8009b0e:	bf00      	nop
 8009b10:	370c      	adds	r7, #12
 8009b12:	46bd      	mov	sp, r7
 8009b14:	bc80      	pop	{r7}
 8009b16:	4770      	bx	lr

08009b18 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b085      	sub	sp, #20
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	4603      	mov	r3, r0
 8009b20:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009b22:	2300      	movs	r3, #0
 8009b24:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009b26:	79fb      	ldrb	r3, [r7, #7]
 8009b28:	2b03      	cmp	r3, #3
 8009b2a:	d817      	bhi.n	8009b5c <USBD_Get_USB_Status+0x44>
 8009b2c:	a201      	add	r2, pc, #4	; (adr r2, 8009b34 <USBD_Get_USB_Status+0x1c>)
 8009b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009b32:	bf00      	nop
 8009b34:	08009b45 	.word	0x08009b45
 8009b38:	08009b4b 	.word	0x08009b4b
 8009b3c:	08009b51 	.word	0x08009b51
 8009b40:	08009b57 	.word	0x08009b57
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009b44:	2300      	movs	r3, #0
 8009b46:	73fb      	strb	r3, [r7, #15]
    break;
 8009b48:	e00b      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009b4a:	2302      	movs	r3, #2
 8009b4c:	73fb      	strb	r3, [r7, #15]
    break;
 8009b4e:	e008      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009b50:	2301      	movs	r3, #1
 8009b52:	73fb      	strb	r3, [r7, #15]
    break;
 8009b54:	e005      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009b56:	2302      	movs	r3, #2
 8009b58:	73fb      	strb	r3, [r7, #15]
    break;
 8009b5a:	e002      	b.n	8009b62 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009b5c:	2302      	movs	r3, #2
 8009b5e:	73fb      	strb	r3, [r7, #15]
    break;
 8009b60:	bf00      	nop
  }
  return usb_status;
 8009b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b64:	4618      	mov	r0, r3
 8009b66:	3714      	adds	r7, #20
 8009b68:	46bd      	mov	sp, r7
 8009b6a:	bc80      	pop	{r7}
 8009b6c:	4770      	bx	lr
 8009b6e:	bf00      	nop

08009b70 <__errno>:
 8009b70:	4b01      	ldr	r3, [pc, #4]	; (8009b78 <__errno+0x8>)
 8009b72:	6818      	ldr	r0, [r3, #0]
 8009b74:	4770      	bx	lr
 8009b76:	bf00      	nop
 8009b78:	20000120 	.word	0x20000120

08009b7c <__libc_init_array>:
 8009b7c:	b570      	push	{r4, r5, r6, lr}
 8009b7e:	2600      	movs	r6, #0
 8009b80:	4d0c      	ldr	r5, [pc, #48]	; (8009bb4 <__libc_init_array+0x38>)
 8009b82:	4c0d      	ldr	r4, [pc, #52]	; (8009bb8 <__libc_init_array+0x3c>)
 8009b84:	1b64      	subs	r4, r4, r5
 8009b86:	10a4      	asrs	r4, r4, #2
 8009b88:	42a6      	cmp	r6, r4
 8009b8a:	d109      	bne.n	8009ba0 <__libc_init_array+0x24>
 8009b8c:	f001 f820 	bl	800abd0 <_init>
 8009b90:	2600      	movs	r6, #0
 8009b92:	4d0a      	ldr	r5, [pc, #40]	; (8009bbc <__libc_init_array+0x40>)
 8009b94:	4c0a      	ldr	r4, [pc, #40]	; (8009bc0 <__libc_init_array+0x44>)
 8009b96:	1b64      	subs	r4, r4, r5
 8009b98:	10a4      	asrs	r4, r4, #2
 8009b9a:	42a6      	cmp	r6, r4
 8009b9c:	d105      	bne.n	8009baa <__libc_init_array+0x2e>
 8009b9e:	bd70      	pop	{r4, r5, r6, pc}
 8009ba0:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ba4:	4798      	blx	r3
 8009ba6:	3601      	adds	r6, #1
 8009ba8:	e7ee      	b.n	8009b88 <__libc_init_array+0xc>
 8009baa:	f855 3b04 	ldr.w	r3, [r5], #4
 8009bae:	4798      	blx	r3
 8009bb0:	3601      	adds	r6, #1
 8009bb2:	e7f2      	b.n	8009b9a <__libc_init_array+0x1e>
 8009bb4:	0800ad90 	.word	0x0800ad90
 8009bb8:	0800ad90 	.word	0x0800ad90
 8009bbc:	0800ad90 	.word	0x0800ad90
 8009bc0:	0800ad94 	.word	0x0800ad94

08009bc4 <memcpy>:
 8009bc4:	440a      	add	r2, r1
 8009bc6:	4291      	cmp	r1, r2
 8009bc8:	f100 33ff 	add.w	r3, r0, #4294967295
 8009bcc:	d100      	bne.n	8009bd0 <memcpy+0xc>
 8009bce:	4770      	bx	lr
 8009bd0:	b510      	push	{r4, lr}
 8009bd2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009bd6:	4291      	cmp	r1, r2
 8009bd8:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009bdc:	d1f9      	bne.n	8009bd2 <memcpy+0xe>
 8009bde:	bd10      	pop	{r4, pc}

08009be0 <memset>:
 8009be0:	4603      	mov	r3, r0
 8009be2:	4402      	add	r2, r0
 8009be4:	4293      	cmp	r3, r2
 8009be6:	d100      	bne.n	8009bea <memset+0xa>
 8009be8:	4770      	bx	lr
 8009bea:	f803 1b01 	strb.w	r1, [r3], #1
 8009bee:	e7f9      	b.n	8009be4 <memset+0x4>

08009bf0 <iprintf>:
 8009bf0:	b40f      	push	{r0, r1, r2, r3}
 8009bf2:	4b0a      	ldr	r3, [pc, #40]	; (8009c1c <iprintf+0x2c>)
 8009bf4:	b513      	push	{r0, r1, r4, lr}
 8009bf6:	681c      	ldr	r4, [r3, #0]
 8009bf8:	b124      	cbz	r4, 8009c04 <iprintf+0x14>
 8009bfa:	69a3      	ldr	r3, [r4, #24]
 8009bfc:	b913      	cbnz	r3, 8009c04 <iprintf+0x14>
 8009bfe:	4620      	mov	r0, r4
 8009c00:	f000 f87a 	bl	8009cf8 <__sinit>
 8009c04:	ab05      	add	r3, sp, #20
 8009c06:	4620      	mov	r0, r4
 8009c08:	9a04      	ldr	r2, [sp, #16]
 8009c0a:	68a1      	ldr	r1, [r4, #8]
 8009c0c:	9301      	str	r3, [sp, #4]
 8009c0e:	f000 f9cf 	bl	8009fb0 <_vfiprintf_r>
 8009c12:	b002      	add	sp, #8
 8009c14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c18:	b004      	add	sp, #16
 8009c1a:	4770      	bx	lr
 8009c1c:	20000120 	.word	0x20000120

08009c20 <putchar>:
 8009c20:	b538      	push	{r3, r4, r5, lr}
 8009c22:	4b08      	ldr	r3, [pc, #32]	; (8009c44 <putchar+0x24>)
 8009c24:	4605      	mov	r5, r0
 8009c26:	681c      	ldr	r4, [r3, #0]
 8009c28:	b124      	cbz	r4, 8009c34 <putchar+0x14>
 8009c2a:	69a3      	ldr	r3, [r4, #24]
 8009c2c:	b913      	cbnz	r3, 8009c34 <putchar+0x14>
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f000 f862 	bl	8009cf8 <__sinit>
 8009c34:	4629      	mov	r1, r5
 8009c36:	4620      	mov	r0, r4
 8009c38:	68a2      	ldr	r2, [r4, #8]
 8009c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c3e:	f000 bc7d 	b.w	800a53c <_putc_r>
 8009c42:	bf00      	nop
 8009c44:	20000120 	.word	0x20000120

08009c48 <std>:
 8009c48:	2300      	movs	r3, #0
 8009c4a:	b510      	push	{r4, lr}
 8009c4c:	4604      	mov	r4, r0
 8009c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8009c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c56:	6083      	str	r3, [r0, #8]
 8009c58:	8181      	strh	r1, [r0, #12]
 8009c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8009c5c:	81c2      	strh	r2, [r0, #14]
 8009c5e:	6183      	str	r3, [r0, #24]
 8009c60:	4619      	mov	r1, r3
 8009c62:	2208      	movs	r2, #8
 8009c64:	305c      	adds	r0, #92	; 0x5c
 8009c66:	f7ff ffbb 	bl	8009be0 <memset>
 8009c6a:	4b05      	ldr	r3, [pc, #20]	; (8009c80 <std+0x38>)
 8009c6c:	6224      	str	r4, [r4, #32]
 8009c6e:	6263      	str	r3, [r4, #36]	; 0x24
 8009c70:	4b04      	ldr	r3, [pc, #16]	; (8009c84 <std+0x3c>)
 8009c72:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c74:	4b04      	ldr	r3, [pc, #16]	; (8009c88 <std+0x40>)
 8009c76:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c78:	4b04      	ldr	r3, [pc, #16]	; (8009c8c <std+0x44>)
 8009c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8009c7c:	bd10      	pop	{r4, pc}
 8009c7e:	bf00      	nop
 8009c80:	0800a5ed 	.word	0x0800a5ed
 8009c84:	0800a60f 	.word	0x0800a60f
 8009c88:	0800a647 	.word	0x0800a647
 8009c8c:	0800a66b 	.word	0x0800a66b

08009c90 <_cleanup_r>:
 8009c90:	4901      	ldr	r1, [pc, #4]	; (8009c98 <_cleanup_r+0x8>)
 8009c92:	f000 b8af 	b.w	8009df4 <_fwalk_reent>
 8009c96:	bf00      	nop
 8009c98:	0800a93d 	.word	0x0800a93d

08009c9c <__sfmoreglue>:
 8009c9c:	2268      	movs	r2, #104	; 0x68
 8009c9e:	b570      	push	{r4, r5, r6, lr}
 8009ca0:	1e4d      	subs	r5, r1, #1
 8009ca2:	4355      	muls	r5, r2
 8009ca4:	460e      	mov	r6, r1
 8009ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009caa:	f000 f8e5 	bl	8009e78 <_malloc_r>
 8009cae:	4604      	mov	r4, r0
 8009cb0:	b140      	cbz	r0, 8009cc4 <__sfmoreglue+0x28>
 8009cb2:	2100      	movs	r1, #0
 8009cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8009cb8:	300c      	adds	r0, #12
 8009cba:	60a0      	str	r0, [r4, #8]
 8009cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009cc0:	f7ff ff8e 	bl	8009be0 <memset>
 8009cc4:	4620      	mov	r0, r4
 8009cc6:	bd70      	pop	{r4, r5, r6, pc}

08009cc8 <__sfp_lock_acquire>:
 8009cc8:	4801      	ldr	r0, [pc, #4]	; (8009cd0 <__sfp_lock_acquire+0x8>)
 8009cca:	f000 b8b3 	b.w	8009e34 <__retarget_lock_acquire_recursive>
 8009cce:	bf00      	nop
 8009cd0:	200012b9 	.word	0x200012b9

08009cd4 <__sfp_lock_release>:
 8009cd4:	4801      	ldr	r0, [pc, #4]	; (8009cdc <__sfp_lock_release+0x8>)
 8009cd6:	f000 b8ae 	b.w	8009e36 <__retarget_lock_release_recursive>
 8009cda:	bf00      	nop
 8009cdc:	200012b9 	.word	0x200012b9

08009ce0 <__sinit_lock_acquire>:
 8009ce0:	4801      	ldr	r0, [pc, #4]	; (8009ce8 <__sinit_lock_acquire+0x8>)
 8009ce2:	f000 b8a7 	b.w	8009e34 <__retarget_lock_acquire_recursive>
 8009ce6:	bf00      	nop
 8009ce8:	200012ba 	.word	0x200012ba

08009cec <__sinit_lock_release>:
 8009cec:	4801      	ldr	r0, [pc, #4]	; (8009cf4 <__sinit_lock_release+0x8>)
 8009cee:	f000 b8a2 	b.w	8009e36 <__retarget_lock_release_recursive>
 8009cf2:	bf00      	nop
 8009cf4:	200012ba 	.word	0x200012ba

08009cf8 <__sinit>:
 8009cf8:	b510      	push	{r4, lr}
 8009cfa:	4604      	mov	r4, r0
 8009cfc:	f7ff fff0 	bl	8009ce0 <__sinit_lock_acquire>
 8009d00:	69a3      	ldr	r3, [r4, #24]
 8009d02:	b11b      	cbz	r3, 8009d0c <__sinit+0x14>
 8009d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d08:	f7ff bff0 	b.w	8009cec <__sinit_lock_release>
 8009d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009d10:	6523      	str	r3, [r4, #80]	; 0x50
 8009d12:	4b13      	ldr	r3, [pc, #76]	; (8009d60 <__sinit+0x68>)
 8009d14:	4a13      	ldr	r2, [pc, #76]	; (8009d64 <__sinit+0x6c>)
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8009d1a:	42a3      	cmp	r3, r4
 8009d1c:	bf08      	it	eq
 8009d1e:	2301      	moveq	r3, #1
 8009d20:	4620      	mov	r0, r4
 8009d22:	bf08      	it	eq
 8009d24:	61a3      	streq	r3, [r4, #24]
 8009d26:	f000 f81f 	bl	8009d68 <__sfp>
 8009d2a:	6060      	str	r0, [r4, #4]
 8009d2c:	4620      	mov	r0, r4
 8009d2e:	f000 f81b 	bl	8009d68 <__sfp>
 8009d32:	60a0      	str	r0, [r4, #8]
 8009d34:	4620      	mov	r0, r4
 8009d36:	f000 f817 	bl	8009d68 <__sfp>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2104      	movs	r1, #4
 8009d3e:	60e0      	str	r0, [r4, #12]
 8009d40:	6860      	ldr	r0, [r4, #4]
 8009d42:	f7ff ff81 	bl	8009c48 <std>
 8009d46:	2201      	movs	r2, #1
 8009d48:	2109      	movs	r1, #9
 8009d4a:	68a0      	ldr	r0, [r4, #8]
 8009d4c:	f7ff ff7c 	bl	8009c48 <std>
 8009d50:	2202      	movs	r2, #2
 8009d52:	2112      	movs	r1, #18
 8009d54:	68e0      	ldr	r0, [r4, #12]
 8009d56:	f7ff ff77 	bl	8009c48 <std>
 8009d5a:	2301      	movs	r3, #1
 8009d5c:	61a3      	str	r3, [r4, #24]
 8009d5e:	e7d1      	b.n	8009d04 <__sinit+0xc>
 8009d60:	0800acf8 	.word	0x0800acf8
 8009d64:	08009c91 	.word	0x08009c91

08009d68 <__sfp>:
 8009d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d6a:	4607      	mov	r7, r0
 8009d6c:	f7ff ffac 	bl	8009cc8 <__sfp_lock_acquire>
 8009d70:	4b1e      	ldr	r3, [pc, #120]	; (8009dec <__sfp+0x84>)
 8009d72:	681e      	ldr	r6, [r3, #0]
 8009d74:	69b3      	ldr	r3, [r6, #24]
 8009d76:	b913      	cbnz	r3, 8009d7e <__sfp+0x16>
 8009d78:	4630      	mov	r0, r6
 8009d7a:	f7ff ffbd 	bl	8009cf8 <__sinit>
 8009d7e:	3648      	adds	r6, #72	; 0x48
 8009d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009d84:	3b01      	subs	r3, #1
 8009d86:	d503      	bpl.n	8009d90 <__sfp+0x28>
 8009d88:	6833      	ldr	r3, [r6, #0]
 8009d8a:	b30b      	cbz	r3, 8009dd0 <__sfp+0x68>
 8009d8c:	6836      	ldr	r6, [r6, #0]
 8009d8e:	e7f7      	b.n	8009d80 <__sfp+0x18>
 8009d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009d94:	b9d5      	cbnz	r5, 8009dcc <__sfp+0x64>
 8009d96:	4b16      	ldr	r3, [pc, #88]	; (8009df0 <__sfp+0x88>)
 8009d98:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009d9c:	60e3      	str	r3, [r4, #12]
 8009d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8009da0:	f000 f847 	bl	8009e32 <__retarget_lock_init_recursive>
 8009da4:	f7ff ff96 	bl	8009cd4 <__sfp_lock_release>
 8009da8:	2208      	movs	r2, #8
 8009daa:	4629      	mov	r1, r5
 8009dac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009db0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009db4:	6025      	str	r5, [r4, #0]
 8009db6:	61a5      	str	r5, [r4, #24]
 8009db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009dbc:	f7ff ff10 	bl	8009be0 <memset>
 8009dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8009dc8:	4620      	mov	r0, r4
 8009dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009dcc:	3468      	adds	r4, #104	; 0x68
 8009dce:	e7d9      	b.n	8009d84 <__sfp+0x1c>
 8009dd0:	2104      	movs	r1, #4
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	f7ff ff62 	bl	8009c9c <__sfmoreglue>
 8009dd8:	4604      	mov	r4, r0
 8009dda:	6030      	str	r0, [r6, #0]
 8009ddc:	2800      	cmp	r0, #0
 8009dde:	d1d5      	bne.n	8009d8c <__sfp+0x24>
 8009de0:	f7ff ff78 	bl	8009cd4 <__sfp_lock_release>
 8009de4:	230c      	movs	r3, #12
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	e7ee      	b.n	8009dc8 <__sfp+0x60>
 8009dea:	bf00      	nop
 8009dec:	0800acf8 	.word	0x0800acf8
 8009df0:	ffff0001 	.word	0xffff0001

08009df4 <_fwalk_reent>:
 8009df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009df8:	4606      	mov	r6, r0
 8009dfa:	4688      	mov	r8, r1
 8009dfc:	2700      	movs	r7, #0
 8009dfe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009e06:	f1b9 0901 	subs.w	r9, r9, #1
 8009e0a:	d505      	bpl.n	8009e18 <_fwalk_reent+0x24>
 8009e0c:	6824      	ldr	r4, [r4, #0]
 8009e0e:	2c00      	cmp	r4, #0
 8009e10:	d1f7      	bne.n	8009e02 <_fwalk_reent+0xe>
 8009e12:	4638      	mov	r0, r7
 8009e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e18:	89ab      	ldrh	r3, [r5, #12]
 8009e1a:	2b01      	cmp	r3, #1
 8009e1c:	d907      	bls.n	8009e2e <_fwalk_reent+0x3a>
 8009e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009e22:	3301      	adds	r3, #1
 8009e24:	d003      	beq.n	8009e2e <_fwalk_reent+0x3a>
 8009e26:	4629      	mov	r1, r5
 8009e28:	4630      	mov	r0, r6
 8009e2a:	47c0      	blx	r8
 8009e2c:	4307      	orrs	r7, r0
 8009e2e:	3568      	adds	r5, #104	; 0x68
 8009e30:	e7e9      	b.n	8009e06 <_fwalk_reent+0x12>

08009e32 <__retarget_lock_init_recursive>:
 8009e32:	4770      	bx	lr

08009e34 <__retarget_lock_acquire_recursive>:
 8009e34:	4770      	bx	lr

08009e36 <__retarget_lock_release_recursive>:
 8009e36:	4770      	bx	lr

08009e38 <sbrk_aligned>:
 8009e38:	b570      	push	{r4, r5, r6, lr}
 8009e3a:	4e0e      	ldr	r6, [pc, #56]	; (8009e74 <sbrk_aligned+0x3c>)
 8009e3c:	460c      	mov	r4, r1
 8009e3e:	6831      	ldr	r1, [r6, #0]
 8009e40:	4605      	mov	r5, r0
 8009e42:	b911      	cbnz	r1, 8009e4a <sbrk_aligned+0x12>
 8009e44:	f000 fbc2 	bl	800a5cc <_sbrk_r>
 8009e48:	6030      	str	r0, [r6, #0]
 8009e4a:	4621      	mov	r1, r4
 8009e4c:	4628      	mov	r0, r5
 8009e4e:	f000 fbbd 	bl	800a5cc <_sbrk_r>
 8009e52:	1c43      	adds	r3, r0, #1
 8009e54:	d00a      	beq.n	8009e6c <sbrk_aligned+0x34>
 8009e56:	1cc4      	adds	r4, r0, #3
 8009e58:	f024 0403 	bic.w	r4, r4, #3
 8009e5c:	42a0      	cmp	r0, r4
 8009e5e:	d007      	beq.n	8009e70 <sbrk_aligned+0x38>
 8009e60:	1a21      	subs	r1, r4, r0
 8009e62:	4628      	mov	r0, r5
 8009e64:	f000 fbb2 	bl	800a5cc <_sbrk_r>
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d101      	bne.n	8009e70 <sbrk_aligned+0x38>
 8009e6c:	f04f 34ff 	mov.w	r4, #4294967295
 8009e70:	4620      	mov	r0, r4
 8009e72:	bd70      	pop	{r4, r5, r6, pc}
 8009e74:	200012c0 	.word	0x200012c0

08009e78 <_malloc_r>:
 8009e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e7c:	1ccd      	adds	r5, r1, #3
 8009e7e:	f025 0503 	bic.w	r5, r5, #3
 8009e82:	3508      	adds	r5, #8
 8009e84:	2d0c      	cmp	r5, #12
 8009e86:	bf38      	it	cc
 8009e88:	250c      	movcc	r5, #12
 8009e8a:	2d00      	cmp	r5, #0
 8009e8c:	4607      	mov	r7, r0
 8009e8e:	db01      	blt.n	8009e94 <_malloc_r+0x1c>
 8009e90:	42a9      	cmp	r1, r5
 8009e92:	d905      	bls.n	8009ea0 <_malloc_r+0x28>
 8009e94:	230c      	movs	r3, #12
 8009e96:	2600      	movs	r6, #0
 8009e98:	603b      	str	r3, [r7, #0]
 8009e9a:	4630      	mov	r0, r6
 8009e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ea0:	4e2e      	ldr	r6, [pc, #184]	; (8009f5c <_malloc_r+0xe4>)
 8009ea2:	f000 fe0d 	bl	800aac0 <__malloc_lock>
 8009ea6:	6833      	ldr	r3, [r6, #0]
 8009ea8:	461c      	mov	r4, r3
 8009eaa:	bb34      	cbnz	r4, 8009efa <_malloc_r+0x82>
 8009eac:	4629      	mov	r1, r5
 8009eae:	4638      	mov	r0, r7
 8009eb0:	f7ff ffc2 	bl	8009e38 <sbrk_aligned>
 8009eb4:	1c43      	adds	r3, r0, #1
 8009eb6:	4604      	mov	r4, r0
 8009eb8:	d14d      	bne.n	8009f56 <_malloc_r+0xde>
 8009eba:	6834      	ldr	r4, [r6, #0]
 8009ebc:	4626      	mov	r6, r4
 8009ebe:	2e00      	cmp	r6, #0
 8009ec0:	d140      	bne.n	8009f44 <_malloc_r+0xcc>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	4631      	mov	r1, r6
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	eb04 0803 	add.w	r8, r4, r3
 8009ecc:	f000 fb7e 	bl	800a5cc <_sbrk_r>
 8009ed0:	4580      	cmp	r8, r0
 8009ed2:	d13a      	bne.n	8009f4a <_malloc_r+0xd2>
 8009ed4:	6821      	ldr	r1, [r4, #0]
 8009ed6:	3503      	adds	r5, #3
 8009ed8:	1a6d      	subs	r5, r5, r1
 8009eda:	f025 0503 	bic.w	r5, r5, #3
 8009ede:	3508      	adds	r5, #8
 8009ee0:	2d0c      	cmp	r5, #12
 8009ee2:	bf38      	it	cc
 8009ee4:	250c      	movcc	r5, #12
 8009ee6:	4638      	mov	r0, r7
 8009ee8:	4629      	mov	r1, r5
 8009eea:	f7ff ffa5 	bl	8009e38 <sbrk_aligned>
 8009eee:	3001      	adds	r0, #1
 8009ef0:	d02b      	beq.n	8009f4a <_malloc_r+0xd2>
 8009ef2:	6823      	ldr	r3, [r4, #0]
 8009ef4:	442b      	add	r3, r5
 8009ef6:	6023      	str	r3, [r4, #0]
 8009ef8:	e00e      	b.n	8009f18 <_malloc_r+0xa0>
 8009efa:	6822      	ldr	r2, [r4, #0]
 8009efc:	1b52      	subs	r2, r2, r5
 8009efe:	d41e      	bmi.n	8009f3e <_malloc_r+0xc6>
 8009f00:	2a0b      	cmp	r2, #11
 8009f02:	d916      	bls.n	8009f32 <_malloc_r+0xba>
 8009f04:	1961      	adds	r1, r4, r5
 8009f06:	42a3      	cmp	r3, r4
 8009f08:	6025      	str	r5, [r4, #0]
 8009f0a:	bf18      	it	ne
 8009f0c:	6059      	strne	r1, [r3, #4]
 8009f0e:	6863      	ldr	r3, [r4, #4]
 8009f10:	bf08      	it	eq
 8009f12:	6031      	streq	r1, [r6, #0]
 8009f14:	5162      	str	r2, [r4, r5]
 8009f16:	604b      	str	r3, [r1, #4]
 8009f18:	4638      	mov	r0, r7
 8009f1a:	f104 060b 	add.w	r6, r4, #11
 8009f1e:	f000 fdd5 	bl	800aacc <__malloc_unlock>
 8009f22:	f026 0607 	bic.w	r6, r6, #7
 8009f26:	1d23      	adds	r3, r4, #4
 8009f28:	1af2      	subs	r2, r6, r3
 8009f2a:	d0b6      	beq.n	8009e9a <_malloc_r+0x22>
 8009f2c:	1b9b      	subs	r3, r3, r6
 8009f2e:	50a3      	str	r3, [r4, r2]
 8009f30:	e7b3      	b.n	8009e9a <_malloc_r+0x22>
 8009f32:	6862      	ldr	r2, [r4, #4]
 8009f34:	42a3      	cmp	r3, r4
 8009f36:	bf0c      	ite	eq
 8009f38:	6032      	streq	r2, [r6, #0]
 8009f3a:	605a      	strne	r2, [r3, #4]
 8009f3c:	e7ec      	b.n	8009f18 <_malloc_r+0xa0>
 8009f3e:	4623      	mov	r3, r4
 8009f40:	6864      	ldr	r4, [r4, #4]
 8009f42:	e7b2      	b.n	8009eaa <_malloc_r+0x32>
 8009f44:	4634      	mov	r4, r6
 8009f46:	6876      	ldr	r6, [r6, #4]
 8009f48:	e7b9      	b.n	8009ebe <_malloc_r+0x46>
 8009f4a:	230c      	movs	r3, #12
 8009f4c:	4638      	mov	r0, r7
 8009f4e:	603b      	str	r3, [r7, #0]
 8009f50:	f000 fdbc 	bl	800aacc <__malloc_unlock>
 8009f54:	e7a1      	b.n	8009e9a <_malloc_r+0x22>
 8009f56:	6025      	str	r5, [r4, #0]
 8009f58:	e7de      	b.n	8009f18 <_malloc_r+0xa0>
 8009f5a:	bf00      	nop
 8009f5c:	200012bc 	.word	0x200012bc

08009f60 <__sfputc_r>:
 8009f60:	6893      	ldr	r3, [r2, #8]
 8009f62:	b410      	push	{r4}
 8009f64:	3b01      	subs	r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	6093      	str	r3, [r2, #8]
 8009f6a:	da07      	bge.n	8009f7c <__sfputc_r+0x1c>
 8009f6c:	6994      	ldr	r4, [r2, #24]
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	db01      	blt.n	8009f76 <__sfputc_r+0x16>
 8009f72:	290a      	cmp	r1, #10
 8009f74:	d102      	bne.n	8009f7c <__sfputc_r+0x1c>
 8009f76:	bc10      	pop	{r4}
 8009f78:	f000 bb7c 	b.w	800a674 <__swbuf_r>
 8009f7c:	6813      	ldr	r3, [r2, #0]
 8009f7e:	1c58      	adds	r0, r3, #1
 8009f80:	6010      	str	r0, [r2, #0]
 8009f82:	7019      	strb	r1, [r3, #0]
 8009f84:	4608      	mov	r0, r1
 8009f86:	bc10      	pop	{r4}
 8009f88:	4770      	bx	lr

08009f8a <__sfputs_r>:
 8009f8a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f8c:	4606      	mov	r6, r0
 8009f8e:	460f      	mov	r7, r1
 8009f90:	4614      	mov	r4, r2
 8009f92:	18d5      	adds	r5, r2, r3
 8009f94:	42ac      	cmp	r4, r5
 8009f96:	d101      	bne.n	8009f9c <__sfputs_r+0x12>
 8009f98:	2000      	movs	r0, #0
 8009f9a:	e007      	b.n	8009fac <__sfputs_r+0x22>
 8009f9c:	463a      	mov	r2, r7
 8009f9e:	4630      	mov	r0, r6
 8009fa0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009fa4:	f7ff ffdc 	bl	8009f60 <__sfputc_r>
 8009fa8:	1c43      	adds	r3, r0, #1
 8009faa:	d1f3      	bne.n	8009f94 <__sfputs_r+0xa>
 8009fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fb0 <_vfiprintf_r>:
 8009fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb4:	460d      	mov	r5, r1
 8009fb6:	4614      	mov	r4, r2
 8009fb8:	4698      	mov	r8, r3
 8009fba:	4606      	mov	r6, r0
 8009fbc:	b09d      	sub	sp, #116	; 0x74
 8009fbe:	b118      	cbz	r0, 8009fc8 <_vfiprintf_r+0x18>
 8009fc0:	6983      	ldr	r3, [r0, #24]
 8009fc2:	b90b      	cbnz	r3, 8009fc8 <_vfiprintf_r+0x18>
 8009fc4:	f7ff fe98 	bl	8009cf8 <__sinit>
 8009fc8:	4b89      	ldr	r3, [pc, #548]	; (800a1f0 <_vfiprintf_r+0x240>)
 8009fca:	429d      	cmp	r5, r3
 8009fcc:	d11b      	bne.n	800a006 <_vfiprintf_r+0x56>
 8009fce:	6875      	ldr	r5, [r6, #4]
 8009fd0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009fd2:	07d9      	lsls	r1, r3, #31
 8009fd4:	d405      	bmi.n	8009fe2 <_vfiprintf_r+0x32>
 8009fd6:	89ab      	ldrh	r3, [r5, #12]
 8009fd8:	059a      	lsls	r2, r3, #22
 8009fda:	d402      	bmi.n	8009fe2 <_vfiprintf_r+0x32>
 8009fdc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009fde:	f7ff ff29 	bl	8009e34 <__retarget_lock_acquire_recursive>
 8009fe2:	89ab      	ldrh	r3, [r5, #12]
 8009fe4:	071b      	lsls	r3, r3, #28
 8009fe6:	d501      	bpl.n	8009fec <_vfiprintf_r+0x3c>
 8009fe8:	692b      	ldr	r3, [r5, #16]
 8009fea:	b9eb      	cbnz	r3, 800a028 <_vfiprintf_r+0x78>
 8009fec:	4629      	mov	r1, r5
 8009fee:	4630      	mov	r0, r6
 8009ff0:	f000 fba4 	bl	800a73c <__swsetup_r>
 8009ff4:	b1c0      	cbz	r0, 800a028 <_vfiprintf_r+0x78>
 8009ff6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009ff8:	07dc      	lsls	r4, r3, #31
 8009ffa:	d50e      	bpl.n	800a01a <_vfiprintf_r+0x6a>
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	b01d      	add	sp, #116	; 0x74
 800a002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a006:	4b7b      	ldr	r3, [pc, #492]	; (800a1f4 <_vfiprintf_r+0x244>)
 800a008:	429d      	cmp	r5, r3
 800a00a:	d101      	bne.n	800a010 <_vfiprintf_r+0x60>
 800a00c:	68b5      	ldr	r5, [r6, #8]
 800a00e:	e7df      	b.n	8009fd0 <_vfiprintf_r+0x20>
 800a010:	4b79      	ldr	r3, [pc, #484]	; (800a1f8 <_vfiprintf_r+0x248>)
 800a012:	429d      	cmp	r5, r3
 800a014:	bf08      	it	eq
 800a016:	68f5      	ldreq	r5, [r6, #12]
 800a018:	e7da      	b.n	8009fd0 <_vfiprintf_r+0x20>
 800a01a:	89ab      	ldrh	r3, [r5, #12]
 800a01c:	0598      	lsls	r0, r3, #22
 800a01e:	d4ed      	bmi.n	8009ffc <_vfiprintf_r+0x4c>
 800a020:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a022:	f7ff ff08 	bl	8009e36 <__retarget_lock_release_recursive>
 800a026:	e7e9      	b.n	8009ffc <_vfiprintf_r+0x4c>
 800a028:	2300      	movs	r3, #0
 800a02a:	9309      	str	r3, [sp, #36]	; 0x24
 800a02c:	2320      	movs	r3, #32
 800a02e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a032:	2330      	movs	r3, #48	; 0x30
 800a034:	f04f 0901 	mov.w	r9, #1
 800a038:	f8cd 800c 	str.w	r8, [sp, #12]
 800a03c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800a1fc <_vfiprintf_r+0x24c>
 800a040:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a044:	4623      	mov	r3, r4
 800a046:	469a      	mov	sl, r3
 800a048:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a04c:	b10a      	cbz	r2, 800a052 <_vfiprintf_r+0xa2>
 800a04e:	2a25      	cmp	r2, #37	; 0x25
 800a050:	d1f9      	bne.n	800a046 <_vfiprintf_r+0x96>
 800a052:	ebba 0b04 	subs.w	fp, sl, r4
 800a056:	d00b      	beq.n	800a070 <_vfiprintf_r+0xc0>
 800a058:	465b      	mov	r3, fp
 800a05a:	4622      	mov	r2, r4
 800a05c:	4629      	mov	r1, r5
 800a05e:	4630      	mov	r0, r6
 800a060:	f7ff ff93 	bl	8009f8a <__sfputs_r>
 800a064:	3001      	adds	r0, #1
 800a066:	f000 80aa 	beq.w	800a1be <_vfiprintf_r+0x20e>
 800a06a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a06c:	445a      	add	r2, fp
 800a06e:	9209      	str	r2, [sp, #36]	; 0x24
 800a070:	f89a 3000 	ldrb.w	r3, [sl]
 800a074:	2b00      	cmp	r3, #0
 800a076:	f000 80a2 	beq.w	800a1be <_vfiprintf_r+0x20e>
 800a07a:	2300      	movs	r3, #0
 800a07c:	f04f 32ff 	mov.w	r2, #4294967295
 800a080:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a084:	f10a 0a01 	add.w	sl, sl, #1
 800a088:	9304      	str	r3, [sp, #16]
 800a08a:	9307      	str	r3, [sp, #28]
 800a08c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a090:	931a      	str	r3, [sp, #104]	; 0x68
 800a092:	4654      	mov	r4, sl
 800a094:	2205      	movs	r2, #5
 800a096:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a09a:	4858      	ldr	r0, [pc, #352]	; (800a1fc <_vfiprintf_r+0x24c>)
 800a09c:	f000 fd02 	bl	800aaa4 <memchr>
 800a0a0:	9a04      	ldr	r2, [sp, #16]
 800a0a2:	b9d8      	cbnz	r0, 800a0dc <_vfiprintf_r+0x12c>
 800a0a4:	06d1      	lsls	r1, r2, #27
 800a0a6:	bf44      	itt	mi
 800a0a8:	2320      	movmi	r3, #32
 800a0aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0ae:	0713      	lsls	r3, r2, #28
 800a0b0:	bf44      	itt	mi
 800a0b2:	232b      	movmi	r3, #43	; 0x2b
 800a0b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a0b8:	f89a 3000 	ldrb.w	r3, [sl]
 800a0bc:	2b2a      	cmp	r3, #42	; 0x2a
 800a0be:	d015      	beq.n	800a0ec <_vfiprintf_r+0x13c>
 800a0c0:	4654      	mov	r4, sl
 800a0c2:	2000      	movs	r0, #0
 800a0c4:	f04f 0c0a 	mov.w	ip, #10
 800a0c8:	9a07      	ldr	r2, [sp, #28]
 800a0ca:	4621      	mov	r1, r4
 800a0cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0d0:	3b30      	subs	r3, #48	; 0x30
 800a0d2:	2b09      	cmp	r3, #9
 800a0d4:	d94e      	bls.n	800a174 <_vfiprintf_r+0x1c4>
 800a0d6:	b1b0      	cbz	r0, 800a106 <_vfiprintf_r+0x156>
 800a0d8:	9207      	str	r2, [sp, #28]
 800a0da:	e014      	b.n	800a106 <_vfiprintf_r+0x156>
 800a0dc:	eba0 0308 	sub.w	r3, r0, r8
 800a0e0:	fa09 f303 	lsl.w	r3, r9, r3
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	46a2      	mov	sl, r4
 800a0e8:	9304      	str	r3, [sp, #16]
 800a0ea:	e7d2      	b.n	800a092 <_vfiprintf_r+0xe2>
 800a0ec:	9b03      	ldr	r3, [sp, #12]
 800a0ee:	1d19      	adds	r1, r3, #4
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	9103      	str	r1, [sp, #12]
 800a0f4:	2b00      	cmp	r3, #0
 800a0f6:	bfbb      	ittet	lt
 800a0f8:	425b      	neglt	r3, r3
 800a0fa:	f042 0202 	orrlt.w	r2, r2, #2
 800a0fe:	9307      	strge	r3, [sp, #28]
 800a100:	9307      	strlt	r3, [sp, #28]
 800a102:	bfb8      	it	lt
 800a104:	9204      	strlt	r2, [sp, #16]
 800a106:	7823      	ldrb	r3, [r4, #0]
 800a108:	2b2e      	cmp	r3, #46	; 0x2e
 800a10a:	d10c      	bne.n	800a126 <_vfiprintf_r+0x176>
 800a10c:	7863      	ldrb	r3, [r4, #1]
 800a10e:	2b2a      	cmp	r3, #42	; 0x2a
 800a110:	d135      	bne.n	800a17e <_vfiprintf_r+0x1ce>
 800a112:	9b03      	ldr	r3, [sp, #12]
 800a114:	3402      	adds	r4, #2
 800a116:	1d1a      	adds	r2, r3, #4
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	9203      	str	r2, [sp, #12]
 800a11c:	2b00      	cmp	r3, #0
 800a11e:	bfb8      	it	lt
 800a120:	f04f 33ff 	movlt.w	r3, #4294967295
 800a124:	9305      	str	r3, [sp, #20]
 800a126:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800a200 <_vfiprintf_r+0x250>
 800a12a:	2203      	movs	r2, #3
 800a12c:	4650      	mov	r0, sl
 800a12e:	7821      	ldrb	r1, [r4, #0]
 800a130:	f000 fcb8 	bl	800aaa4 <memchr>
 800a134:	b140      	cbz	r0, 800a148 <_vfiprintf_r+0x198>
 800a136:	2340      	movs	r3, #64	; 0x40
 800a138:	eba0 000a 	sub.w	r0, r0, sl
 800a13c:	fa03 f000 	lsl.w	r0, r3, r0
 800a140:	9b04      	ldr	r3, [sp, #16]
 800a142:	3401      	adds	r4, #1
 800a144:	4303      	orrs	r3, r0
 800a146:	9304      	str	r3, [sp, #16]
 800a148:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a14c:	2206      	movs	r2, #6
 800a14e:	482d      	ldr	r0, [pc, #180]	; (800a204 <_vfiprintf_r+0x254>)
 800a150:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a154:	f000 fca6 	bl	800aaa4 <memchr>
 800a158:	2800      	cmp	r0, #0
 800a15a:	d03f      	beq.n	800a1dc <_vfiprintf_r+0x22c>
 800a15c:	4b2a      	ldr	r3, [pc, #168]	; (800a208 <_vfiprintf_r+0x258>)
 800a15e:	bb1b      	cbnz	r3, 800a1a8 <_vfiprintf_r+0x1f8>
 800a160:	9b03      	ldr	r3, [sp, #12]
 800a162:	3307      	adds	r3, #7
 800a164:	f023 0307 	bic.w	r3, r3, #7
 800a168:	3308      	adds	r3, #8
 800a16a:	9303      	str	r3, [sp, #12]
 800a16c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a16e:	443b      	add	r3, r7
 800a170:	9309      	str	r3, [sp, #36]	; 0x24
 800a172:	e767      	b.n	800a044 <_vfiprintf_r+0x94>
 800a174:	460c      	mov	r4, r1
 800a176:	2001      	movs	r0, #1
 800a178:	fb0c 3202 	mla	r2, ip, r2, r3
 800a17c:	e7a5      	b.n	800a0ca <_vfiprintf_r+0x11a>
 800a17e:	2300      	movs	r3, #0
 800a180:	f04f 0c0a 	mov.w	ip, #10
 800a184:	4619      	mov	r1, r3
 800a186:	3401      	adds	r4, #1
 800a188:	9305      	str	r3, [sp, #20]
 800a18a:	4620      	mov	r0, r4
 800a18c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a190:	3a30      	subs	r2, #48	; 0x30
 800a192:	2a09      	cmp	r2, #9
 800a194:	d903      	bls.n	800a19e <_vfiprintf_r+0x1ee>
 800a196:	2b00      	cmp	r3, #0
 800a198:	d0c5      	beq.n	800a126 <_vfiprintf_r+0x176>
 800a19a:	9105      	str	r1, [sp, #20]
 800a19c:	e7c3      	b.n	800a126 <_vfiprintf_r+0x176>
 800a19e:	4604      	mov	r4, r0
 800a1a0:	2301      	movs	r3, #1
 800a1a2:	fb0c 2101 	mla	r1, ip, r1, r2
 800a1a6:	e7f0      	b.n	800a18a <_vfiprintf_r+0x1da>
 800a1a8:	ab03      	add	r3, sp, #12
 800a1aa:	9300      	str	r3, [sp, #0]
 800a1ac:	462a      	mov	r2, r5
 800a1ae:	4630      	mov	r0, r6
 800a1b0:	4b16      	ldr	r3, [pc, #88]	; (800a20c <_vfiprintf_r+0x25c>)
 800a1b2:	a904      	add	r1, sp, #16
 800a1b4:	f3af 8000 	nop.w
 800a1b8:	4607      	mov	r7, r0
 800a1ba:	1c78      	adds	r0, r7, #1
 800a1bc:	d1d6      	bne.n	800a16c <_vfiprintf_r+0x1bc>
 800a1be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a1c0:	07d9      	lsls	r1, r3, #31
 800a1c2:	d405      	bmi.n	800a1d0 <_vfiprintf_r+0x220>
 800a1c4:	89ab      	ldrh	r3, [r5, #12]
 800a1c6:	059a      	lsls	r2, r3, #22
 800a1c8:	d402      	bmi.n	800a1d0 <_vfiprintf_r+0x220>
 800a1ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a1cc:	f7ff fe33 	bl	8009e36 <__retarget_lock_release_recursive>
 800a1d0:	89ab      	ldrh	r3, [r5, #12]
 800a1d2:	065b      	lsls	r3, r3, #25
 800a1d4:	f53f af12 	bmi.w	8009ffc <_vfiprintf_r+0x4c>
 800a1d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a1da:	e711      	b.n	800a000 <_vfiprintf_r+0x50>
 800a1dc:	ab03      	add	r3, sp, #12
 800a1de:	9300      	str	r3, [sp, #0]
 800a1e0:	462a      	mov	r2, r5
 800a1e2:	4630      	mov	r0, r6
 800a1e4:	4b09      	ldr	r3, [pc, #36]	; (800a20c <_vfiprintf_r+0x25c>)
 800a1e6:	a904      	add	r1, sp, #16
 800a1e8:	f000 f882 	bl	800a2f0 <_printf_i>
 800a1ec:	e7e4      	b.n	800a1b8 <_vfiprintf_r+0x208>
 800a1ee:	bf00      	nop
 800a1f0:	0800ad1c 	.word	0x0800ad1c
 800a1f4:	0800ad3c 	.word	0x0800ad3c
 800a1f8:	0800acfc 	.word	0x0800acfc
 800a1fc:	0800ad5c 	.word	0x0800ad5c
 800a200:	0800ad62 	.word	0x0800ad62
 800a204:	0800ad66 	.word	0x0800ad66
 800a208:	00000000 	.word	0x00000000
 800a20c:	08009f8b 	.word	0x08009f8b

0800a210 <_printf_common>:
 800a210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a214:	4616      	mov	r6, r2
 800a216:	4699      	mov	r9, r3
 800a218:	688a      	ldr	r2, [r1, #8]
 800a21a:	690b      	ldr	r3, [r1, #16]
 800a21c:	4607      	mov	r7, r0
 800a21e:	4293      	cmp	r3, r2
 800a220:	bfb8      	it	lt
 800a222:	4613      	movlt	r3, r2
 800a224:	6033      	str	r3, [r6, #0]
 800a226:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a22a:	460c      	mov	r4, r1
 800a22c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a230:	b10a      	cbz	r2, 800a236 <_printf_common+0x26>
 800a232:	3301      	adds	r3, #1
 800a234:	6033      	str	r3, [r6, #0]
 800a236:	6823      	ldr	r3, [r4, #0]
 800a238:	0699      	lsls	r1, r3, #26
 800a23a:	bf42      	ittt	mi
 800a23c:	6833      	ldrmi	r3, [r6, #0]
 800a23e:	3302      	addmi	r3, #2
 800a240:	6033      	strmi	r3, [r6, #0]
 800a242:	6825      	ldr	r5, [r4, #0]
 800a244:	f015 0506 	ands.w	r5, r5, #6
 800a248:	d106      	bne.n	800a258 <_printf_common+0x48>
 800a24a:	f104 0a19 	add.w	sl, r4, #25
 800a24e:	68e3      	ldr	r3, [r4, #12]
 800a250:	6832      	ldr	r2, [r6, #0]
 800a252:	1a9b      	subs	r3, r3, r2
 800a254:	42ab      	cmp	r3, r5
 800a256:	dc28      	bgt.n	800a2aa <_printf_common+0x9a>
 800a258:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a25c:	1e13      	subs	r3, r2, #0
 800a25e:	6822      	ldr	r2, [r4, #0]
 800a260:	bf18      	it	ne
 800a262:	2301      	movne	r3, #1
 800a264:	0692      	lsls	r2, r2, #26
 800a266:	d42d      	bmi.n	800a2c4 <_printf_common+0xb4>
 800a268:	4649      	mov	r1, r9
 800a26a:	4638      	mov	r0, r7
 800a26c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a270:	47c0      	blx	r8
 800a272:	3001      	adds	r0, #1
 800a274:	d020      	beq.n	800a2b8 <_printf_common+0xa8>
 800a276:	6823      	ldr	r3, [r4, #0]
 800a278:	68e5      	ldr	r5, [r4, #12]
 800a27a:	f003 0306 	and.w	r3, r3, #6
 800a27e:	2b04      	cmp	r3, #4
 800a280:	bf18      	it	ne
 800a282:	2500      	movne	r5, #0
 800a284:	6832      	ldr	r2, [r6, #0]
 800a286:	f04f 0600 	mov.w	r6, #0
 800a28a:	68a3      	ldr	r3, [r4, #8]
 800a28c:	bf08      	it	eq
 800a28e:	1aad      	subeq	r5, r5, r2
 800a290:	6922      	ldr	r2, [r4, #16]
 800a292:	bf08      	it	eq
 800a294:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a298:	4293      	cmp	r3, r2
 800a29a:	bfc4      	itt	gt
 800a29c:	1a9b      	subgt	r3, r3, r2
 800a29e:	18ed      	addgt	r5, r5, r3
 800a2a0:	341a      	adds	r4, #26
 800a2a2:	42b5      	cmp	r5, r6
 800a2a4:	d11a      	bne.n	800a2dc <_printf_common+0xcc>
 800a2a6:	2000      	movs	r0, #0
 800a2a8:	e008      	b.n	800a2bc <_printf_common+0xac>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	4652      	mov	r2, sl
 800a2ae:	4649      	mov	r1, r9
 800a2b0:	4638      	mov	r0, r7
 800a2b2:	47c0      	blx	r8
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d103      	bne.n	800a2c0 <_printf_common+0xb0>
 800a2b8:	f04f 30ff 	mov.w	r0, #4294967295
 800a2bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a2c0:	3501      	adds	r5, #1
 800a2c2:	e7c4      	b.n	800a24e <_printf_common+0x3e>
 800a2c4:	2030      	movs	r0, #48	; 0x30
 800a2c6:	18e1      	adds	r1, r4, r3
 800a2c8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a2cc:	1c5a      	adds	r2, r3, #1
 800a2ce:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a2d2:	4422      	add	r2, r4
 800a2d4:	3302      	adds	r3, #2
 800a2d6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a2da:	e7c5      	b.n	800a268 <_printf_common+0x58>
 800a2dc:	2301      	movs	r3, #1
 800a2de:	4622      	mov	r2, r4
 800a2e0:	4649      	mov	r1, r9
 800a2e2:	4638      	mov	r0, r7
 800a2e4:	47c0      	blx	r8
 800a2e6:	3001      	adds	r0, #1
 800a2e8:	d0e6      	beq.n	800a2b8 <_printf_common+0xa8>
 800a2ea:	3601      	adds	r6, #1
 800a2ec:	e7d9      	b.n	800a2a2 <_printf_common+0x92>
	...

0800a2f0 <_printf_i>:
 800a2f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a2f4:	7e0f      	ldrb	r7, [r1, #24]
 800a2f6:	4691      	mov	r9, r2
 800a2f8:	2f78      	cmp	r7, #120	; 0x78
 800a2fa:	4680      	mov	r8, r0
 800a2fc:	460c      	mov	r4, r1
 800a2fe:	469a      	mov	sl, r3
 800a300:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a302:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a306:	d807      	bhi.n	800a318 <_printf_i+0x28>
 800a308:	2f62      	cmp	r7, #98	; 0x62
 800a30a:	d80a      	bhi.n	800a322 <_printf_i+0x32>
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	f000 80d9 	beq.w	800a4c4 <_printf_i+0x1d4>
 800a312:	2f58      	cmp	r7, #88	; 0x58
 800a314:	f000 80a4 	beq.w	800a460 <_printf_i+0x170>
 800a318:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a31c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a320:	e03a      	b.n	800a398 <_printf_i+0xa8>
 800a322:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a326:	2b15      	cmp	r3, #21
 800a328:	d8f6      	bhi.n	800a318 <_printf_i+0x28>
 800a32a:	a101      	add	r1, pc, #4	; (adr r1, 800a330 <_printf_i+0x40>)
 800a32c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a330:	0800a389 	.word	0x0800a389
 800a334:	0800a39d 	.word	0x0800a39d
 800a338:	0800a319 	.word	0x0800a319
 800a33c:	0800a319 	.word	0x0800a319
 800a340:	0800a319 	.word	0x0800a319
 800a344:	0800a319 	.word	0x0800a319
 800a348:	0800a39d 	.word	0x0800a39d
 800a34c:	0800a319 	.word	0x0800a319
 800a350:	0800a319 	.word	0x0800a319
 800a354:	0800a319 	.word	0x0800a319
 800a358:	0800a319 	.word	0x0800a319
 800a35c:	0800a4ab 	.word	0x0800a4ab
 800a360:	0800a3cd 	.word	0x0800a3cd
 800a364:	0800a48d 	.word	0x0800a48d
 800a368:	0800a319 	.word	0x0800a319
 800a36c:	0800a319 	.word	0x0800a319
 800a370:	0800a4cd 	.word	0x0800a4cd
 800a374:	0800a319 	.word	0x0800a319
 800a378:	0800a3cd 	.word	0x0800a3cd
 800a37c:	0800a319 	.word	0x0800a319
 800a380:	0800a319 	.word	0x0800a319
 800a384:	0800a495 	.word	0x0800a495
 800a388:	682b      	ldr	r3, [r5, #0]
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	602a      	str	r2, [r5, #0]
 800a390:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a398:	2301      	movs	r3, #1
 800a39a:	e0a4      	b.n	800a4e6 <_printf_i+0x1f6>
 800a39c:	6820      	ldr	r0, [r4, #0]
 800a39e:	6829      	ldr	r1, [r5, #0]
 800a3a0:	0606      	lsls	r6, r0, #24
 800a3a2:	f101 0304 	add.w	r3, r1, #4
 800a3a6:	d50a      	bpl.n	800a3be <_printf_i+0xce>
 800a3a8:	680e      	ldr	r6, [r1, #0]
 800a3aa:	602b      	str	r3, [r5, #0]
 800a3ac:	2e00      	cmp	r6, #0
 800a3ae:	da03      	bge.n	800a3b8 <_printf_i+0xc8>
 800a3b0:	232d      	movs	r3, #45	; 0x2d
 800a3b2:	4276      	negs	r6, r6
 800a3b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a3b8:	230a      	movs	r3, #10
 800a3ba:	485e      	ldr	r0, [pc, #376]	; (800a534 <_printf_i+0x244>)
 800a3bc:	e019      	b.n	800a3f2 <_printf_i+0x102>
 800a3be:	680e      	ldr	r6, [r1, #0]
 800a3c0:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	bf18      	it	ne
 800a3c8:	b236      	sxthne	r6, r6
 800a3ca:	e7ef      	b.n	800a3ac <_printf_i+0xbc>
 800a3cc:	682b      	ldr	r3, [r5, #0]
 800a3ce:	6820      	ldr	r0, [r4, #0]
 800a3d0:	1d19      	adds	r1, r3, #4
 800a3d2:	6029      	str	r1, [r5, #0]
 800a3d4:	0601      	lsls	r1, r0, #24
 800a3d6:	d501      	bpl.n	800a3dc <_printf_i+0xec>
 800a3d8:	681e      	ldr	r6, [r3, #0]
 800a3da:	e002      	b.n	800a3e2 <_printf_i+0xf2>
 800a3dc:	0646      	lsls	r6, r0, #25
 800a3de:	d5fb      	bpl.n	800a3d8 <_printf_i+0xe8>
 800a3e0:	881e      	ldrh	r6, [r3, #0]
 800a3e2:	2f6f      	cmp	r7, #111	; 0x6f
 800a3e4:	bf0c      	ite	eq
 800a3e6:	2308      	moveq	r3, #8
 800a3e8:	230a      	movne	r3, #10
 800a3ea:	4852      	ldr	r0, [pc, #328]	; (800a534 <_printf_i+0x244>)
 800a3ec:	2100      	movs	r1, #0
 800a3ee:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a3f2:	6865      	ldr	r5, [r4, #4]
 800a3f4:	2d00      	cmp	r5, #0
 800a3f6:	bfa8      	it	ge
 800a3f8:	6821      	ldrge	r1, [r4, #0]
 800a3fa:	60a5      	str	r5, [r4, #8]
 800a3fc:	bfa4      	itt	ge
 800a3fe:	f021 0104 	bicge.w	r1, r1, #4
 800a402:	6021      	strge	r1, [r4, #0]
 800a404:	b90e      	cbnz	r6, 800a40a <_printf_i+0x11a>
 800a406:	2d00      	cmp	r5, #0
 800a408:	d04d      	beq.n	800a4a6 <_printf_i+0x1b6>
 800a40a:	4615      	mov	r5, r2
 800a40c:	fbb6 f1f3 	udiv	r1, r6, r3
 800a410:	fb03 6711 	mls	r7, r3, r1, r6
 800a414:	5dc7      	ldrb	r7, [r0, r7]
 800a416:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a41a:	4637      	mov	r7, r6
 800a41c:	42bb      	cmp	r3, r7
 800a41e:	460e      	mov	r6, r1
 800a420:	d9f4      	bls.n	800a40c <_printf_i+0x11c>
 800a422:	2b08      	cmp	r3, #8
 800a424:	d10b      	bne.n	800a43e <_printf_i+0x14e>
 800a426:	6823      	ldr	r3, [r4, #0]
 800a428:	07de      	lsls	r6, r3, #31
 800a42a:	d508      	bpl.n	800a43e <_printf_i+0x14e>
 800a42c:	6923      	ldr	r3, [r4, #16]
 800a42e:	6861      	ldr	r1, [r4, #4]
 800a430:	4299      	cmp	r1, r3
 800a432:	bfde      	ittt	le
 800a434:	2330      	movle	r3, #48	; 0x30
 800a436:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a43a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a43e:	1b52      	subs	r2, r2, r5
 800a440:	6122      	str	r2, [r4, #16]
 800a442:	464b      	mov	r3, r9
 800a444:	4621      	mov	r1, r4
 800a446:	4640      	mov	r0, r8
 800a448:	f8cd a000 	str.w	sl, [sp]
 800a44c:	aa03      	add	r2, sp, #12
 800a44e:	f7ff fedf 	bl	800a210 <_printf_common>
 800a452:	3001      	adds	r0, #1
 800a454:	d14c      	bne.n	800a4f0 <_printf_i+0x200>
 800a456:	f04f 30ff 	mov.w	r0, #4294967295
 800a45a:	b004      	add	sp, #16
 800a45c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a460:	4834      	ldr	r0, [pc, #208]	; (800a534 <_printf_i+0x244>)
 800a462:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a466:	6829      	ldr	r1, [r5, #0]
 800a468:	6823      	ldr	r3, [r4, #0]
 800a46a:	f851 6b04 	ldr.w	r6, [r1], #4
 800a46e:	6029      	str	r1, [r5, #0]
 800a470:	061d      	lsls	r5, r3, #24
 800a472:	d514      	bpl.n	800a49e <_printf_i+0x1ae>
 800a474:	07df      	lsls	r7, r3, #31
 800a476:	bf44      	itt	mi
 800a478:	f043 0320 	orrmi.w	r3, r3, #32
 800a47c:	6023      	strmi	r3, [r4, #0]
 800a47e:	b91e      	cbnz	r6, 800a488 <_printf_i+0x198>
 800a480:	6823      	ldr	r3, [r4, #0]
 800a482:	f023 0320 	bic.w	r3, r3, #32
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	2310      	movs	r3, #16
 800a48a:	e7af      	b.n	800a3ec <_printf_i+0xfc>
 800a48c:	6823      	ldr	r3, [r4, #0]
 800a48e:	f043 0320 	orr.w	r3, r3, #32
 800a492:	6023      	str	r3, [r4, #0]
 800a494:	2378      	movs	r3, #120	; 0x78
 800a496:	4828      	ldr	r0, [pc, #160]	; (800a538 <_printf_i+0x248>)
 800a498:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a49c:	e7e3      	b.n	800a466 <_printf_i+0x176>
 800a49e:	0659      	lsls	r1, r3, #25
 800a4a0:	bf48      	it	mi
 800a4a2:	b2b6      	uxthmi	r6, r6
 800a4a4:	e7e6      	b.n	800a474 <_printf_i+0x184>
 800a4a6:	4615      	mov	r5, r2
 800a4a8:	e7bb      	b.n	800a422 <_printf_i+0x132>
 800a4aa:	682b      	ldr	r3, [r5, #0]
 800a4ac:	6826      	ldr	r6, [r4, #0]
 800a4ae:	1d18      	adds	r0, r3, #4
 800a4b0:	6961      	ldr	r1, [r4, #20]
 800a4b2:	6028      	str	r0, [r5, #0]
 800a4b4:	0635      	lsls	r5, r6, #24
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	d501      	bpl.n	800a4be <_printf_i+0x1ce>
 800a4ba:	6019      	str	r1, [r3, #0]
 800a4bc:	e002      	b.n	800a4c4 <_printf_i+0x1d4>
 800a4be:	0670      	lsls	r0, r6, #25
 800a4c0:	d5fb      	bpl.n	800a4ba <_printf_i+0x1ca>
 800a4c2:	8019      	strh	r1, [r3, #0]
 800a4c4:	2300      	movs	r3, #0
 800a4c6:	4615      	mov	r5, r2
 800a4c8:	6123      	str	r3, [r4, #16]
 800a4ca:	e7ba      	b.n	800a442 <_printf_i+0x152>
 800a4cc:	682b      	ldr	r3, [r5, #0]
 800a4ce:	2100      	movs	r1, #0
 800a4d0:	1d1a      	adds	r2, r3, #4
 800a4d2:	602a      	str	r2, [r5, #0]
 800a4d4:	681d      	ldr	r5, [r3, #0]
 800a4d6:	6862      	ldr	r2, [r4, #4]
 800a4d8:	4628      	mov	r0, r5
 800a4da:	f000 fae3 	bl	800aaa4 <memchr>
 800a4de:	b108      	cbz	r0, 800a4e4 <_printf_i+0x1f4>
 800a4e0:	1b40      	subs	r0, r0, r5
 800a4e2:	6060      	str	r0, [r4, #4]
 800a4e4:	6863      	ldr	r3, [r4, #4]
 800a4e6:	6123      	str	r3, [r4, #16]
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4ee:	e7a8      	b.n	800a442 <_printf_i+0x152>
 800a4f0:	462a      	mov	r2, r5
 800a4f2:	4649      	mov	r1, r9
 800a4f4:	4640      	mov	r0, r8
 800a4f6:	6923      	ldr	r3, [r4, #16]
 800a4f8:	47d0      	blx	sl
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d0ab      	beq.n	800a456 <_printf_i+0x166>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	079b      	lsls	r3, r3, #30
 800a502:	d413      	bmi.n	800a52c <_printf_i+0x23c>
 800a504:	68e0      	ldr	r0, [r4, #12]
 800a506:	9b03      	ldr	r3, [sp, #12]
 800a508:	4298      	cmp	r0, r3
 800a50a:	bfb8      	it	lt
 800a50c:	4618      	movlt	r0, r3
 800a50e:	e7a4      	b.n	800a45a <_printf_i+0x16a>
 800a510:	2301      	movs	r3, #1
 800a512:	4632      	mov	r2, r6
 800a514:	4649      	mov	r1, r9
 800a516:	4640      	mov	r0, r8
 800a518:	47d0      	blx	sl
 800a51a:	3001      	adds	r0, #1
 800a51c:	d09b      	beq.n	800a456 <_printf_i+0x166>
 800a51e:	3501      	adds	r5, #1
 800a520:	68e3      	ldr	r3, [r4, #12]
 800a522:	9903      	ldr	r1, [sp, #12]
 800a524:	1a5b      	subs	r3, r3, r1
 800a526:	42ab      	cmp	r3, r5
 800a528:	dcf2      	bgt.n	800a510 <_printf_i+0x220>
 800a52a:	e7eb      	b.n	800a504 <_printf_i+0x214>
 800a52c:	2500      	movs	r5, #0
 800a52e:	f104 0619 	add.w	r6, r4, #25
 800a532:	e7f5      	b.n	800a520 <_printf_i+0x230>
 800a534:	0800ad6d 	.word	0x0800ad6d
 800a538:	0800ad7e 	.word	0x0800ad7e

0800a53c <_putc_r>:
 800a53c:	b570      	push	{r4, r5, r6, lr}
 800a53e:	460d      	mov	r5, r1
 800a540:	4614      	mov	r4, r2
 800a542:	4606      	mov	r6, r0
 800a544:	b118      	cbz	r0, 800a54e <_putc_r+0x12>
 800a546:	6983      	ldr	r3, [r0, #24]
 800a548:	b90b      	cbnz	r3, 800a54e <_putc_r+0x12>
 800a54a:	f7ff fbd5 	bl	8009cf8 <__sinit>
 800a54e:	4b1c      	ldr	r3, [pc, #112]	; (800a5c0 <_putc_r+0x84>)
 800a550:	429c      	cmp	r4, r3
 800a552:	d124      	bne.n	800a59e <_putc_r+0x62>
 800a554:	6874      	ldr	r4, [r6, #4]
 800a556:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a558:	07d8      	lsls	r0, r3, #31
 800a55a:	d405      	bmi.n	800a568 <_putc_r+0x2c>
 800a55c:	89a3      	ldrh	r3, [r4, #12]
 800a55e:	0599      	lsls	r1, r3, #22
 800a560:	d402      	bmi.n	800a568 <_putc_r+0x2c>
 800a562:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a564:	f7ff fc66 	bl	8009e34 <__retarget_lock_acquire_recursive>
 800a568:	68a3      	ldr	r3, [r4, #8]
 800a56a:	3b01      	subs	r3, #1
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	60a3      	str	r3, [r4, #8]
 800a570:	da05      	bge.n	800a57e <_putc_r+0x42>
 800a572:	69a2      	ldr	r2, [r4, #24]
 800a574:	4293      	cmp	r3, r2
 800a576:	db1c      	blt.n	800a5b2 <_putc_r+0x76>
 800a578:	b2eb      	uxtb	r3, r5
 800a57a:	2b0a      	cmp	r3, #10
 800a57c:	d019      	beq.n	800a5b2 <_putc_r+0x76>
 800a57e:	6823      	ldr	r3, [r4, #0]
 800a580:	1c5a      	adds	r2, r3, #1
 800a582:	6022      	str	r2, [r4, #0]
 800a584:	701d      	strb	r5, [r3, #0]
 800a586:	b2ed      	uxtb	r5, r5
 800a588:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a58a:	07da      	lsls	r2, r3, #31
 800a58c:	d405      	bmi.n	800a59a <_putc_r+0x5e>
 800a58e:	89a3      	ldrh	r3, [r4, #12]
 800a590:	059b      	lsls	r3, r3, #22
 800a592:	d402      	bmi.n	800a59a <_putc_r+0x5e>
 800a594:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a596:	f7ff fc4e 	bl	8009e36 <__retarget_lock_release_recursive>
 800a59a:	4628      	mov	r0, r5
 800a59c:	bd70      	pop	{r4, r5, r6, pc}
 800a59e:	4b09      	ldr	r3, [pc, #36]	; (800a5c4 <_putc_r+0x88>)
 800a5a0:	429c      	cmp	r4, r3
 800a5a2:	d101      	bne.n	800a5a8 <_putc_r+0x6c>
 800a5a4:	68b4      	ldr	r4, [r6, #8]
 800a5a6:	e7d6      	b.n	800a556 <_putc_r+0x1a>
 800a5a8:	4b07      	ldr	r3, [pc, #28]	; (800a5c8 <_putc_r+0x8c>)
 800a5aa:	429c      	cmp	r4, r3
 800a5ac:	bf08      	it	eq
 800a5ae:	68f4      	ldreq	r4, [r6, #12]
 800a5b0:	e7d1      	b.n	800a556 <_putc_r+0x1a>
 800a5b2:	4629      	mov	r1, r5
 800a5b4:	4622      	mov	r2, r4
 800a5b6:	4630      	mov	r0, r6
 800a5b8:	f000 f85c 	bl	800a674 <__swbuf_r>
 800a5bc:	4605      	mov	r5, r0
 800a5be:	e7e3      	b.n	800a588 <_putc_r+0x4c>
 800a5c0:	0800ad1c 	.word	0x0800ad1c
 800a5c4:	0800ad3c 	.word	0x0800ad3c
 800a5c8:	0800acfc 	.word	0x0800acfc

0800a5cc <_sbrk_r>:
 800a5cc:	b538      	push	{r3, r4, r5, lr}
 800a5ce:	2300      	movs	r3, #0
 800a5d0:	4d05      	ldr	r5, [pc, #20]	; (800a5e8 <_sbrk_r+0x1c>)
 800a5d2:	4604      	mov	r4, r0
 800a5d4:	4608      	mov	r0, r1
 800a5d6:	602b      	str	r3, [r5, #0]
 800a5d8:	f7f6 f9d8 	bl	800098c <_sbrk>
 800a5dc:	1c43      	adds	r3, r0, #1
 800a5de:	d102      	bne.n	800a5e6 <_sbrk_r+0x1a>
 800a5e0:	682b      	ldr	r3, [r5, #0]
 800a5e2:	b103      	cbz	r3, 800a5e6 <_sbrk_r+0x1a>
 800a5e4:	6023      	str	r3, [r4, #0]
 800a5e6:	bd38      	pop	{r3, r4, r5, pc}
 800a5e8:	200012c4 	.word	0x200012c4

0800a5ec <__sread>:
 800a5ec:	b510      	push	{r4, lr}
 800a5ee:	460c      	mov	r4, r1
 800a5f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a5f4:	f000 fab8 	bl	800ab68 <_read_r>
 800a5f8:	2800      	cmp	r0, #0
 800a5fa:	bfab      	itete	ge
 800a5fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a5fe:	89a3      	ldrhlt	r3, [r4, #12]
 800a600:	181b      	addge	r3, r3, r0
 800a602:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a606:	bfac      	ite	ge
 800a608:	6563      	strge	r3, [r4, #84]	; 0x54
 800a60a:	81a3      	strhlt	r3, [r4, #12]
 800a60c:	bd10      	pop	{r4, pc}

0800a60e <__swrite>:
 800a60e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a612:	461f      	mov	r7, r3
 800a614:	898b      	ldrh	r3, [r1, #12]
 800a616:	4605      	mov	r5, r0
 800a618:	05db      	lsls	r3, r3, #23
 800a61a:	460c      	mov	r4, r1
 800a61c:	4616      	mov	r6, r2
 800a61e:	d505      	bpl.n	800a62c <__swrite+0x1e>
 800a620:	2302      	movs	r3, #2
 800a622:	2200      	movs	r2, #0
 800a624:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a628:	f000 f9c4 	bl	800a9b4 <_lseek_r>
 800a62c:	89a3      	ldrh	r3, [r4, #12]
 800a62e:	4632      	mov	r2, r6
 800a630:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a634:	81a3      	strh	r3, [r4, #12]
 800a636:	4628      	mov	r0, r5
 800a638:	463b      	mov	r3, r7
 800a63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a63e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a642:	f000 b869 	b.w	800a718 <_write_r>

0800a646 <__sseek>:
 800a646:	b510      	push	{r4, lr}
 800a648:	460c      	mov	r4, r1
 800a64a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a64e:	f000 f9b1 	bl	800a9b4 <_lseek_r>
 800a652:	1c43      	adds	r3, r0, #1
 800a654:	89a3      	ldrh	r3, [r4, #12]
 800a656:	bf15      	itete	ne
 800a658:	6560      	strne	r0, [r4, #84]	; 0x54
 800a65a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a65e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a662:	81a3      	strheq	r3, [r4, #12]
 800a664:	bf18      	it	ne
 800a666:	81a3      	strhne	r3, [r4, #12]
 800a668:	bd10      	pop	{r4, pc}

0800a66a <__sclose>:
 800a66a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a66e:	f000 b8d3 	b.w	800a818 <_close_r>
	...

0800a674 <__swbuf_r>:
 800a674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a676:	460e      	mov	r6, r1
 800a678:	4614      	mov	r4, r2
 800a67a:	4605      	mov	r5, r0
 800a67c:	b118      	cbz	r0, 800a686 <__swbuf_r+0x12>
 800a67e:	6983      	ldr	r3, [r0, #24]
 800a680:	b90b      	cbnz	r3, 800a686 <__swbuf_r+0x12>
 800a682:	f7ff fb39 	bl	8009cf8 <__sinit>
 800a686:	4b21      	ldr	r3, [pc, #132]	; (800a70c <__swbuf_r+0x98>)
 800a688:	429c      	cmp	r4, r3
 800a68a:	d12b      	bne.n	800a6e4 <__swbuf_r+0x70>
 800a68c:	686c      	ldr	r4, [r5, #4]
 800a68e:	69a3      	ldr	r3, [r4, #24]
 800a690:	60a3      	str	r3, [r4, #8]
 800a692:	89a3      	ldrh	r3, [r4, #12]
 800a694:	071a      	lsls	r2, r3, #28
 800a696:	d52f      	bpl.n	800a6f8 <__swbuf_r+0x84>
 800a698:	6923      	ldr	r3, [r4, #16]
 800a69a:	b36b      	cbz	r3, 800a6f8 <__swbuf_r+0x84>
 800a69c:	6923      	ldr	r3, [r4, #16]
 800a69e:	6820      	ldr	r0, [r4, #0]
 800a6a0:	b2f6      	uxtb	r6, r6
 800a6a2:	1ac0      	subs	r0, r0, r3
 800a6a4:	6963      	ldr	r3, [r4, #20]
 800a6a6:	4637      	mov	r7, r6
 800a6a8:	4283      	cmp	r3, r0
 800a6aa:	dc04      	bgt.n	800a6b6 <__swbuf_r+0x42>
 800a6ac:	4621      	mov	r1, r4
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	f000 f944 	bl	800a93c <_fflush_r>
 800a6b4:	bb30      	cbnz	r0, 800a704 <__swbuf_r+0x90>
 800a6b6:	68a3      	ldr	r3, [r4, #8]
 800a6b8:	3001      	adds	r0, #1
 800a6ba:	3b01      	subs	r3, #1
 800a6bc:	60a3      	str	r3, [r4, #8]
 800a6be:	6823      	ldr	r3, [r4, #0]
 800a6c0:	1c5a      	adds	r2, r3, #1
 800a6c2:	6022      	str	r2, [r4, #0]
 800a6c4:	701e      	strb	r6, [r3, #0]
 800a6c6:	6963      	ldr	r3, [r4, #20]
 800a6c8:	4283      	cmp	r3, r0
 800a6ca:	d004      	beq.n	800a6d6 <__swbuf_r+0x62>
 800a6cc:	89a3      	ldrh	r3, [r4, #12]
 800a6ce:	07db      	lsls	r3, r3, #31
 800a6d0:	d506      	bpl.n	800a6e0 <__swbuf_r+0x6c>
 800a6d2:	2e0a      	cmp	r6, #10
 800a6d4:	d104      	bne.n	800a6e0 <__swbuf_r+0x6c>
 800a6d6:	4621      	mov	r1, r4
 800a6d8:	4628      	mov	r0, r5
 800a6da:	f000 f92f 	bl	800a93c <_fflush_r>
 800a6de:	b988      	cbnz	r0, 800a704 <__swbuf_r+0x90>
 800a6e0:	4638      	mov	r0, r7
 800a6e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a6e4:	4b0a      	ldr	r3, [pc, #40]	; (800a710 <__swbuf_r+0x9c>)
 800a6e6:	429c      	cmp	r4, r3
 800a6e8:	d101      	bne.n	800a6ee <__swbuf_r+0x7a>
 800a6ea:	68ac      	ldr	r4, [r5, #8]
 800a6ec:	e7cf      	b.n	800a68e <__swbuf_r+0x1a>
 800a6ee:	4b09      	ldr	r3, [pc, #36]	; (800a714 <__swbuf_r+0xa0>)
 800a6f0:	429c      	cmp	r4, r3
 800a6f2:	bf08      	it	eq
 800a6f4:	68ec      	ldreq	r4, [r5, #12]
 800a6f6:	e7ca      	b.n	800a68e <__swbuf_r+0x1a>
 800a6f8:	4621      	mov	r1, r4
 800a6fa:	4628      	mov	r0, r5
 800a6fc:	f000 f81e 	bl	800a73c <__swsetup_r>
 800a700:	2800      	cmp	r0, #0
 800a702:	d0cb      	beq.n	800a69c <__swbuf_r+0x28>
 800a704:	f04f 37ff 	mov.w	r7, #4294967295
 800a708:	e7ea      	b.n	800a6e0 <__swbuf_r+0x6c>
 800a70a:	bf00      	nop
 800a70c:	0800ad1c 	.word	0x0800ad1c
 800a710:	0800ad3c 	.word	0x0800ad3c
 800a714:	0800acfc 	.word	0x0800acfc

0800a718 <_write_r>:
 800a718:	b538      	push	{r3, r4, r5, lr}
 800a71a:	4604      	mov	r4, r0
 800a71c:	4608      	mov	r0, r1
 800a71e:	4611      	mov	r1, r2
 800a720:	2200      	movs	r2, #0
 800a722:	4d05      	ldr	r5, [pc, #20]	; (800a738 <_write_r+0x20>)
 800a724:	602a      	str	r2, [r5, #0]
 800a726:	461a      	mov	r2, r3
 800a728:	f7f6 f8e3 	bl	80008f2 <_write>
 800a72c:	1c43      	adds	r3, r0, #1
 800a72e:	d102      	bne.n	800a736 <_write_r+0x1e>
 800a730:	682b      	ldr	r3, [r5, #0]
 800a732:	b103      	cbz	r3, 800a736 <_write_r+0x1e>
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	bd38      	pop	{r3, r4, r5, pc}
 800a738:	200012c4 	.word	0x200012c4

0800a73c <__swsetup_r>:
 800a73c:	4b32      	ldr	r3, [pc, #200]	; (800a808 <__swsetup_r+0xcc>)
 800a73e:	b570      	push	{r4, r5, r6, lr}
 800a740:	681d      	ldr	r5, [r3, #0]
 800a742:	4606      	mov	r6, r0
 800a744:	460c      	mov	r4, r1
 800a746:	b125      	cbz	r5, 800a752 <__swsetup_r+0x16>
 800a748:	69ab      	ldr	r3, [r5, #24]
 800a74a:	b913      	cbnz	r3, 800a752 <__swsetup_r+0x16>
 800a74c:	4628      	mov	r0, r5
 800a74e:	f7ff fad3 	bl	8009cf8 <__sinit>
 800a752:	4b2e      	ldr	r3, [pc, #184]	; (800a80c <__swsetup_r+0xd0>)
 800a754:	429c      	cmp	r4, r3
 800a756:	d10f      	bne.n	800a778 <__swsetup_r+0x3c>
 800a758:	686c      	ldr	r4, [r5, #4]
 800a75a:	89a3      	ldrh	r3, [r4, #12]
 800a75c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a760:	0719      	lsls	r1, r3, #28
 800a762:	d42c      	bmi.n	800a7be <__swsetup_r+0x82>
 800a764:	06dd      	lsls	r5, r3, #27
 800a766:	d411      	bmi.n	800a78c <__swsetup_r+0x50>
 800a768:	2309      	movs	r3, #9
 800a76a:	6033      	str	r3, [r6, #0]
 800a76c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a770:	f04f 30ff 	mov.w	r0, #4294967295
 800a774:	81a3      	strh	r3, [r4, #12]
 800a776:	e03e      	b.n	800a7f6 <__swsetup_r+0xba>
 800a778:	4b25      	ldr	r3, [pc, #148]	; (800a810 <__swsetup_r+0xd4>)
 800a77a:	429c      	cmp	r4, r3
 800a77c:	d101      	bne.n	800a782 <__swsetup_r+0x46>
 800a77e:	68ac      	ldr	r4, [r5, #8]
 800a780:	e7eb      	b.n	800a75a <__swsetup_r+0x1e>
 800a782:	4b24      	ldr	r3, [pc, #144]	; (800a814 <__swsetup_r+0xd8>)
 800a784:	429c      	cmp	r4, r3
 800a786:	bf08      	it	eq
 800a788:	68ec      	ldreq	r4, [r5, #12]
 800a78a:	e7e6      	b.n	800a75a <__swsetup_r+0x1e>
 800a78c:	0758      	lsls	r0, r3, #29
 800a78e:	d512      	bpl.n	800a7b6 <__swsetup_r+0x7a>
 800a790:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a792:	b141      	cbz	r1, 800a7a6 <__swsetup_r+0x6a>
 800a794:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a798:	4299      	cmp	r1, r3
 800a79a:	d002      	beq.n	800a7a2 <__swsetup_r+0x66>
 800a79c:	4630      	mov	r0, r6
 800a79e:	f000 f99b 	bl	800aad8 <_free_r>
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	6363      	str	r3, [r4, #52]	; 0x34
 800a7a6:	89a3      	ldrh	r3, [r4, #12]
 800a7a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a7ac:	81a3      	strh	r3, [r4, #12]
 800a7ae:	2300      	movs	r3, #0
 800a7b0:	6063      	str	r3, [r4, #4]
 800a7b2:	6923      	ldr	r3, [r4, #16]
 800a7b4:	6023      	str	r3, [r4, #0]
 800a7b6:	89a3      	ldrh	r3, [r4, #12]
 800a7b8:	f043 0308 	orr.w	r3, r3, #8
 800a7bc:	81a3      	strh	r3, [r4, #12]
 800a7be:	6923      	ldr	r3, [r4, #16]
 800a7c0:	b94b      	cbnz	r3, 800a7d6 <__swsetup_r+0x9a>
 800a7c2:	89a3      	ldrh	r3, [r4, #12]
 800a7c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a7c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a7cc:	d003      	beq.n	800a7d6 <__swsetup_r+0x9a>
 800a7ce:	4621      	mov	r1, r4
 800a7d0:	4630      	mov	r0, r6
 800a7d2:	f000 f927 	bl	800aa24 <__smakebuf_r>
 800a7d6:	89a0      	ldrh	r0, [r4, #12]
 800a7d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a7dc:	f010 0301 	ands.w	r3, r0, #1
 800a7e0:	d00a      	beq.n	800a7f8 <__swsetup_r+0xbc>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	60a3      	str	r3, [r4, #8]
 800a7e6:	6963      	ldr	r3, [r4, #20]
 800a7e8:	425b      	negs	r3, r3
 800a7ea:	61a3      	str	r3, [r4, #24]
 800a7ec:	6923      	ldr	r3, [r4, #16]
 800a7ee:	b943      	cbnz	r3, 800a802 <__swsetup_r+0xc6>
 800a7f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a7f4:	d1ba      	bne.n	800a76c <__swsetup_r+0x30>
 800a7f6:	bd70      	pop	{r4, r5, r6, pc}
 800a7f8:	0781      	lsls	r1, r0, #30
 800a7fa:	bf58      	it	pl
 800a7fc:	6963      	ldrpl	r3, [r4, #20]
 800a7fe:	60a3      	str	r3, [r4, #8]
 800a800:	e7f4      	b.n	800a7ec <__swsetup_r+0xb0>
 800a802:	2000      	movs	r0, #0
 800a804:	e7f7      	b.n	800a7f6 <__swsetup_r+0xba>
 800a806:	bf00      	nop
 800a808:	20000120 	.word	0x20000120
 800a80c:	0800ad1c 	.word	0x0800ad1c
 800a810:	0800ad3c 	.word	0x0800ad3c
 800a814:	0800acfc 	.word	0x0800acfc

0800a818 <_close_r>:
 800a818:	b538      	push	{r3, r4, r5, lr}
 800a81a:	2300      	movs	r3, #0
 800a81c:	4d05      	ldr	r5, [pc, #20]	; (800a834 <_close_r+0x1c>)
 800a81e:	4604      	mov	r4, r0
 800a820:	4608      	mov	r0, r1
 800a822:	602b      	str	r3, [r5, #0]
 800a824:	f7f6 f881 	bl	800092a <_close>
 800a828:	1c43      	adds	r3, r0, #1
 800a82a:	d102      	bne.n	800a832 <_close_r+0x1a>
 800a82c:	682b      	ldr	r3, [r5, #0]
 800a82e:	b103      	cbz	r3, 800a832 <_close_r+0x1a>
 800a830:	6023      	str	r3, [r4, #0]
 800a832:	bd38      	pop	{r3, r4, r5, pc}
 800a834:	200012c4 	.word	0x200012c4

0800a838 <__sflush_r>:
 800a838:	898a      	ldrh	r2, [r1, #12]
 800a83a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a83c:	4605      	mov	r5, r0
 800a83e:	0710      	lsls	r0, r2, #28
 800a840:	460c      	mov	r4, r1
 800a842:	d457      	bmi.n	800a8f4 <__sflush_r+0xbc>
 800a844:	684b      	ldr	r3, [r1, #4]
 800a846:	2b00      	cmp	r3, #0
 800a848:	dc04      	bgt.n	800a854 <__sflush_r+0x1c>
 800a84a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	dc01      	bgt.n	800a854 <__sflush_r+0x1c>
 800a850:	2000      	movs	r0, #0
 800a852:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a854:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a856:	2e00      	cmp	r6, #0
 800a858:	d0fa      	beq.n	800a850 <__sflush_r+0x18>
 800a85a:	2300      	movs	r3, #0
 800a85c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a860:	682f      	ldr	r7, [r5, #0]
 800a862:	602b      	str	r3, [r5, #0]
 800a864:	d032      	beq.n	800a8cc <__sflush_r+0x94>
 800a866:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a868:	89a3      	ldrh	r3, [r4, #12]
 800a86a:	075a      	lsls	r2, r3, #29
 800a86c:	d505      	bpl.n	800a87a <__sflush_r+0x42>
 800a86e:	6863      	ldr	r3, [r4, #4]
 800a870:	1ac0      	subs	r0, r0, r3
 800a872:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a874:	b10b      	cbz	r3, 800a87a <__sflush_r+0x42>
 800a876:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a878:	1ac0      	subs	r0, r0, r3
 800a87a:	2300      	movs	r3, #0
 800a87c:	4602      	mov	r2, r0
 800a87e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a880:	4628      	mov	r0, r5
 800a882:	6a21      	ldr	r1, [r4, #32]
 800a884:	47b0      	blx	r6
 800a886:	1c43      	adds	r3, r0, #1
 800a888:	89a3      	ldrh	r3, [r4, #12]
 800a88a:	d106      	bne.n	800a89a <__sflush_r+0x62>
 800a88c:	6829      	ldr	r1, [r5, #0]
 800a88e:	291d      	cmp	r1, #29
 800a890:	d82c      	bhi.n	800a8ec <__sflush_r+0xb4>
 800a892:	4a29      	ldr	r2, [pc, #164]	; (800a938 <__sflush_r+0x100>)
 800a894:	40ca      	lsrs	r2, r1
 800a896:	07d6      	lsls	r6, r2, #31
 800a898:	d528      	bpl.n	800a8ec <__sflush_r+0xb4>
 800a89a:	2200      	movs	r2, #0
 800a89c:	6062      	str	r2, [r4, #4]
 800a89e:	6922      	ldr	r2, [r4, #16]
 800a8a0:	04d9      	lsls	r1, r3, #19
 800a8a2:	6022      	str	r2, [r4, #0]
 800a8a4:	d504      	bpl.n	800a8b0 <__sflush_r+0x78>
 800a8a6:	1c42      	adds	r2, r0, #1
 800a8a8:	d101      	bne.n	800a8ae <__sflush_r+0x76>
 800a8aa:	682b      	ldr	r3, [r5, #0]
 800a8ac:	b903      	cbnz	r3, 800a8b0 <__sflush_r+0x78>
 800a8ae:	6560      	str	r0, [r4, #84]	; 0x54
 800a8b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a8b2:	602f      	str	r7, [r5, #0]
 800a8b4:	2900      	cmp	r1, #0
 800a8b6:	d0cb      	beq.n	800a850 <__sflush_r+0x18>
 800a8b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a8bc:	4299      	cmp	r1, r3
 800a8be:	d002      	beq.n	800a8c6 <__sflush_r+0x8e>
 800a8c0:	4628      	mov	r0, r5
 800a8c2:	f000 f909 	bl	800aad8 <_free_r>
 800a8c6:	2000      	movs	r0, #0
 800a8c8:	6360      	str	r0, [r4, #52]	; 0x34
 800a8ca:	e7c2      	b.n	800a852 <__sflush_r+0x1a>
 800a8cc:	6a21      	ldr	r1, [r4, #32]
 800a8ce:	2301      	movs	r3, #1
 800a8d0:	4628      	mov	r0, r5
 800a8d2:	47b0      	blx	r6
 800a8d4:	1c41      	adds	r1, r0, #1
 800a8d6:	d1c7      	bne.n	800a868 <__sflush_r+0x30>
 800a8d8:	682b      	ldr	r3, [r5, #0]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	d0c4      	beq.n	800a868 <__sflush_r+0x30>
 800a8de:	2b1d      	cmp	r3, #29
 800a8e0:	d001      	beq.n	800a8e6 <__sflush_r+0xae>
 800a8e2:	2b16      	cmp	r3, #22
 800a8e4:	d101      	bne.n	800a8ea <__sflush_r+0xb2>
 800a8e6:	602f      	str	r7, [r5, #0]
 800a8e8:	e7b2      	b.n	800a850 <__sflush_r+0x18>
 800a8ea:	89a3      	ldrh	r3, [r4, #12]
 800a8ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a8f0:	81a3      	strh	r3, [r4, #12]
 800a8f2:	e7ae      	b.n	800a852 <__sflush_r+0x1a>
 800a8f4:	690f      	ldr	r7, [r1, #16]
 800a8f6:	2f00      	cmp	r7, #0
 800a8f8:	d0aa      	beq.n	800a850 <__sflush_r+0x18>
 800a8fa:	0793      	lsls	r3, r2, #30
 800a8fc:	bf18      	it	ne
 800a8fe:	2300      	movne	r3, #0
 800a900:	680e      	ldr	r6, [r1, #0]
 800a902:	bf08      	it	eq
 800a904:	694b      	ldreq	r3, [r1, #20]
 800a906:	1bf6      	subs	r6, r6, r7
 800a908:	600f      	str	r7, [r1, #0]
 800a90a:	608b      	str	r3, [r1, #8]
 800a90c:	2e00      	cmp	r6, #0
 800a90e:	dd9f      	ble.n	800a850 <__sflush_r+0x18>
 800a910:	4633      	mov	r3, r6
 800a912:	463a      	mov	r2, r7
 800a914:	4628      	mov	r0, r5
 800a916:	6a21      	ldr	r1, [r4, #32]
 800a918:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800a91c:	47e0      	blx	ip
 800a91e:	2800      	cmp	r0, #0
 800a920:	dc06      	bgt.n	800a930 <__sflush_r+0xf8>
 800a922:	89a3      	ldrh	r3, [r4, #12]
 800a924:	f04f 30ff 	mov.w	r0, #4294967295
 800a928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a92c:	81a3      	strh	r3, [r4, #12]
 800a92e:	e790      	b.n	800a852 <__sflush_r+0x1a>
 800a930:	4407      	add	r7, r0
 800a932:	1a36      	subs	r6, r6, r0
 800a934:	e7ea      	b.n	800a90c <__sflush_r+0xd4>
 800a936:	bf00      	nop
 800a938:	20400001 	.word	0x20400001

0800a93c <_fflush_r>:
 800a93c:	b538      	push	{r3, r4, r5, lr}
 800a93e:	690b      	ldr	r3, [r1, #16]
 800a940:	4605      	mov	r5, r0
 800a942:	460c      	mov	r4, r1
 800a944:	b913      	cbnz	r3, 800a94c <_fflush_r+0x10>
 800a946:	2500      	movs	r5, #0
 800a948:	4628      	mov	r0, r5
 800a94a:	bd38      	pop	{r3, r4, r5, pc}
 800a94c:	b118      	cbz	r0, 800a956 <_fflush_r+0x1a>
 800a94e:	6983      	ldr	r3, [r0, #24]
 800a950:	b90b      	cbnz	r3, 800a956 <_fflush_r+0x1a>
 800a952:	f7ff f9d1 	bl	8009cf8 <__sinit>
 800a956:	4b14      	ldr	r3, [pc, #80]	; (800a9a8 <_fflush_r+0x6c>)
 800a958:	429c      	cmp	r4, r3
 800a95a:	d11b      	bne.n	800a994 <_fflush_r+0x58>
 800a95c:	686c      	ldr	r4, [r5, #4]
 800a95e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d0ef      	beq.n	800a946 <_fflush_r+0xa>
 800a966:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a968:	07d0      	lsls	r0, r2, #31
 800a96a:	d404      	bmi.n	800a976 <_fflush_r+0x3a>
 800a96c:	0599      	lsls	r1, r3, #22
 800a96e:	d402      	bmi.n	800a976 <_fflush_r+0x3a>
 800a970:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a972:	f7ff fa5f 	bl	8009e34 <__retarget_lock_acquire_recursive>
 800a976:	4628      	mov	r0, r5
 800a978:	4621      	mov	r1, r4
 800a97a:	f7ff ff5d 	bl	800a838 <__sflush_r>
 800a97e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a980:	4605      	mov	r5, r0
 800a982:	07da      	lsls	r2, r3, #31
 800a984:	d4e0      	bmi.n	800a948 <_fflush_r+0xc>
 800a986:	89a3      	ldrh	r3, [r4, #12]
 800a988:	059b      	lsls	r3, r3, #22
 800a98a:	d4dd      	bmi.n	800a948 <_fflush_r+0xc>
 800a98c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a98e:	f7ff fa52 	bl	8009e36 <__retarget_lock_release_recursive>
 800a992:	e7d9      	b.n	800a948 <_fflush_r+0xc>
 800a994:	4b05      	ldr	r3, [pc, #20]	; (800a9ac <_fflush_r+0x70>)
 800a996:	429c      	cmp	r4, r3
 800a998:	d101      	bne.n	800a99e <_fflush_r+0x62>
 800a99a:	68ac      	ldr	r4, [r5, #8]
 800a99c:	e7df      	b.n	800a95e <_fflush_r+0x22>
 800a99e:	4b04      	ldr	r3, [pc, #16]	; (800a9b0 <_fflush_r+0x74>)
 800a9a0:	429c      	cmp	r4, r3
 800a9a2:	bf08      	it	eq
 800a9a4:	68ec      	ldreq	r4, [r5, #12]
 800a9a6:	e7da      	b.n	800a95e <_fflush_r+0x22>
 800a9a8:	0800ad1c 	.word	0x0800ad1c
 800a9ac:	0800ad3c 	.word	0x0800ad3c
 800a9b0:	0800acfc 	.word	0x0800acfc

0800a9b4 <_lseek_r>:
 800a9b4:	b538      	push	{r3, r4, r5, lr}
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4608      	mov	r0, r1
 800a9ba:	4611      	mov	r1, r2
 800a9bc:	2200      	movs	r2, #0
 800a9be:	4d05      	ldr	r5, [pc, #20]	; (800a9d4 <_lseek_r+0x20>)
 800a9c0:	602a      	str	r2, [r5, #0]
 800a9c2:	461a      	mov	r2, r3
 800a9c4:	f7f5 ffd5 	bl	8000972 <_lseek>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_lseek_r+0x1e>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_lseek_r+0x1e>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	200012c4 	.word	0x200012c4

0800a9d8 <__swhatbuf_r>:
 800a9d8:	b570      	push	{r4, r5, r6, lr}
 800a9da:	460e      	mov	r6, r1
 800a9dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e0:	4614      	mov	r4, r2
 800a9e2:	2900      	cmp	r1, #0
 800a9e4:	461d      	mov	r5, r3
 800a9e6:	b096      	sub	sp, #88	; 0x58
 800a9e8:	da08      	bge.n	800a9fc <__swhatbuf_r+0x24>
 800a9ea:	2200      	movs	r2, #0
 800a9ec:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a9f0:	602a      	str	r2, [r5, #0]
 800a9f2:	061a      	lsls	r2, r3, #24
 800a9f4:	d410      	bmi.n	800aa18 <__swhatbuf_r+0x40>
 800a9f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a9fa:	e00e      	b.n	800aa1a <__swhatbuf_r+0x42>
 800a9fc:	466a      	mov	r2, sp
 800a9fe:	f000 f8c5 	bl	800ab8c <_fstat_r>
 800aa02:	2800      	cmp	r0, #0
 800aa04:	dbf1      	blt.n	800a9ea <__swhatbuf_r+0x12>
 800aa06:	9a01      	ldr	r2, [sp, #4]
 800aa08:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800aa0c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800aa10:	425a      	negs	r2, r3
 800aa12:	415a      	adcs	r2, r3
 800aa14:	602a      	str	r2, [r5, #0]
 800aa16:	e7ee      	b.n	800a9f6 <__swhatbuf_r+0x1e>
 800aa18:	2340      	movs	r3, #64	; 0x40
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	6023      	str	r3, [r4, #0]
 800aa1e:	b016      	add	sp, #88	; 0x58
 800aa20:	bd70      	pop	{r4, r5, r6, pc}
	...

0800aa24 <__smakebuf_r>:
 800aa24:	898b      	ldrh	r3, [r1, #12]
 800aa26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800aa28:	079d      	lsls	r5, r3, #30
 800aa2a:	4606      	mov	r6, r0
 800aa2c:	460c      	mov	r4, r1
 800aa2e:	d507      	bpl.n	800aa40 <__smakebuf_r+0x1c>
 800aa30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800aa34:	6023      	str	r3, [r4, #0]
 800aa36:	6123      	str	r3, [r4, #16]
 800aa38:	2301      	movs	r3, #1
 800aa3a:	6163      	str	r3, [r4, #20]
 800aa3c:	b002      	add	sp, #8
 800aa3e:	bd70      	pop	{r4, r5, r6, pc}
 800aa40:	466a      	mov	r2, sp
 800aa42:	ab01      	add	r3, sp, #4
 800aa44:	f7ff ffc8 	bl	800a9d8 <__swhatbuf_r>
 800aa48:	9900      	ldr	r1, [sp, #0]
 800aa4a:	4605      	mov	r5, r0
 800aa4c:	4630      	mov	r0, r6
 800aa4e:	f7ff fa13 	bl	8009e78 <_malloc_r>
 800aa52:	b948      	cbnz	r0, 800aa68 <__smakebuf_r+0x44>
 800aa54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa58:	059a      	lsls	r2, r3, #22
 800aa5a:	d4ef      	bmi.n	800aa3c <__smakebuf_r+0x18>
 800aa5c:	f023 0303 	bic.w	r3, r3, #3
 800aa60:	f043 0302 	orr.w	r3, r3, #2
 800aa64:	81a3      	strh	r3, [r4, #12]
 800aa66:	e7e3      	b.n	800aa30 <__smakebuf_r+0xc>
 800aa68:	4b0d      	ldr	r3, [pc, #52]	; (800aaa0 <__smakebuf_r+0x7c>)
 800aa6a:	62b3      	str	r3, [r6, #40]	; 0x28
 800aa6c:	89a3      	ldrh	r3, [r4, #12]
 800aa6e:	6020      	str	r0, [r4, #0]
 800aa70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa74:	81a3      	strh	r3, [r4, #12]
 800aa76:	9b00      	ldr	r3, [sp, #0]
 800aa78:	6120      	str	r0, [r4, #16]
 800aa7a:	6163      	str	r3, [r4, #20]
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	b15b      	cbz	r3, 800aa98 <__smakebuf_r+0x74>
 800aa80:	4630      	mov	r0, r6
 800aa82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aa86:	f000 f893 	bl	800abb0 <_isatty_r>
 800aa8a:	b128      	cbz	r0, 800aa98 <__smakebuf_r+0x74>
 800aa8c:	89a3      	ldrh	r3, [r4, #12]
 800aa8e:	f023 0303 	bic.w	r3, r3, #3
 800aa92:	f043 0301 	orr.w	r3, r3, #1
 800aa96:	81a3      	strh	r3, [r4, #12]
 800aa98:	89a0      	ldrh	r0, [r4, #12]
 800aa9a:	4305      	orrs	r5, r0
 800aa9c:	81a5      	strh	r5, [r4, #12]
 800aa9e:	e7cd      	b.n	800aa3c <__smakebuf_r+0x18>
 800aaa0:	08009c91 	.word	0x08009c91

0800aaa4 <memchr>:
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	b510      	push	{r4, lr}
 800aaa8:	b2c9      	uxtb	r1, r1
 800aaaa:	4402      	add	r2, r0
 800aaac:	4293      	cmp	r3, r2
 800aaae:	4618      	mov	r0, r3
 800aab0:	d101      	bne.n	800aab6 <memchr+0x12>
 800aab2:	2000      	movs	r0, #0
 800aab4:	e003      	b.n	800aabe <memchr+0x1a>
 800aab6:	7804      	ldrb	r4, [r0, #0]
 800aab8:	3301      	adds	r3, #1
 800aaba:	428c      	cmp	r4, r1
 800aabc:	d1f6      	bne.n	800aaac <memchr+0x8>
 800aabe:	bd10      	pop	{r4, pc}

0800aac0 <__malloc_lock>:
 800aac0:	4801      	ldr	r0, [pc, #4]	; (800aac8 <__malloc_lock+0x8>)
 800aac2:	f7ff b9b7 	b.w	8009e34 <__retarget_lock_acquire_recursive>
 800aac6:	bf00      	nop
 800aac8:	200012b8 	.word	0x200012b8

0800aacc <__malloc_unlock>:
 800aacc:	4801      	ldr	r0, [pc, #4]	; (800aad4 <__malloc_unlock+0x8>)
 800aace:	f7ff b9b2 	b.w	8009e36 <__retarget_lock_release_recursive>
 800aad2:	bf00      	nop
 800aad4:	200012b8 	.word	0x200012b8

0800aad8 <_free_r>:
 800aad8:	b538      	push	{r3, r4, r5, lr}
 800aada:	4605      	mov	r5, r0
 800aadc:	2900      	cmp	r1, #0
 800aade:	d040      	beq.n	800ab62 <_free_r+0x8a>
 800aae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800aae4:	1f0c      	subs	r4, r1, #4
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	bfb8      	it	lt
 800aaea:	18e4      	addlt	r4, r4, r3
 800aaec:	f7ff ffe8 	bl	800aac0 <__malloc_lock>
 800aaf0:	4a1c      	ldr	r2, [pc, #112]	; (800ab64 <_free_r+0x8c>)
 800aaf2:	6813      	ldr	r3, [r2, #0]
 800aaf4:	b933      	cbnz	r3, 800ab04 <_free_r+0x2c>
 800aaf6:	6063      	str	r3, [r4, #4]
 800aaf8:	6014      	str	r4, [r2, #0]
 800aafa:	4628      	mov	r0, r5
 800aafc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ab00:	f7ff bfe4 	b.w	800aacc <__malloc_unlock>
 800ab04:	42a3      	cmp	r3, r4
 800ab06:	d908      	bls.n	800ab1a <_free_r+0x42>
 800ab08:	6820      	ldr	r0, [r4, #0]
 800ab0a:	1821      	adds	r1, r4, r0
 800ab0c:	428b      	cmp	r3, r1
 800ab0e:	bf01      	itttt	eq
 800ab10:	6819      	ldreq	r1, [r3, #0]
 800ab12:	685b      	ldreq	r3, [r3, #4]
 800ab14:	1809      	addeq	r1, r1, r0
 800ab16:	6021      	streq	r1, [r4, #0]
 800ab18:	e7ed      	b.n	800aaf6 <_free_r+0x1e>
 800ab1a:	461a      	mov	r2, r3
 800ab1c:	685b      	ldr	r3, [r3, #4]
 800ab1e:	b10b      	cbz	r3, 800ab24 <_free_r+0x4c>
 800ab20:	42a3      	cmp	r3, r4
 800ab22:	d9fa      	bls.n	800ab1a <_free_r+0x42>
 800ab24:	6811      	ldr	r1, [r2, #0]
 800ab26:	1850      	adds	r0, r2, r1
 800ab28:	42a0      	cmp	r0, r4
 800ab2a:	d10b      	bne.n	800ab44 <_free_r+0x6c>
 800ab2c:	6820      	ldr	r0, [r4, #0]
 800ab2e:	4401      	add	r1, r0
 800ab30:	1850      	adds	r0, r2, r1
 800ab32:	4283      	cmp	r3, r0
 800ab34:	6011      	str	r1, [r2, #0]
 800ab36:	d1e0      	bne.n	800aafa <_free_r+0x22>
 800ab38:	6818      	ldr	r0, [r3, #0]
 800ab3a:	685b      	ldr	r3, [r3, #4]
 800ab3c:	4401      	add	r1, r0
 800ab3e:	6011      	str	r1, [r2, #0]
 800ab40:	6053      	str	r3, [r2, #4]
 800ab42:	e7da      	b.n	800aafa <_free_r+0x22>
 800ab44:	d902      	bls.n	800ab4c <_free_r+0x74>
 800ab46:	230c      	movs	r3, #12
 800ab48:	602b      	str	r3, [r5, #0]
 800ab4a:	e7d6      	b.n	800aafa <_free_r+0x22>
 800ab4c:	6820      	ldr	r0, [r4, #0]
 800ab4e:	1821      	adds	r1, r4, r0
 800ab50:	428b      	cmp	r3, r1
 800ab52:	bf01      	itttt	eq
 800ab54:	6819      	ldreq	r1, [r3, #0]
 800ab56:	685b      	ldreq	r3, [r3, #4]
 800ab58:	1809      	addeq	r1, r1, r0
 800ab5a:	6021      	streq	r1, [r4, #0]
 800ab5c:	6063      	str	r3, [r4, #4]
 800ab5e:	6054      	str	r4, [r2, #4]
 800ab60:	e7cb      	b.n	800aafa <_free_r+0x22>
 800ab62:	bd38      	pop	{r3, r4, r5, pc}
 800ab64:	200012bc 	.word	0x200012bc

0800ab68 <_read_r>:
 800ab68:	b538      	push	{r3, r4, r5, lr}
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	4608      	mov	r0, r1
 800ab6e:	4611      	mov	r1, r2
 800ab70:	2200      	movs	r2, #0
 800ab72:	4d05      	ldr	r5, [pc, #20]	; (800ab88 <_read_r+0x20>)
 800ab74:	602a      	str	r2, [r5, #0]
 800ab76:	461a      	mov	r2, r3
 800ab78:	f7f5 fe9e 	bl	80008b8 <_read>
 800ab7c:	1c43      	adds	r3, r0, #1
 800ab7e:	d102      	bne.n	800ab86 <_read_r+0x1e>
 800ab80:	682b      	ldr	r3, [r5, #0]
 800ab82:	b103      	cbz	r3, 800ab86 <_read_r+0x1e>
 800ab84:	6023      	str	r3, [r4, #0]
 800ab86:	bd38      	pop	{r3, r4, r5, pc}
 800ab88:	200012c4 	.word	0x200012c4

0800ab8c <_fstat_r>:
 800ab8c:	b538      	push	{r3, r4, r5, lr}
 800ab8e:	2300      	movs	r3, #0
 800ab90:	4d06      	ldr	r5, [pc, #24]	; (800abac <_fstat_r+0x20>)
 800ab92:	4604      	mov	r4, r0
 800ab94:	4608      	mov	r0, r1
 800ab96:	4611      	mov	r1, r2
 800ab98:	602b      	str	r3, [r5, #0]
 800ab9a:	f7f5 fed1 	bl	8000940 <_fstat>
 800ab9e:	1c43      	adds	r3, r0, #1
 800aba0:	d102      	bne.n	800aba8 <_fstat_r+0x1c>
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	b103      	cbz	r3, 800aba8 <_fstat_r+0x1c>
 800aba6:	6023      	str	r3, [r4, #0]
 800aba8:	bd38      	pop	{r3, r4, r5, pc}
 800abaa:	bf00      	nop
 800abac:	200012c4 	.word	0x200012c4

0800abb0 <_isatty_r>:
 800abb0:	b538      	push	{r3, r4, r5, lr}
 800abb2:	2300      	movs	r3, #0
 800abb4:	4d05      	ldr	r5, [pc, #20]	; (800abcc <_isatty_r+0x1c>)
 800abb6:	4604      	mov	r4, r0
 800abb8:	4608      	mov	r0, r1
 800abba:	602b      	str	r3, [r5, #0]
 800abbc:	f7f5 fecf 	bl	800095e <_isatty>
 800abc0:	1c43      	adds	r3, r0, #1
 800abc2:	d102      	bne.n	800abca <_isatty_r+0x1a>
 800abc4:	682b      	ldr	r3, [r5, #0]
 800abc6:	b103      	cbz	r3, 800abca <_isatty_r+0x1a>
 800abc8:	6023      	str	r3, [r4, #0]
 800abca:	bd38      	pop	{r3, r4, r5, pc}
 800abcc:	200012c4 	.word	0x200012c4

0800abd0 <_init>:
 800abd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abd2:	bf00      	nop
 800abd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abd6:	bc08      	pop	{r3}
 800abd8:	469e      	mov	lr, r3
 800abda:	4770      	bx	lr

0800abdc <_fini>:
 800abdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800abde:	bf00      	nop
 800abe0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800abe2:	bc08      	pop	{r3}
 800abe4:	469e      	mov	lr, r3
 800abe6:	4770      	bx	lr
