/* USER CODE BEGIN Header */
/**
 ******************************************************************************
  * @file    user_diskio.c
  * @brief   This file includes a diskio driver skeleton to be completed by the user.
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2022 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
 /* USER CODE END Header */

#ifdef USE_OBSOLETE_USER_CODE_SECTION_0
/*
 * Warning: the user section 0 is no more in use (starting from CubeMx version 4.16.0)
 * To be suppressed in the future.
 * Kept to ensure backward compatibility with previous CubeMx versions when
 * migrating projects.
 * User code previously added there should be copied in the new user sections before
 * the section contents can be deleted.
 */
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */
#endif

/* USER CODE BEGIN DECL */

/* Includes ------------------------------------------------------------------*/
#include <string.h>
#include "ff_gen_drv.h"

/* Private typedef -----------------------------------------------------------*/
/* Private define ------------------------------------------------------------*/
#include <main.h>
#include <stdint.h>
#include <stdio.h>
#include <string.h>
#include <stm32f1xx_hal.h>
/* Private variables ---------------------------------------------------------*/
/* Disk status */
static volatile DSTATUS Stat = STA_NOINIT;
static FLASH_EraseInitTypeDef FATFS_EraseInitStruct;
uint32_t FATFS_PAGEError = 0;
/* USER CODE END DECL */

/* Private function prototypes -----------------------------------------------*/
DSTATUS USER_initialize (BYTE pdrv);
DSTATUS USER_status (BYTE pdrv);
DRESULT USER_read (BYTE pdrv, BYTE *buff, DWORD sector, UINT count);
#if _USE_WRITE == 1
  DRESULT USER_write (BYTE pdrv, const BYTE *buff, DWORD sector, UINT count);
#endif /* _USE_WRITE == 1 */
#if _USE_IOCTL == 1
  DRESULT USER_ioctl (BYTE pdrv, BYTE cmd, void *buff);
#endif /* _USE_IOCTL == 1 */

Diskio_drvTypeDef  USER_Driver =
{
  USER_initialize,
  USER_status,
  USER_read,
#if  _USE_WRITE
  USER_write,
#endif  /* _USE_WRITE == 1 */
#if  _USE_IOCTL == 1
  USER_ioctl,
#endif /* _USE_IOCTL == 1 */
};

/* Private functions ---------------------------------------------------------*/

/**
  * @brief  Initializes a Drive
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
  /* USER CODE BEGIN INIT */
	//HAL_FLASH_Unlock();
    Stat = RES_OK;
    return Stat;
  /* USER CODE END INIT */
}

/**
  * @brief  Gets Disk Status
  * @param  pdrv: Physical drive number (0..)
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
  /* USER CODE BEGIN STATUS */
    Stat = RES_OK;
    return Stat;
  /* USER CODE END STATUS */
}

/**
  * @brief  Reads Sector(s)
  * @param  pdrv: Physical drive number (0..)
  * @param  *buff: Data buffer to store read data
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */
DRESULT USER_read (
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
  /* USER CODE BEGIN READ */
	uint32_t inbuf_addr = sector << 9; // 1 sector has 512 bytes in size. 1 << 9 = 1*512.
	memcpy(buff,(uint8_t *)(FLASH_MEM_BASE_ADDR + inbuf_addr) ,512);
    return RES_OK;
  /* USER CODE END READ */
}

/**
  * @brief  Writes Sector(s)
  * @param  pdrv: Physical drive number (0..)
  * @param  *buff: Data to be written
  * @param  sector: Sector address (LBA)
  * @param  count: Number of sectors to write (1..128)
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1
DRESULT USER_write (
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
	static uint8_t mod_space[FLASH_PAGE_SIZE]; // space to copy data from flash for modifying data before page erase and re-flash
			// convert sector number into physical address of the flash.
			// 1 sector has 512 bytes in size.

			uint32_t temp_buf = 0; // temp buffer to merge four bytes into 4 byte 32 bit (word).
			uint32_t cpy_addr = 0;

			// Unlock flash for writing
			HAL_FLASH_Unlock();


			// Since our flash page size is 1024 bytes, but fatfs can only write 512 bytes each time (512 bytes per 1 sector).
			// Which it means that 1 flash page fits 2 fatfs sectors.
			// Thus, in order to write properly. Even sector number will we written to lower half of flash page [0-511].
			// and Odd sector number will we written to upper half of flash page [512-1023].

			// read back from flash.
			// use sector number to calculate the physical page offset of flash of that sector number.
			// (sector/2)*FLASH_PAGE_SIZE always return page-aligned number a.k.a page starting address.
			cpy_addr = (FLASH_MEM_BASE_ADDR	+ ((sector >> 1) << 10));
			memcpy(mod_space, (uint8_t*) cpy_addr,	FLASH_PAGE_SIZE);

			// modify data in buffer.
			// Even sector number reads from [0-511]. Odd sector number reads from [512-1023].
			memcpy(mod_space + ((sector % 2) << 9), buff, 512);
			//buff+=512;

			// Page erase
			FATFS_EraseInitStruct.TypeErase = FLASH_TYPEERASE_PAGES; // erase 1024 KBytes (which is the size of 1 page).
			FATFS_EraseInitStruct.PageAddress = cpy_addr; // We start erase from the beginning of sector.
			FATFS_EraseInitStruct.NbPages = 1; // this tells eraser for how many page we want to erase. Which is 1 page.

			HAL_FLASHEx_Erase(&FATFS_EraseInitStruct, &FATFS_PAGEError);

			// flash the modified data back to Flash memory.
			for (uint32_t i = 0; i < FLASH_PAGE_SIZE; i+=4) {
				temp_buf = mod_space[i] | mod_space[i+1] << 8 | mod_space[i+2] << 16
						| mod_space[i+3] << 24; // parse byte n n+1 n+2 and n+3
				//memcpy(&temp_buf, mod_space+(i*4), 4);// Copy 4 byte into one DWORD (unt32_t byte).
				HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD,
						FATFS_EraseInitStruct.PageAddress + i, temp_buf); // flash modified data onto Flash memory.

			}

    return RES_OK;
  /* USER CODE END WRITE */
}
#endif /* _USE_WRITE == 1 */

/**
  * @brief  I/O control operation
  * @param  pdrv: Physical drive number (0..)
  * @param  cmd: Control code
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
    switch (cmd) {
    	case CTRL_SYNC:
    		res = RES_OK;
    		break;

    	case GET_SECTOR_COUNT: // return sector count, which is 128.
    		*(DWORD*) buff = 128;
    		res = RES_OK;
    		break;

    	case GET_SECTOR_SIZE:
    		*(DWORD*) buff = 512;
			res = RES_OK;
			break;

    	case GET_BLOCK_SIZE: // return block size, with is 512 bytes.
    		*(DWORD*) buff = 512;
    		res = RES_OK;
    		break;

    	default:
    		res = RES_PARERR;
    	}
    return res;
  /* USER CODE END IOCTL */
}
#endif /* _USE_IOCTL == 1 */

